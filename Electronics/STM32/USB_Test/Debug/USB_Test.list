
USB_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eb0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007088  08007088  00017088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e0  080070e0  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  080070e0  080070e0  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070e0  080070e0  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070e0  080070e0  000170e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070e4  080070e4  000170e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  080070e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d8  20000184  0800726c  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  2000135c  0800726c  0002135c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013953  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ba5  00000000  00000000  00033b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c80  00000000  00000000  000366b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b38  00000000  00000000  00037330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ede1  00000000  00000000  00037e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cbaa  00000000  00000000  00056c49  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b4688  00000000  00000000  000637f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00117e7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d8  00000000  00000000  00117ef8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007070 	.word	0x08007070

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08007070 	.word	0x08007070

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 f92b 	bl	8000476 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f805 	bl	800022e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f86c 	bl	8000300 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8000228:	f006 fa28 	bl	800667c <MX_USB_Device_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800022c:	e7fe      	b.n	800022c <main+0x14>

0800022e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022e:	b580      	push	{r7, lr}
 8000230:	b0a4      	sub	sp, #144	; 0x90
 8000232:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000234:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000238:	2238      	movs	r2, #56	; 0x38
 800023a:	2100      	movs	r1, #0
 800023c:	4618      	mov	r0, r3
 800023e:	f006 ff0f 	bl	8007060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000242:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000252:	463b      	mov	r3, r7
 8000254:	2244      	movs	r2, #68	; 0x44
 8000256:	2100      	movs	r1, #0
 8000258:	4618      	mov	r0, r3
 800025a:	f006 ff01 	bl	8007060 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800025e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000262:	f001 fdf1 	bl	8001e48 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000266:	2322      	movs	r3, #34	; 0x22
 8000268:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800026e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000270:	2340      	movs	r3, #64	; 0x40
 8000272:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000274:	2301      	movs	r3, #1
 8000276:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000278:	2302      	movs	r3, #2
 800027a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800027c:	2302      	movs	r3, #2
 800027e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000280:	2301      	movs	r3, #1
 8000282:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000284:	230c      	movs	r3, #12
 8000286:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800028a:	2302      	movs	r3, #2
 800028c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000290:	2304      	movs	r3, #4
 8000292:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000296:	2302      	movs	r3, #2
 8000298:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002a0:	4618      	mov	r0, r3
 80002a2:	f001 fe85 	bl	8001fb0 <HAL_RCC_OscConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ac:	f000 f840 	bl	8000330 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b0:	230f      	movs	r3, #15
 80002b2:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b4:	2303      	movs	r3, #3
 80002b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002c8:	2102      	movs	r1, #2
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 f988 	bl	80025e0 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002d6:	f000 f82b 	bl	8000330 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002de:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80002e0:	2300      	movs	r3, #0
 80002e2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e4:	463b      	mov	r3, r7
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 fb5e 	bl	80029a8 <HAL_RCCEx_PeriphCLKConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80002f2:	f000 f81d 	bl	8000330 <Error_Handler>
  }
}
 80002f6:	bf00      	nop
 80002f8:	3790      	adds	r7, #144	; 0x90
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
	...

08000300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000306:	4b09      	ldr	r3, [pc, #36]	; (800032c <MX_GPIO_Init+0x2c>)
 8000308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030a:	4a08      	ldr	r2, [pc, #32]	; (800032c <MX_GPIO_Init+0x2c>)
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000312:	4b06      	ldr	r3, [pc, #24]	; (800032c <MX_GPIO_Init+0x2c>)
 8000314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000316:	f003 0301 	and.w	r3, r3, #1
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	687b      	ldr	r3, [r7, #4]

}
 800031e:	bf00      	nop
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000

08000330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
	...

08000340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <HAL_MspInit+0x44>)
 8000348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800034a:	4a0e      	ldr	r2, [pc, #56]	; (8000384 <HAL_MspInit+0x44>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6613      	str	r3, [r2, #96]	; 0x60
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <HAL_MspInit+0x44>)
 8000354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800035e:	4b09      	ldr	r3, [pc, #36]	; (8000384 <HAL_MspInit+0x44>)
 8000360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000362:	4a08      	ldr	r2, [pc, #32]	; (8000384 <HAL_MspInit+0x44>)
 8000364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000368:	6593      	str	r3, [r2, #88]	; 0x58
 800036a:	4b06      	ldr	r3, [pc, #24]	; (8000384 <HAL_MspInit+0x44>)
 800036c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800036e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000376:	f001 fe0b 	bl	8001f90 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800037a:	bf00      	nop
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40021000 	.word	0x40021000

08000388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000396:	b480      	push	{r7}
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800039a:	e7fe      	b.n	800039a <HardFault_Handler+0x4>

0800039c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <MemManage_Handler+0x4>

080003a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003a6:	e7fe      	b.n	80003a6 <BusFault_Handler+0x4>

080003a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003ac:	e7fe      	b.n	80003ac <UsageFault_Handler+0x4>

080003ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003b2:	bf00      	nop
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr

080003ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ca:	b480      	push	{r7}
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ce:	bf00      	nop
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr

080003d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003dc:	f000 f89e 	bl	800051c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003e8:	4802      	ldr	r0, [pc, #8]	; (80003f4 <USB_LP_IRQHandler+0x10>)
 80003ea:	f000 facb 	bl	8000984 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20001068 	.word	0x20001068

080003f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003fc:	4b08      	ldr	r3, [pc, #32]	; (8000420 <SystemInit+0x28>)
 80003fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000402:	4a07      	ldr	r2, [pc, #28]	; (8000420 <SystemInit+0x28>)
 8000404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800040c:	4b04      	ldr	r3, [pc, #16]	; (8000420 <SystemInit+0x28>)
 800040e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000412:	609a      	str	r2, [r3, #8]
#endif
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	e000ed00 	.word	0xe000ed00

08000424 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000424:	480d      	ldr	r0, [pc, #52]	; (800045c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000426:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000428:	480d      	ldr	r0, [pc, #52]	; (8000460 <LoopForever+0x6>)
  ldr r1, =_edata
 800042a:	490e      	ldr	r1, [pc, #56]	; (8000464 <LoopForever+0xa>)
  ldr r2, =_sidata
 800042c:	4a0e      	ldr	r2, [pc, #56]	; (8000468 <LoopForever+0xe>)
  movs r3, #0
 800042e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000430:	e002      	b.n	8000438 <LoopCopyDataInit>

08000432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000436:	3304      	adds	r3, #4

08000438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800043c:	d3f9      	bcc.n	8000432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800043e:	4a0b      	ldr	r2, [pc, #44]	; (800046c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000440:	4c0b      	ldr	r4, [pc, #44]	; (8000470 <LoopForever+0x16>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000444:	e001      	b.n	800044a <LoopFillZerobss>

08000446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000448:	3204      	adds	r2, #4

0800044a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800044c:	d3fb      	bcc.n	8000446 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800044e:	f7ff ffd3 	bl	80003f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000452:	f006 fde1 	bl	8007018 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000456:	f7ff fedf 	bl	8000218 <main>

0800045a <LoopForever>:

LoopForever:
    b LoopForever
 800045a:	e7fe      	b.n	800045a <LoopForever>
  ldr   r0, =_estack
 800045c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000464:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000468:	080070e8 	.word	0x080070e8
  ldr r2, =_sbss
 800046c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000470:	2000135c 	.word	0x2000135c

08000474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000474:	e7fe      	b.n	8000474 <ADC1_2_IRQHandler>

08000476 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000476:	b580      	push	{r7, lr}
 8000478:	b082      	sub	sp, #8
 800047a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800047c:	2300      	movs	r3, #0
 800047e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000480:	2003      	movs	r0, #3
 8000482:	f000 f939 	bl	80006f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000486:	2000      	movs	r0, #0
 8000488:	f000 f80e 	bl	80004a8 <HAL_InitTick>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000492:	2301      	movs	r3, #1
 8000494:	71fb      	strb	r3, [r7, #7]
 8000496:	e001      	b.n	800049c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000498:	f7ff ff52 	bl	8000340 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800049c:	79fb      	ldrb	r3, [r7, #7]

}
 800049e:	4618      	mov	r0, r3
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004b0:	2300      	movs	r3, #0
 80004b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80004b4:	4b16      	ldr	r3, [pc, #88]	; (8000510 <HAL_InitTick+0x68>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d022      	beq.n	8000502 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80004bc:	4b15      	ldr	r3, [pc, #84]	; (8000514 <HAL_InitTick+0x6c>)
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	4b13      	ldr	r3, [pc, #76]	; (8000510 <HAL_InitTick+0x68>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80004cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 f944 	bl	800075e <HAL_SYSTICK_Config>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d10f      	bne.n	80004fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b0f      	cmp	r3, #15
 80004e0:	d809      	bhi.n	80004f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004e2:	2200      	movs	r2, #0
 80004e4:	6879      	ldr	r1, [r7, #4]
 80004e6:	f04f 30ff 	mov.w	r0, #4294967295
 80004ea:	f000 f910 	bl	800070e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004ee:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <HAL_InitTick+0x70>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	6013      	str	r3, [r2, #0]
 80004f4:	e007      	b.n	8000506 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80004f6:	2301      	movs	r3, #1
 80004f8:	73fb      	strb	r3, [r7, #15]
 80004fa:	e004      	b.n	8000506 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80004fc:	2301      	movs	r3, #1
 80004fe:	73fb      	strb	r3, [r7, #15]
 8000500:	e001      	b.n	8000506 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000502:	2301      	movs	r3, #1
 8000504:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000506:	7bfb      	ldrb	r3, [r7, #15]
}
 8000508:	4618      	mov	r0, r3
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000008 	.word	0x20000008
 8000514:	20000000 	.word	0x20000000
 8000518:	20000004 	.word	0x20000004

0800051c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <HAL_IncTick+0x1c>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <HAL_IncTick+0x20>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4413      	add	r3, r2
 800052a:	4a03      	ldr	r2, [pc, #12]	; (8000538 <HAL_IncTick+0x1c>)
 800052c:	6013      	str	r3, [r2, #0]
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	200003c4 	.word	0x200003c4
 800053c:	20000008 	.word	0x20000008

08000540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  return uwTick;
 8000544:	4b03      	ldr	r3, [pc, #12]	; (8000554 <HAL_GetTick+0x14>)
 8000546:	681b      	ldr	r3, [r3, #0]
}
 8000548:	4618      	mov	r0, r3
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	200003c4 	.word	0x200003c4

08000558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f003 0307 	and.w	r3, r3, #7
 8000566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <__NVIC_SetPriorityGrouping+0x44>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000574:	4013      	ands	r3, r2
 8000576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800058a:	4a04      	ldr	r2, [pc, #16]	; (800059c <__NVIC_SetPriorityGrouping+0x44>)
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	60d3      	str	r3, [r2, #12]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	e000ed00 	.word	0xe000ed00

080005a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <__NVIC_GetPriorityGrouping+0x18>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	0a1b      	lsrs	r3, r3, #8
 80005aa:	f003 0307 	and.w	r3, r3, #7
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	db0b      	blt.n	80005e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	f003 021f 	and.w	r2, r3, #31
 80005d4:	4907      	ldr	r1, [pc, #28]	; (80005f4 <__NVIC_EnableIRQ+0x38>)
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	095b      	lsrs	r3, r3, #5
 80005dc:	2001      	movs	r0, #1
 80005de:	fa00 f202 	lsl.w	r2, r0, r2
 80005e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	e000e100 	.word	0xe000e100

080005f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	6039      	str	r1, [r7, #0]
 8000602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000608:	2b00      	cmp	r3, #0
 800060a:	db0a      	blt.n	8000622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	b2da      	uxtb	r2, r3
 8000610:	490c      	ldr	r1, [pc, #48]	; (8000644 <__NVIC_SetPriority+0x4c>)
 8000612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000616:	0112      	lsls	r2, r2, #4
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	440b      	add	r3, r1
 800061c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000620:	e00a      	b.n	8000638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4908      	ldr	r1, [pc, #32]	; (8000648 <__NVIC_SetPriority+0x50>)
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	f003 030f 	and.w	r3, r3, #15
 800062e:	3b04      	subs	r3, #4
 8000630:	0112      	lsls	r2, r2, #4
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	440b      	add	r3, r1
 8000636:	761a      	strb	r2, [r3, #24]
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000e100 	.word	0xe000e100
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800064c:	b480      	push	{r7}
 800064e:	b089      	sub	sp, #36	; 0x24
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f003 0307 	and.w	r3, r3, #7
 800065e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	f1c3 0307 	rsb	r3, r3, #7
 8000666:	2b04      	cmp	r3, #4
 8000668:	bf28      	it	cs
 800066a:	2304      	movcs	r3, #4
 800066c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	3304      	adds	r3, #4
 8000672:	2b06      	cmp	r3, #6
 8000674:	d902      	bls.n	800067c <NVIC_EncodePriority+0x30>
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	3b03      	subs	r3, #3
 800067a:	e000      	b.n	800067e <NVIC_EncodePriority+0x32>
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000680:	f04f 32ff 	mov.w	r2, #4294967295
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	fa02 f303 	lsl.w	r3, r2, r3
 800068a:	43da      	mvns	r2, r3
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	401a      	ands	r2, r3
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000694:	f04f 31ff 	mov.w	r1, #4294967295
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	fa01 f303 	lsl.w	r3, r1, r3
 800069e:	43d9      	mvns	r1, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	4313      	orrs	r3, r2
         );
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3724      	adds	r7, #36	; 0x24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
	...

080006b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	3b01      	subs	r3, #1
 80006c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006c4:	d301      	bcc.n	80006ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006c6:	2301      	movs	r3, #1
 80006c8:	e00f      	b.n	80006ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ca:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <SysTick_Config+0x40>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006d2:	210f      	movs	r1, #15
 80006d4:	f04f 30ff 	mov.w	r0, #4294967295
 80006d8:	f7ff ff8e 	bl	80005f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <SysTick_Config+0x40>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <SysTick_Config+0x40>)
 80006e4:	2207      	movs	r2, #7
 80006e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	e000e010 	.word	0xe000e010

080006f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff ff29 	bl	8000558 <__NVIC_SetPriorityGrouping>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b086      	sub	sp, #24
 8000712:	af00      	add	r7, sp, #0
 8000714:	4603      	mov	r3, r0
 8000716:	60b9      	str	r1, [r7, #8]
 8000718:	607a      	str	r2, [r7, #4]
 800071a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800071c:	f7ff ff40 	bl	80005a0 <__NVIC_GetPriorityGrouping>
 8000720:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	68b9      	ldr	r1, [r7, #8]
 8000726:	6978      	ldr	r0, [r7, #20]
 8000728:	f7ff ff90 	bl	800064c <NVIC_EncodePriority>
 800072c:	4602      	mov	r2, r0
 800072e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000732:	4611      	mov	r1, r2
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff5f 	bl	80005f8 <__NVIC_SetPriority>
}
 800073a:	bf00      	nop
 800073c:	3718      	adds	r7, #24
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b082      	sub	sp, #8
 8000746:	af00      	add	r7, sp, #0
 8000748:	4603      	mov	r3, r0
 800074a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800074c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff33 	bl	80005bc <__NVIC_EnableIRQ>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff ffa4 	bl	80006b4 <SysTick_Config>
 800076c:	4603      	mov	r3, r0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000776:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000778:	b08b      	sub	sp, #44	; 0x2c
 800077a:	af06      	add	r7, sp, #24
 800077c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d101      	bne.n	8000788 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000784:	2301      	movs	r3, #1
 8000786:	e0d7      	b.n	8000938 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2b00      	cmp	r3, #0
 8000792:	d106      	bne.n	80007a2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f006 f94b 	bl	8006a38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2203      	movs	r2, #3
 80007a6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f002 fb01 	bl	8002db6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007b4:	2300      	movs	r3, #0
 80007b6:	73fb      	strb	r3, [r7, #15]
 80007b8:	e04c      	b.n	8000854 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	6879      	ldr	r1, [r7, #4]
 80007be:	1c5a      	adds	r2, r3, #1
 80007c0:	4613      	mov	r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	4413      	add	r3, r2
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	440b      	add	r3, r1
 80007ca:	3301      	adds	r3, #1
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	4613      	mov	r3, r2
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	440b      	add	r3, r1
 80007e0:	7bfa      	ldrb	r2, [r7, #15]
 80007e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80007e4:	7bfa      	ldrb	r2, [r7, #15]
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	b298      	uxth	r0, r3
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	4613      	mov	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4413      	add	r3, r2
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	440b      	add	r3, r1
 80007f6:	3336      	adds	r3, #54	; 0x36
 80007f8:	4602      	mov	r2, r0
 80007fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	4613      	mov	r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	440b      	add	r3, r1
 800080c:	3303      	adds	r3, #3
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000812:	7bfa      	ldrb	r2, [r7, #15]
 8000814:	6879      	ldr	r1, [r7, #4]
 8000816:	4613      	mov	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4413      	add	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	440b      	add	r3, r1
 8000820:	3338      	adds	r3, #56	; 0x38
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000826:	7bfa      	ldrb	r2, [r7, #15]
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	4613      	mov	r3, r2
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	4413      	add	r3, r2
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	440b      	add	r3, r1
 8000834:	333c      	adds	r3, #60	; 0x3c
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800083a:	7bfa      	ldrb	r2, [r7, #15]
 800083c:	6879      	ldr	r1, [r7, #4]
 800083e:	4613      	mov	r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	440b      	add	r3, r1
 8000848:	3340      	adds	r3, #64	; 0x40
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	3301      	adds	r3, #1
 8000852:	73fb      	strb	r3, [r7, #15]
 8000854:	7bfa      	ldrb	r2, [r7, #15]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	429a      	cmp	r2, r3
 800085c:	d3ad      	bcc.n	80007ba <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800085e:	2300      	movs	r3, #0
 8000860:	73fb      	strb	r3, [r7, #15]
 8000862:	e044      	b.n	80008ee <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000864:	7bfa      	ldrb	r2, [r7, #15]
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	4613      	mov	r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	4413      	add	r3, r2
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	440b      	add	r3, r1
 8000872:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800087a:	7bfa      	ldrb	r2, [r7, #15]
 800087c:	6879      	ldr	r1, [r7, #4]
 800087e:	4613      	mov	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	4413      	add	r3, r2
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	440b      	add	r3, r1
 8000888:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800088c:	7bfa      	ldrb	r2, [r7, #15]
 800088e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000890:	7bfa      	ldrb	r2, [r7, #15]
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	4613      	mov	r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	4413      	add	r3, r2
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	440b      	add	r3, r1
 800089e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80008a6:	7bfa      	ldrb	r2, [r7, #15]
 80008a8:	6879      	ldr	r1, [r7, #4]
 80008aa:	4613      	mov	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	4413      	add	r3, r2
 80008b0:	00db      	lsls	r3, r3, #3
 80008b2:	440b      	add	r3, r1
 80008b4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80008bc:	7bfa      	ldrb	r2, [r7, #15]
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	4613      	mov	r3, r2
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	4413      	add	r3, r2
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	440b      	add	r3, r1
 80008ca:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	4613      	mov	r3, r2
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	4413      	add	r3, r2
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	440b      	add	r3, r1
 80008e0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	3301      	adds	r3, #1
 80008ec:	73fb      	strb	r3, [r7, #15]
 80008ee:	7bfa      	ldrb	r2, [r7, #15]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d3b5      	bcc.n	8000864 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	687e      	ldr	r6, [r7, #4]
 8000900:	466d      	mov	r5, sp
 8000902:	f106 0410 	add.w	r4, r6, #16
 8000906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800090a:	6823      	ldr	r3, [r4, #0]
 800090c:	602b      	str	r3, [r5, #0]
 800090e:	1d33      	adds	r3, r6, #4
 8000910:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000912:	6838      	ldr	r0, [r7, #0]
 8000914:	f002 fa6a 	bl	8002dec <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2200      	movs	r2, #0
 800091c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2201      	movs	r2, #1
 8000924:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	69db      	ldr	r3, [r3, #28]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d102      	bne.n	8000936 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f001 fa5e 	bl	8001df2 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000940 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800094e:	2b01      	cmp	r3, #1
 8000950:	d101      	bne.n	8000956 <HAL_PCD_Start+0x16>
 8000952:	2302      	movs	r3, #2
 8000954:	e012      	b.n	800097c <HAL_PCD_Start+0x3c>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2201      	movs	r2, #1
 800095a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4618      	mov	r0, r3
 8000964:	f002 fa10 	bl	8002d88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4618      	mov	r0, r3
 800096e:	f004 f9fc 	bl	8004d6a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2200      	movs	r2, #0
 8000976:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800097a:	2300      	movs	r3, #0
}
 800097c:	4618      	mov	r0, r3
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4618      	mov	r0, r3
 8000992:	f004 fa01 	bl	8004d98 <USB_ReadInterrupts>
 8000996:	4603      	mov	r3, r0
 8000998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800099c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009a0:	d102      	bne.n	80009a8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f000 fb5b 	bl	800105e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f004 f9f3 	bl	8004d98 <USB_ReadInterrupts>
 80009b2:	4603      	mov	r3, r0
 80009b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009bc:	d112      	bne.n	80009e4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009d0:	b292      	uxth	r2, r2
 80009d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f006 f8a9 	bl	8006b2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80009dc:	2100      	movs	r1, #0
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f000 f91e 	bl	8000c20 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f004 f9d5 	bl	8004d98 <USB_ReadInterrupts>
 80009ee:	4603      	mov	r3, r0
 80009f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009f8:	d10b      	bne.n	8000a12 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000a0c:	b292      	uxth	r2, r2
 8000a0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f004 f9be 	bl	8004d98 <USB_ReadInterrupts>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a26:	d10b      	bne.n	8000a40 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a3a:	b292      	uxth	r2, r2
 8000a3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f004 f9a7 	bl	8004d98 <USB_ReadInterrupts>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a54:	d133      	bne.n	8000abe <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f022 0204 	bic.w	r2, r2, #4
 8000a68:	b292      	uxth	r2, r2
 8000a6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f022 0208 	bic.w	r2, r2, #8
 8000a80:	b292      	uxth	r2, r2
 8000a82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d107      	bne.n	8000aa0 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2200      	movs	r2, #0
 8000a94:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000a98:	2100      	movs	r1, #0
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f006 fa3c 	bl	8006f18 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f006 f87d 	bl	8006ba0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ab8:	b292      	uxth	r2, r2
 8000aba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f004 f968 	bl	8004d98 <USB_ReadInterrupts>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ad2:	d126      	bne.n	8000b22 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f042 0208 	orr.w	r2, r2, #8
 8000ae6:	b292      	uxth	r2, r2
 8000ae8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000afe:	b292      	uxth	r2, r2
 8000b00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f042 0204 	orr.w	r2, r2, #4
 8000b16:	b292      	uxth	r2, r2
 8000b18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f006 f825 	bl	8006b6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f004 f936 	bl	8004d98 <USB_ReadInterrupts>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b32:	2b80      	cmp	r3, #128	; 0x80
 8000b34:	d13f      	bne.n	8000bb6 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b48:	b292      	uxth	r2, r2
 8000b4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d12b      	bne.n	8000bb0 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f042 0204 	orr.w	r2, r2, #4
 8000b6a:	b292      	uxth	r2, r2
 8000b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f042 0208 	orr.w	r2, r2, #8
 8000b82:	b292      	uxth	r2, r2
 8000b84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	089b      	lsrs	r3, r3, #2
 8000b9c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f006 f9b5 	bl	8006f18 <HAL_PCDEx_LPM_Callback>
 8000bae:	e002      	b.n	8000bb6 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f005 ffdb 	bl	8006b6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f004 f8ec 	bl	8004d98 <USB_ReadInterrupts>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bca:	d10e      	bne.n	8000bea <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000bde:	b292      	uxth	r2, r2
 8000be0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f005 ff94 	bl	8006b12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f004 f8d2 	bl	8004d98 <USB_ReadInterrupts>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bfe:	d10b      	bne.n	8000c18 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c12:	b292      	uxth	r2, r2
 8000c14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d101      	bne.n	8000c3a <HAL_PCD_SetAddress+0x1a>
 8000c36:	2302      	movs	r3, #2
 8000c38:	e013      	b.n	8000c62 <HAL_PCD_SetAddress+0x42>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	78fa      	ldrb	r2, [r7, #3]
 8000c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	78fa      	ldrb	r2, [r7, #3]
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f004 f875 	bl	8004d42 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b084      	sub	sp, #16
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	4608      	mov	r0, r1
 8000c74:	4611      	mov	r1, r2
 8000c76:	461a      	mov	r2, r3
 8000c78:	4603      	mov	r3, r0
 8000c7a:	70fb      	strb	r3, [r7, #3]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	803b      	strh	r3, [r7, #0]
 8000c80:	4613      	mov	r3, r2
 8000c82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000c84:	2300      	movs	r3, #0
 8000c86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	da0e      	bge.n	8000cae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c90:	78fb      	ldrb	r3, [r7, #3]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	4613      	mov	r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4413      	add	r3, r2
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	705a      	strb	r2, [r3, #1]
 8000cac:	e00e      	b.n	8000ccc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000cae:	78fb      	ldrb	r3, [r7, #3]
 8000cb0:	f003 0207 	and.w	r2, r3, #7
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4413      	add	r3, r2
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000cd8:	883a      	ldrh	r2, [r7, #0]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	78ba      	ldrb	r2, [r7, #2]
 8000ce2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	785b      	ldrb	r3, [r3, #1]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d004      	beq.n	8000cf6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000cf6:	78bb      	ldrb	r3, [r7, #2]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d102      	bne.n	8000d02 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d101      	bne.n	8000d10 <HAL_PCD_EP_Open+0xa6>
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	e00e      	b.n	8000d2e <HAL_PCD_EP_Open+0xc4>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2201      	movs	r2, #1
 8000d14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	68f9      	ldr	r1, [r7, #12]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f002 f886 	bl	8002e30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000d2c:	7afb      	ldrb	r3, [r7, #11]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b084      	sub	sp, #16
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000d42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	da0e      	bge.n	8000d68 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d4a:	78fb      	ldrb	r3, [r7, #3]
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	1c5a      	adds	r2, r3, #1
 8000d52:	4613      	mov	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2201      	movs	r2, #1
 8000d64:	705a      	strb	r2, [r3, #1]
 8000d66:	e00e      	b.n	8000d86 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d68:	78fb      	ldrb	r3, [r7, #3]
 8000d6a:	f003 0207 	and.w	r2, r3, #7
 8000d6e:	4613      	mov	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2200      	movs	r2, #0
 8000d84:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000d86:	78fb      	ldrb	r3, [r7, #3]
 8000d88:	f003 0307 	and.w	r3, r3, #7
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d101      	bne.n	8000da0 <HAL_PCD_EP_Close+0x6a>
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	e00e      	b.n	8000dbe <HAL_PCD_EP_Close+0x88>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2201      	movs	r2, #1
 8000da4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	68f9      	ldr	r1, [r7, #12]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 fbac 	bl	800350c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	60f8      	str	r0, [r7, #12]
 8000dce:	607a      	str	r2, [r7, #4]
 8000dd0:	603b      	str	r3, [r7, #0]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000dd6:	7afb      	ldrb	r3, [r7, #11]
 8000dd8:	f003 0207 	and.w	r2, r3, #7
 8000ddc:	4613      	mov	r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4413      	add	r3, r2
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	4413      	add	r3, r2
 8000dec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	683a      	ldr	r2, [r7, #0]
 8000df8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	2200      	movs	r2, #0
 8000e04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e06:	7afb      	ldrb	r3, [r7, #11]
 8000e08:	f003 0307 	and.w	r3, r3, #7
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e12:	7afb      	ldrb	r3, [r7, #11]
 8000e14:	f003 0307 	and.w	r3, r3, #7
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d106      	bne.n	8000e2a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6979      	ldr	r1, [r7, #20]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 fd5f 	bl	80038e6 <USB_EPStartXfer>
 8000e28:	e005      	b.n	8000e36 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6979      	ldr	r1, [r7, #20]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f002 fd58 	bl	80038e6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000e4c:	78fb      	ldrb	r3, [r7, #3]
 8000e4e:	f003 0207 	and.w	r2, r3, #7
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	4613      	mov	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	440b      	add	r3, r1
 8000e5e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e80:	7afb      	ldrb	r3, [r7, #11]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	4613      	mov	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	4413      	add	r3, r2
 8000e94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000ebc:	7afb      	ldrb	r3, [r7, #11]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000ec8:	7afb      	ldrb	r3, [r7, #11]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d106      	bne.n	8000ee0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6979      	ldr	r1, [r7, #20]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 fd04 	bl	80038e6 <USB_EPStartXfer>
 8000ede:	e005      	b.n	8000eec <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	6979      	ldr	r1, [r7, #20]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f002 fcfd 	bl	80038e6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b084      	sub	sp, #16
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	460b      	mov	r3, r1
 8000f00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000f02:	78fb      	ldrb	r3, [r7, #3]
 8000f04:	f003 0207 	and.w	r2, r3, #7
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d901      	bls.n	8000f14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e04c      	b.n	8000fae <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000f14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	da0e      	bge.n	8000f3a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f1c:	78fb      	ldrb	r3, [r7, #3]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	4613      	mov	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2201      	movs	r2, #1
 8000f36:	705a      	strb	r2, [r3, #1]
 8000f38:	e00c      	b.n	8000f54 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000f3a:	78fa      	ldrb	r2, [r7, #3]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2200      	movs	r2, #0
 8000f52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2201      	movs	r2, #1
 8000f58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f5a:	78fb      	ldrb	r3, [r7, #3]
 8000f5c:	f003 0307 	and.w	r3, r3, #7
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d101      	bne.n	8000f74 <HAL_PCD_EP_SetStall+0x7e>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e01c      	b.n	8000fae <HAL_PCD_EP_SetStall+0xb8>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68f9      	ldr	r1, [r7, #12]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f003 fdde 	bl	8004b44 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d108      	bne.n	8000fa4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f003 ff0a 	bl	8004db8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b084      	sub	sp, #16
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000fc2:	78fb      	ldrb	r3, [r7, #3]
 8000fc4:	f003 020f 	and.w	r2, r3, #15
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d901      	bls.n	8000fd4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e040      	b.n	8001056 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000fd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	da0e      	bge.n	8000ffa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	705a      	strb	r2, [r3, #1]
 8000ff8:	e00e      	b.n	8001018 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000ffa:	78fb      	ldrb	r3, [r7, #3]
 8000ffc:	f003 0207 	and.w	r2, r3, #7
 8001000:	4613      	mov	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	4413      	add	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2200      	movs	r2, #0
 8001016:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2200      	movs	r2, #0
 800101c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800101e:	78fb      	ldrb	r3, [r7, #3]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	b2da      	uxtb	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001030:	2b01      	cmp	r3, #1
 8001032:	d101      	bne.n	8001038 <HAL_PCD_EP_ClrStall+0x82>
 8001034:	2302      	movs	r3, #2
 8001036:	e00e      	b.n	8001056 <HAL_PCD_EP_ClrStall+0xa0>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68f9      	ldr	r1, [r7, #12]
 8001046:	4618      	mov	r0, r3
 8001048:	f003 fdcd 	bl	8004be6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b08e      	sub	sp, #56	; 0x38
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001066:	e2d1      	b.n	800160c <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001070:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001072:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001074:	b2db      	uxtb	r3, r3
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800107e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001082:	2b00      	cmp	r3, #0
 8001084:	f040 8152 	bne.w	800132c <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001088:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	2b00      	cmp	r3, #0
 8001090:	d150      	bne.n	8001134 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	b29b      	uxth	r3, r3
 800109a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800109e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010a2:	81fb      	strh	r3, [r7, #14]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	89fb      	ldrh	r3, [r7, #14]
 80010aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80010ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3328      	adds	r3, #40	; 0x28
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	461a      	mov	r2, r3
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	4413      	add	r3, r2
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	6812      	ldr	r2, [r2, #0]
 80010d4:	4413      	add	r3, r2
 80010d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	695a      	ldr	r2, [r3, #20]
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	441a      	add	r2, r3
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80010f2:	2100      	movs	r1, #0
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f005 fcf2 	bl	8006ade <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 8282 	beq.w	800160c <PCD_EP_ISR_Handler+0x5ae>
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	2b00      	cmp	r3, #0
 800110e:	f040 827d 	bne.w	800160c <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001118:	b2db      	uxtb	r3, r3
 800111a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800111e:	b2da      	uxtb	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	b292      	uxth	r2, r2
 8001126:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001132:	e26b      	b.n	800160c <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001144:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800114a:	2b00      	cmp	r3, #0
 800114c:	d032      	beq.n	80011b4 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001156:	b29b      	uxth	r3, r3
 8001158:	461a      	mov	r2, r3
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	6812      	ldr	r2, [r2, #0]
 8001166:	4413      	add	r3, r2
 8001168:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6818      	ldr	r0, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001188:	b29b      	uxth	r3, r3
 800118a:	f003 fe62 	bl	8004e52 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	b29a      	uxth	r2, r3
 8001196:	f640 738f 	movw	r3, #3983	; 0xf8f
 800119a:	4013      	ands	r3, r2
 800119c:	823b      	strh	r3, [r7, #16]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	8a3a      	ldrh	r2, [r7, #16]
 80011a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011a8:	b292      	uxth	r2, r2
 80011aa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f005 fc69 	bl	8006a84 <HAL_PCD_SetupStageCallback>
 80011b2:	e22b      	b.n	800160c <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80011b4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f280 8227 	bge.w	800160c <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80011ca:	4013      	ands	r3, r2
 80011cc:	83bb      	strh	r3, [r7, #28]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	8bba      	ldrh	r2, [r7, #28]
 80011d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011d8:	b292      	uxth	r2, r2
 80011da:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	4413      	add	r3, r2
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6812      	ldr	r2, [r2, #0]
 80011f4:	4413      	add	r3, r2
 80011f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d019      	beq.n	8001240 <PCD_EP_ISR_Handler+0x1e2>
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d015      	beq.n	8001240 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	6959      	ldr	r1, [r3, #20]
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001224:	b29b      	uxth	r3, r3
 8001226:	f003 fe14 	bl	8004e52 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	695a      	ldr	r2, [r3, #20]
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	441a      	add	r2, r3
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001238:	2100      	movs	r1, #0
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f005 fc34 	bl	8006aa8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	61bb      	str	r3, [r7, #24]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800124e:	b29b      	uxth	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4413      	add	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d112      	bne.n	800128e <PCD_EP_ISR_Handler+0x230>
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	b29b      	uxth	r3, r3
 800126e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001272:	b29a      	uxth	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	801a      	strh	r2, [r3, #0]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	b29b      	uxth	r3, r3
 800127e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001286:	b29a      	uxth	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	801a      	strh	r2, [r3, #0]
 800128c:	e02f      	b.n	80012ee <PCD_EP_ISR_Handler+0x290>
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	2b3e      	cmp	r3, #62	; 0x3e
 8001294:	d813      	bhi.n	80012be <PCD_EP_ISR_Handler+0x260>
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	085b      	lsrs	r3, r3, #1
 800129c:	633b      	str	r3, [r7, #48]	; 0x30
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d002      	beq.n	80012b0 <PCD_EP_ISR_Handler+0x252>
 80012aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ac:	3301      	adds	r3, #1
 80012ae:	633b      	str	r3, [r7, #48]	; 0x30
 80012b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	029b      	lsls	r3, r3, #10
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	801a      	strh	r2, [r3, #0]
 80012bc:	e017      	b.n	80012ee <PCD_EP_ISR_Handler+0x290>
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	095b      	lsrs	r3, r3, #5
 80012c4:	633b      	str	r3, [r7, #48]	; 0x30
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	f003 031f 	and.w	r3, r3, #31
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d102      	bne.n	80012d8 <PCD_EP_ISR_Handler+0x27a>
 80012d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d4:	3b01      	subs	r3, #1
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
 80012d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012da:	b29b      	uxth	r3, r3
 80012dc:	029b      	lsls	r3, r3, #10
 80012de:	b29b      	uxth	r3, r3
 80012e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80012e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012fe:	827b      	strh	r3, [r7, #18]
 8001300:	8a7b      	ldrh	r3, [r7, #18]
 8001302:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001306:	827b      	strh	r3, [r7, #18]
 8001308:	8a7b      	ldrh	r3, [r7, #18]
 800130a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800130e:	827b      	strh	r3, [r7, #18]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	8a7b      	ldrh	r3, [r7, #18]
 8001316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800131a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800131e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001326:	b29b      	uxth	r3, r3
 8001328:	8013      	strh	r3, [r2, #0]
 800132a:	e16f      	b.n	800160c <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800133e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001342:	2b00      	cmp	r3, #0
 8001344:	f280 80e4 	bge.w	8001510 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	b29a      	uxth	r2, r3
 800135a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800135e:	4013      	ands	r3, r2
 8001360:	853b      	strh	r3, [r7, #40]	; 0x28
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001372:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001376:	b292      	uxth	r2, r2
 8001378:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800137a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	7b1b      	ldrb	r3, [r3, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d120      	bne.n	80013da <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4413      	add	r3, r2
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6812      	ldr	r2, [r2, #0]
 80013b0:	4413      	add	r3, r2
 80013b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013bc:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80013be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 8083 	beq.w	80014cc <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	6959      	ldr	r1, [r3, #20]
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	88da      	ldrh	r2, [r3, #6]
 80013d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013d4:	f003 fd3d 	bl	8004e52 <USB_ReadPMA>
 80013d8:	e078      	b.n	80014cc <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	78db      	ldrb	r3, [r3, #3]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d108      	bne.n	80013f4 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80013e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80013e4:	461a      	mov	r2, r3
 80013e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 f91d 	bl	8001628 <HAL_PCD_EP_DB_Receive>
 80013ee:	4603      	mov	r3, r0
 80013f0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80013f2:	e06b      	b.n	80014cc <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	b29b      	uxth	r3, r3
 8001406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800140a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800140e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	441a      	add	r2, r3
 800141e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800142c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001430:	b29b      	uxth	r3, r3
 8001432:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	b29b      	uxth	r3, r3
 8001446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d01f      	beq.n	800148e <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001456:	b29b      	uxth	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	4413      	add	r3, r2
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	4413      	add	r3, r2
 8001468:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001472:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001474:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001476:	2b00      	cmp	r3, #0
 8001478:	d028      	beq.n	80014cc <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	6959      	ldr	r1, [r3, #20]
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	891a      	ldrh	r2, [r3, #8]
 8001486:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001488:	f003 fce3 	bl	8004e52 <USB_ReadPMA>
 800148c:	e01e      	b.n	80014cc <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001496:	b29b      	uxth	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	4413      	add	r3, r2
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014b2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80014b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d008      	beq.n	80014cc <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	6959      	ldr	r1, [r3, #20]
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	895a      	ldrh	r2, [r3, #10]
 80014c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014c8:	f003 fcc3 	bl	8004e52 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	69da      	ldr	r2, [r3, #28]
 80014d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014d2:	441a      	add	r2, r3
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	695a      	ldr	r2, [r3, #20]
 80014dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014de:	441a      	add	r2, r3
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d004      	beq.n	80014f6 <PCD_EP_ISR_Handler+0x498>
 80014ec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d206      	bcs.n	8001504 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4619      	mov	r1, r3
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f005 fad3 	bl	8006aa8 <HAL_PCD_DataOutStageCallback>
 8001502:	e005      	b.n	8001510 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800150a:	4618      	mov	r0, r3
 800150c:	f002 f9eb 	bl	80038e6 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001510:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001516:	2b00      	cmp	r3, #0
 8001518:	d078      	beq.n	800160c <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 800151a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001548:	843b      	strh	r3, [r7, #32]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	441a      	add	r2, r3
 8001558:	8c3b      	ldrh	r3, [r7, #32]
 800155a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800155e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001562:	b29b      	uxth	r3, r3
 8001564:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	78db      	ldrb	r3, [r3, #3]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d108      	bne.n	8001580 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001572:	2b02      	cmp	r3, #2
 8001574:	d144      	bne.n	8001600 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001576:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d13f      	bne.n	8001600 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001588:	b29b      	uxth	r3, r3
 800158a:	461a      	mov	r2, r3
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4413      	add	r3, r2
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	4413      	add	r3, r2
 800159a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015a4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	699a      	ldr	r2, [r3, #24]
 80015aa:	8bfb      	ldrh	r3, [r7, #30]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d906      	bls.n	80015be <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	699a      	ldr	r2, [r3, #24]
 80015b4:	8bfb      	ldrh	r3, [r7, #30]
 80015b6:	1ad2      	subs	r2, r2, r3
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	619a      	str	r2, [r3, #24]
 80015bc:	e002      	b.n	80015c4 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d106      	bne.n	80015da <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f005 fa83 	bl	8006ade <HAL_PCD_DataInStageCallback>
 80015d8:	e018      	b.n	800160c <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	695a      	ldr	r2, [r3, #20]
 80015de:	8bfb      	ldrh	r3, [r7, #30]
 80015e0:	441a      	add	r2, r3
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	69da      	ldr	r2, [r3, #28]
 80015ea:	8bfb      	ldrh	r3, [r7, #30]
 80015ec:	441a      	add	r2, r3
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015f8:	4618      	mov	r0, r3
 80015fa:	f002 f974 	bl	80038e6 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80015fe:	e005      	b.n	800160c <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001600:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001602:	461a      	mov	r2, r3
 8001604:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f917 	bl	800183a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001614:	b29b      	uxth	r3, r3
 8001616:	b21b      	sxth	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	f6ff ad25 	blt.w	8001068 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3738      	adds	r7, #56	; 0x38
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	4613      	mov	r3, r2
 8001634:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d07c      	beq.n	800173a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001648:	b29b      	uxth	r3, r3
 800164a:	461a      	mov	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	4413      	add	r3, r2
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	4413      	add	r3, r2
 800165a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001664:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	699a      	ldr	r2, [r3, #24]
 800166a:	8b7b      	ldrh	r3, [r7, #26]
 800166c:	429a      	cmp	r2, r3
 800166e:	d306      	bcc.n	800167e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	699a      	ldr	r2, [r3, #24]
 8001674:	8b7b      	ldrh	r3, [r7, #26]
 8001676:	1ad2      	subs	r2, r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	619a      	str	r2, [r3, #24]
 800167c:	e002      	b.n	8001684 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d123      	bne.n	80016d4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	b29b      	uxth	r3, r3
 800169e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016a6:	833b      	strh	r3, [r7, #24]
 80016a8:	8b3b      	ldrh	r3, [r7, #24]
 80016aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80016ae:	833b      	strh	r3, [r7, #24]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	441a      	add	r2, r3
 80016be:	8b3b      	ldrh	r3, [r7, #24]
 80016c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80016c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80016c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d01f      	beq.n	800171e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016f8:	82fb      	strh	r3, [r7, #22]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	441a      	add	r2, r3
 8001708:	8afb      	ldrh	r3, [r7, #22]
 800170a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800170e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001716:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800171a:	b29b      	uxth	r3, r3
 800171c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800171e:	8b7b      	ldrh	r3, [r7, #26]
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 8085 	beq.w	8001830 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	6959      	ldr	r1, [r3, #20]
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	891a      	ldrh	r2, [r3, #8]
 8001732:	8b7b      	ldrh	r3, [r7, #26]
 8001734:	f003 fb8d 	bl	8004e52 <USB_ReadPMA>
 8001738:	e07a      	b.n	8001830 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001742:	b29b      	uxth	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	4413      	add	r3, r2
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	4413      	add	r3, r2
 8001754:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800175e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	699a      	ldr	r2, [r3, #24]
 8001764:	8b7b      	ldrh	r3, [r7, #26]
 8001766:	429a      	cmp	r2, r3
 8001768:	d306      	bcc.n	8001778 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	699a      	ldr	r2, [r3, #24]
 800176e:	8b7b      	ldrh	r3, [r7, #26]
 8001770:	1ad2      	subs	r2, r2, r3
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	619a      	str	r2, [r3, #24]
 8001776:	e002      	b.n	800177e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d123      	bne.n	80017ce <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800179c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017a0:	83fb      	strh	r3, [r7, #30]
 80017a2:	8bfb      	ldrh	r3, [r7, #30]
 80017a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80017a8:	83fb      	strh	r3, [r7, #30]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	441a      	add	r2, r3
 80017b8:	8bfb      	ldrh	r3, [r7, #30]
 80017ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d11f      	bne.n	8001818 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017f2:	83bb      	strh	r3, [r7, #28]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	441a      	add	r2, r3
 8001802:	8bbb      	ldrh	r3, [r7, #28]
 8001804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800180c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001810:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001814:	b29b      	uxth	r3, r3
 8001816:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001818:	8b7b      	ldrh	r3, [r7, #26]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d008      	beq.n	8001830 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	6959      	ldr	r1, [r3, #20]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	895a      	ldrh	r2, [r3, #10]
 800182a:	8b7b      	ldrh	r3, [r7, #26]
 800182c:	f003 fb11 	bl	8004e52 <USB_ReadPMA>
    }
  }

  return count;
 8001830:	8b7b      	ldrh	r3, [r7, #26]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3720      	adds	r7, #32
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b092      	sub	sp, #72	; 0x48
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	4613      	mov	r3, r2
 8001846:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 8130 	beq.w	8001ab4 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800185c:	b29b      	uxth	r3, r3
 800185e:	461a      	mov	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4413      	add	r3, r2
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	4413      	add	r3, r2
 800186e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001878:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	699a      	ldr	r2, [r3, #24]
 800187e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001880:	429a      	cmp	r2, r3
 8001882:	d906      	bls.n	8001892 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	699a      	ldr	r2, [r3, #24]
 8001888:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800188a:	1ad2      	subs	r2, r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	619a      	str	r2, [r3, #24]
 8001890:	e002      	b.n	8001898 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d12c      	bne.n	80018fa <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f005 f919 	bl	8006ade <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 822d 	beq.w	8001d12 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018d2:	827b      	strh	r3, [r7, #18]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	441a      	add	r2, r3
 80018e2:	8a7b      	ldrh	r3, [r7, #18]
 80018e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	8013      	strh	r3, [r2, #0]
 80018f8:	e20b      	b.n	8001d12 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d01f      	beq.n	8001944 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	b29b      	uxth	r3, r3
 8001916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800191a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800191e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	441a      	add	r2, r3
 800192e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001938:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800193c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001940:	b29b      	uxth	r3, r3
 8001942:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800194a:	2b01      	cmp	r3, #1
 800194c:	f040 81e1 	bne.w	8001d12 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	695a      	ldr	r2, [r3, #20]
 8001954:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001956:	441a      	add	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	69da      	ldr	r2, [r3, #28]
 8001960:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001962:	441a      	add	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	6a1a      	ldr	r2, [r3, #32]
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	429a      	cmp	r2, r3
 8001972:	d309      	bcc.n	8001988 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	6a1a      	ldr	r2, [r3, #32]
 800197e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001980:	1ad2      	subs	r2, r2, r3
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	621a      	str	r2, [r3, #32]
 8001986:	e014      	b.n	80019b2 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d106      	bne.n	800199e <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8001990:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001992:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800199c:	e009      	b.n	80019b2 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2200      	movs	r2, #0
 80019b0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	785b      	ldrb	r3, [r3, #1]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d155      	bne.n	8001a66 <HAL_PCD_EP_DB_Transmit+0x22c>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	61bb      	str	r3, [r7, #24]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	4413      	add	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	00da      	lsls	r2, r3, #3
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	4413      	add	r3, r2
 80019dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d112      	bne.n	8001a0e <HAL_PCD_EP_DB_Transmit+0x1d4>
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	801a      	strh	r2, [r3, #0]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	801a      	strh	r2, [r3, #0]
 8001a0c:	e047      	b.n	8001a9e <HAL_PCD_EP_DB_Transmit+0x264>
 8001a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a10:	2b3e      	cmp	r3, #62	; 0x3e
 8001a12:	d811      	bhi.n	8001a38 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8001a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a16:	085b      	lsrs	r3, r3, #1
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <HAL_PCD_EP_DB_Transmit+0x1f0>
 8001a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a26:	3301      	adds	r3, #1
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	029b      	lsls	r3, r3, #10
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	801a      	strh	r2, [r3, #0]
 8001a36:	e032      	b.n	8001a9e <HAL_PCD_EP_DB_Transmit+0x264>
 8001a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a40:	f003 031f 	and.w	r3, r3, #31
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d102      	bne.n	8001a4e <HAL_PCD_EP_DB_Transmit+0x214>
 8001a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	029b      	lsls	r3, r3, #10
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	801a      	strh	r2, [r3, #0]
 8001a64:	e01b      	b.n	8001a9e <HAL_PCD_EP_DB_Transmit+0x264>
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	785b      	ldrb	r3, [r3, #1]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d117      	bne.n	8001a9e <HAL_PCD_EP_DB_Transmit+0x264>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	623b      	str	r3, [r7, #32]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	6a3b      	ldr	r3, [r7, #32]
 8001a82:	4413      	add	r3, r2
 8001a84:	623b      	str	r3, [r7, #32]
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	00da      	lsls	r2, r3, #3
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	4413      	add	r3, r2
 8001a90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	6959      	ldr	r1, [r3, #20]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	891a      	ldrh	r2, [r3, #8]
 8001aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	f003 f98f 	bl	8004dd0 <USB_WritePMA>
 8001ab2:	e12e      	b.n	8001d12 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ad8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	699a      	ldr	r2, [r3, #24]
 8001ade:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d306      	bcc.n	8001af2 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	699a      	ldr	r2, [r3, #24]
 8001ae8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001aea:	1ad2      	subs	r2, r2, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	619a      	str	r2, [r3, #24]
 8001af0:	e002      	b.n	8001af8 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d12c      	bne.n	8001b5a <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f004 ffe9 	bl	8006ade <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 80fd 	bne.w	8001d12 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b32:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	441a      	add	r2, r3
 8001b42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	8013      	strh	r3, [r2, #0]
 8001b58:	e0db      	b.n	8001d12 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d11f      	bne.n	8001ba4 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	441a      	add	r2, r3
 8001b8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	f040 80b1 	bne.w	8001d12 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	695a      	ldr	r2, [r3, #20]
 8001bb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bb6:	441a      	add	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	69da      	ldr	r2, [r3, #28]
 8001bc0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bc2:	441a      	add	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	6a1a      	ldr	r2, [r3, #32]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d309      	bcc.n	8001be8 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	6a1a      	ldr	r2, [r3, #32]
 8001bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001be0:	1ad2      	subs	r2, r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	621a      	str	r2, [r3, #32]
 8001be6:	e014      	b.n	8001c12 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d106      	bne.n	8001bfe <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8001bf0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bf2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001bfc:	e009      	b.n	8001c12 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2200      	movs	r2, #0
 8001c08:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	637b      	str	r3, [r7, #52]	; 0x34
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	785b      	ldrb	r3, [r3, #1]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d155      	bne.n	8001ccc <HAL_PCD_EP_DB_Transmit+0x492>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	647b      	str	r3, [r7, #68]	; 0x44
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	461a      	mov	r2, r3
 8001c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c34:	4413      	add	r3, r2
 8001c36:	647b      	str	r3, [r7, #68]	; 0x44
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	00da      	lsls	r2, r3, #3
 8001c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c40:	4413      	add	r3, r2
 8001c42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c46:	643b      	str	r3, [r7, #64]	; 0x40
 8001c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d112      	bne.n	8001c74 <HAL_PCD_EP_DB_Transmit+0x43a>
 8001c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c5c:	801a      	strh	r2, [r3, #0]
 8001c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c70:	801a      	strh	r2, [r3, #0]
 8001c72:	e044      	b.n	8001cfe <HAL_PCD_EP_DB_Transmit+0x4c4>
 8001c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c76:	2b3e      	cmp	r3, #62	; 0x3e
 8001c78:	d811      	bhi.n	8001c9e <HAL_PCD_EP_DB_Transmit+0x464>
 8001c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c7c:	085b      	lsrs	r3, r3, #1
 8001c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <HAL_PCD_EP_DB_Transmit+0x456>
 8001c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	029b      	lsls	r3, r3, #10
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c9a:	801a      	strh	r2, [r3, #0]
 8001c9c:	e02f      	b.n	8001cfe <HAL_PCD_EP_DB_Transmit+0x4c4>
 8001c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca0:	095b      	lsrs	r3, r3, #5
 8001ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d102      	bne.n	8001cb4 <HAL_PCD_EP_DB_Transmit+0x47a>
 8001cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	029b      	lsls	r3, r3, #10
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cc8:	801a      	strh	r2, [r3, #0]
 8001cca:	e018      	b.n	8001cfe <HAL_PCD_EP_DB_Transmit+0x4c4>
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	785b      	ldrb	r3, [r3, #1]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d114      	bne.n	8001cfe <HAL_PCD_EP_DB_Transmit+0x4c4>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce2:	4413      	add	r3, r2
 8001ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	00da      	lsls	r2, r3, #3
 8001cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cee:	4413      	add	r3, r2
 8001cf0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001cf4:	633b      	str	r3, [r7, #48]	; 0x30
 8001cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	6959      	ldr	r1, [r3, #20]
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	895a      	ldrh	r2, [r3, #10]
 8001d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	f003 f85f 	bl	8004dd0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d2c:	823b      	strh	r3, [r7, #16]
 8001d2e:	8a3b      	ldrh	r3, [r7, #16]
 8001d30:	f083 0310 	eor.w	r3, r3, #16
 8001d34:	823b      	strh	r3, [r7, #16]
 8001d36:	8a3b      	ldrh	r3, [r7, #16]
 8001d38:	f083 0320 	eor.w	r3, r3, #32
 8001d3c:	823b      	strh	r3, [r7, #16]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	441a      	add	r2, r3
 8001d4c:	8a3b      	ldrh	r3, [r7, #16]
 8001d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3748      	adds	r7, #72	; 0x48
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	460b      	mov	r3, r1
 8001d78:	817b      	strh	r3, [r7, #10]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001d7e:	897b      	ldrh	r3, [r7, #10]
 8001d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d8a:	897b      	ldrh	r3, [r7, #10]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	e009      	b.n	8001db6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001da2:	897a      	ldrh	r2, [r7, #10]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	4413      	add	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001db6:	893b      	ldrh	r3, [r7, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	80da      	strh	r2, [r3, #6]
 8001dca:	e00b      	b.n	8001de4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	0c1b      	lsrs	r3, r3, #16
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	371c      	adds	r7, #28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b085      	sub	sp, #20
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d141      	bne.n	8001eda <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e56:	4b4b      	ldr	r3, [pc, #300]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e62:	d131      	bne.n	8001ec8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e64:	4b47      	ldr	r3, [pc, #284]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e6a:	4a46      	ldr	r2, [pc, #280]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e74:	4b43      	ldr	r3, [pc, #268]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e7c:	4a41      	ldr	r2, [pc, #260]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e84:	4b40      	ldr	r3, [pc, #256]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2232      	movs	r2, #50	; 0x32
 8001e8a:	fb02 f303 	mul.w	r3, r2, r3
 8001e8e:	4a3f      	ldr	r2, [pc, #252]	; (8001f8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e90:	fba2 2303 	umull	r2, r3, r2, r3
 8001e94:	0c9b      	lsrs	r3, r3, #18
 8001e96:	3301      	adds	r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e9a:	e002      	b.n	8001ea2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ea2:	4b38      	ldr	r3, [pc, #224]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eae:	d102      	bne.n	8001eb6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f2      	bne.n	8001e9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eb6:	4b33      	ldr	r3, [pc, #204]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec2:	d158      	bne.n	8001f76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e057      	b.n	8001f78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ec8:	4b2e      	ldr	r3, [pc, #184]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ece:	4a2d      	ldr	r2, [pc, #180]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ed4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ed8:	e04d      	b.n	8001f76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ee0:	d141      	bne.n	8001f66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ee2:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eee:	d131      	bne.n	8001f54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ef6:	4a23      	ldr	r2, [pc, #140]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f00:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f08:	4a1e      	ldr	r2, [pc, #120]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f10:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2232      	movs	r2, #50	; 0x32
 8001f16:	fb02 f303 	mul.w	r3, r2, r3
 8001f1a:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f20:	0c9b      	lsrs	r3, r3, #18
 8001f22:	3301      	adds	r3, #1
 8001f24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f26:	e002      	b.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f3a:	d102      	bne.n	8001f42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f2      	bne.n	8001f28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f4e:	d112      	bne.n	8001f76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e011      	b.n	8001f78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f64:	e007      	b.n	8001f76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f6e:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f74:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	40007000 	.word	0x40007000
 8001f88:	20000000 	.word	0x20000000
 8001f8c:	431bde83 	.word	0x431bde83

08001f90 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4a04      	ldr	r2, [pc, #16]	; (8001fac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f9e:	6093      	str	r3, [r2, #8]
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40007000 	.word	0x40007000

08001fb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e308      	b.n	80025d4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d075      	beq.n	80020ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fce:	4ba3      	ldr	r3, [pc, #652]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fd8:	4ba0      	ldr	r3, [pc, #640]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	2b0c      	cmp	r3, #12
 8001fe6:	d102      	bne.n	8001fee <HAL_RCC_OscConfig+0x3e>
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	d002      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x44>
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d10b      	bne.n	800200c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff4:	4b99      	ldr	r3, [pc, #612]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d05b      	beq.n	80020b8 <HAL_RCC_OscConfig+0x108>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d157      	bne.n	80020b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e2e3      	b.n	80025d4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002014:	d106      	bne.n	8002024 <HAL_RCC_OscConfig+0x74>
 8002016:	4b91      	ldr	r3, [pc, #580]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a90      	ldr	r2, [pc, #576]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e01d      	b.n	8002060 <HAL_RCC_OscConfig+0xb0>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800202c:	d10c      	bne.n	8002048 <HAL_RCC_OscConfig+0x98>
 800202e:	4b8b      	ldr	r3, [pc, #556]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a8a      	ldr	r2, [pc, #552]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 8002034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	4b88      	ldr	r3, [pc, #544]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a87      	ldr	r2, [pc, #540]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 8002040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	e00b      	b.n	8002060 <HAL_RCC_OscConfig+0xb0>
 8002048:	4b84      	ldr	r3, [pc, #528]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a83      	ldr	r2, [pc, #524]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 800204e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	4b81      	ldr	r3, [pc, #516]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a80      	ldr	r2, [pc, #512]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 800205a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800205e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d013      	beq.n	8002090 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7fe fa6a 	bl	8000540 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002070:	f7fe fa66 	bl	8000540 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b64      	cmp	r3, #100	; 0x64
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e2a8      	b.n	80025d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002082:	4b76      	ldr	r3, [pc, #472]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0xc0>
 800208e:	e014      	b.n	80020ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7fe fa56 	bl	8000540 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002098:	f7fe fa52 	bl	8000540 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	; 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e294      	b.n	80025d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020aa:	4b6c      	ldr	r3, [pc, #432]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0xe8>
 80020b6:	e000      	b.n	80020ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d075      	beq.n	80021b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c6:	4b65      	ldr	r3, [pc, #404]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d0:	4b62      	ldr	r3, [pc, #392]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	2b0c      	cmp	r3, #12
 80020de:	d102      	bne.n	80020e6 <HAL_RCC_OscConfig+0x136>
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d002      	beq.n	80020ec <HAL_RCC_OscConfig+0x13c>
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d11f      	bne.n	800212c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ec:	4b5b      	ldr	r3, [pc, #364]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_OscConfig+0x154>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e267      	b.n	80025d4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002104:	4b55      	ldr	r3, [pc, #340]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	061b      	lsls	r3, r3, #24
 8002112:	4952      	ldr	r1, [pc, #328]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002118:	4b51      	ldr	r3, [pc, #324]	; (8002260 <HAL_RCC_OscConfig+0x2b0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe f9c3 	bl	80004a8 <HAL_InitTick>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d043      	beq.n	80021b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e253      	b.n	80025d4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d023      	beq.n	800217c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002134:	4b49      	ldr	r3, [pc, #292]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a48      	ldr	r2, [pc, #288]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 800213a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7fe f9fe 	bl	8000540 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002148:	f7fe f9fa 	bl	8000540 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e23c      	b.n	80025d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800215a:	4b40      	ldr	r3, [pc, #256]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002166:	4b3d      	ldr	r3, [pc, #244]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	061b      	lsls	r3, r3, #24
 8002174:	4939      	ldr	r1, [pc, #228]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
 800217a:	e01a      	b.n	80021b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217c:	4b37      	ldr	r3, [pc, #220]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a36      	ldr	r2, [pc, #216]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 8002182:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7fe f9da 	bl	8000540 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002190:	f7fe f9d6 	bl	8000540 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e218      	b.n	80025d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021a2:	4b2e      	ldr	r3, [pc, #184]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x1e0>
 80021ae:	e000      	b.n	80021b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d03c      	beq.n	8002238 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d01c      	beq.n	8002200 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c6:	4b25      	ldr	r3, [pc, #148]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 80021c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021cc:	4a23      	ldr	r2, [pc, #140]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d6:	f7fe f9b3 	bl	8000540 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021de:	f7fe f9af 	bl	8000540 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e1f1      	b.n	80025d4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021f0:	4b1a      	ldr	r3, [pc, #104]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 80021f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0ef      	beq.n	80021de <HAL_RCC_OscConfig+0x22e>
 80021fe:	e01b      	b.n	8002238 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002200:	4b16      	ldr	r3, [pc, #88]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 8002202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002206:	4a15      	ldr	r2, [pc, #84]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 8002208:	f023 0301 	bic.w	r3, r3, #1
 800220c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002210:	f7fe f996 	bl	8000540 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002218:	f7fe f992 	bl	8000540 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e1d4      	b.n	80025d4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 800222c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1ef      	bne.n	8002218 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80ab 	beq.w	800239c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002246:	2300      	movs	r3, #0
 8002248:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 800224c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_RCC_OscConfig+0x2b4>
 8002256:	2301      	movs	r3, #1
 8002258:	e005      	b.n	8002266 <HAL_RCC_OscConfig+0x2b6>
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	20000004 	.word	0x20000004
 8002264:	2300      	movs	r3, #0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00d      	beq.n	8002286 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800226a:	4baf      	ldr	r3, [pc, #700]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 800226c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226e:	4aae      	ldr	r2, [pc, #696]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002274:	6593      	str	r3, [r2, #88]	; 0x58
 8002276:	4bac      	ldr	r3, [pc, #688]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002282:	2301      	movs	r3, #1
 8002284:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002286:	4ba9      	ldr	r3, [pc, #676]	; (800252c <HAL_RCC_OscConfig+0x57c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d118      	bne.n	80022c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002292:	4ba6      	ldr	r3, [pc, #664]	; (800252c <HAL_RCC_OscConfig+0x57c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4aa5      	ldr	r2, [pc, #660]	; (800252c <HAL_RCC_OscConfig+0x57c>)
 8002298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229e:	f7fe f94f 	bl	8000540 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a6:	f7fe f94b 	bl	8000540 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e18d      	b.n	80025d4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b8:	4b9c      	ldr	r3, [pc, #624]	; (800252c <HAL_RCC_OscConfig+0x57c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d108      	bne.n	80022de <HAL_RCC_OscConfig+0x32e>
 80022cc:	4b96      	ldr	r3, [pc, #600]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 80022ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d2:	4a95      	ldr	r2, [pc, #596]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022dc:	e024      	b.n	8002328 <HAL_RCC_OscConfig+0x378>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b05      	cmp	r3, #5
 80022e4:	d110      	bne.n	8002308 <HAL_RCC_OscConfig+0x358>
 80022e6:	4b90      	ldr	r3, [pc, #576]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 80022e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ec:	4a8e      	ldr	r2, [pc, #568]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 80022ee:	f043 0304 	orr.w	r3, r3, #4
 80022f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022f6:	4b8c      	ldr	r3, [pc, #560]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fc:	4a8a      	ldr	r2, [pc, #552]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002306:	e00f      	b.n	8002328 <HAL_RCC_OscConfig+0x378>
 8002308:	4b87      	ldr	r3, [pc, #540]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230e:	4a86      	ldr	r2, [pc, #536]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002318:	4b83      	ldr	r3, [pc, #524]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 800231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231e:	4a82      	ldr	r2, [pc, #520]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 8002320:	f023 0304 	bic.w	r3, r3, #4
 8002324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d016      	beq.n	800235e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002330:	f7fe f906 	bl	8000540 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002336:	e00a      	b.n	800234e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002338:	f7fe f902 	bl	8000540 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	f241 3288 	movw	r2, #5000	; 0x1388
 8002346:	4293      	cmp	r3, r2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e142      	b.n	80025d4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800234e:	4b76      	ldr	r3, [pc, #472]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 8002350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0ed      	beq.n	8002338 <HAL_RCC_OscConfig+0x388>
 800235c:	e015      	b.n	800238a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235e:	f7fe f8ef 	bl	8000540 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002364:	e00a      	b.n	800237c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002366:	f7fe f8eb 	bl	8000540 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	f241 3288 	movw	r2, #5000	; 0x1388
 8002374:	4293      	cmp	r3, r2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e12b      	b.n	80025d4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800237c:	4b6a      	ldr	r3, [pc, #424]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1ed      	bne.n	8002366 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800238a:	7ffb      	ldrb	r3, [r7, #31]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d105      	bne.n	800239c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002390:	4b65      	ldr	r3, [pc, #404]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	4a64      	ldr	r2, [pc, #400]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 8002396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d03c      	beq.n	8002422 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d01c      	beq.n	80023ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023b0:	4b5d      	ldr	r3, [pc, #372]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 80023b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023b6:	4a5c      	ldr	r2, [pc, #368]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c0:	f7fe f8be 	bl	8000540 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023c8:	f7fe f8ba 	bl	8000540 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e0fc      	b.n	80025d4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023da:	4b53      	ldr	r3, [pc, #332]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 80023dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0ef      	beq.n	80023c8 <HAL_RCC_OscConfig+0x418>
 80023e8:	e01b      	b.n	8002422 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023ea:	4b4f      	ldr	r3, [pc, #316]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 80023ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023f0:	4a4d      	ldr	r2, [pc, #308]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 80023f2:	f023 0301 	bic.w	r3, r3, #1
 80023f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fa:	f7fe f8a1 	bl	8000540 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002402:	f7fe f89d 	bl	8000540 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e0df      	b.n	80025d4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002414:	4b44      	ldr	r3, [pc, #272]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 8002416:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1ef      	bne.n	8002402 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 80d3 	beq.w	80025d2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800242c:	4b3e      	ldr	r3, [pc, #248]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b0c      	cmp	r3, #12
 8002436:	f000 808d 	beq.w	8002554 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d15a      	bne.n	80024f8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002442:	4b39      	ldr	r3, [pc, #228]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a38      	ldr	r2, [pc, #224]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 8002448:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800244c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244e:	f7fe f877 	bl	8000540 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002456:	f7fe f873 	bl	8000540 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e0b5      	b.n	80025d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002468:	4b2f      	ldr	r3, [pc, #188]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f0      	bne.n	8002456 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002474:	4b2c      	ldr	r3, [pc, #176]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <HAL_RCC_OscConfig+0x580>)
 800247a:	4013      	ands	r3, r2
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6a11      	ldr	r1, [r2, #32]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002484:	3a01      	subs	r2, #1
 8002486:	0112      	lsls	r2, r2, #4
 8002488:	4311      	orrs	r1, r2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800248e:	0212      	lsls	r2, r2, #8
 8002490:	4311      	orrs	r1, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002496:	0852      	lsrs	r2, r2, #1
 8002498:	3a01      	subs	r2, #1
 800249a:	0552      	lsls	r2, r2, #21
 800249c:	4311      	orrs	r1, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024a2:	0852      	lsrs	r2, r2, #1
 80024a4:	3a01      	subs	r2, #1
 80024a6:	0652      	lsls	r2, r2, #25
 80024a8:	4311      	orrs	r1, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024ae:	06d2      	lsls	r2, r2, #27
 80024b0:	430a      	orrs	r2, r1
 80024b2:	491d      	ldr	r1, [pc, #116]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b8:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1a      	ldr	r2, [pc, #104]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 80024be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024c4:	4b18      	ldr	r3, [pc, #96]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4a17      	ldr	r2, [pc, #92]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 80024ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7fe f836 	bl	8000540 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d8:	f7fe f832 	bl	8000540 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e074      	b.n	80025d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ea:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x528>
 80024f6:	e06c      	b.n	80025d2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 80024fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002502:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4a07      	ldr	r2, [pc, #28]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 800250a:	f023 0303 	bic.w	r3, r3, #3
 800250e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a04      	ldr	r2, [pc, #16]	; (8002528 <HAL_RCC_OscConfig+0x578>)
 8002516:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800251a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7fe f80e 	bl	8000540 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002526:	e00e      	b.n	8002546 <HAL_RCC_OscConfig+0x596>
 8002528:	40021000 	.word	0x40021000
 800252c:	40007000 	.word	0x40007000
 8002530:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002534:	f7fe f804 	bl	8000540 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e046      	b.n	80025d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002546:	4b25      	ldr	r3, [pc, #148]	; (80025dc <HAL_RCC_OscConfig+0x62c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x584>
 8002552:	e03e      	b.n	80025d2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e039      	b.n	80025d4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002560:	4b1e      	ldr	r3, [pc, #120]	; (80025dc <HAL_RCC_OscConfig+0x62c>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f003 0203 	and.w	r2, r3, #3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	429a      	cmp	r2, r3
 8002572:	d12c      	bne.n	80025ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	3b01      	subs	r3, #1
 8002580:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d123      	bne.n	80025ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002592:	429a      	cmp	r2, r3
 8002594:	d11b      	bne.n	80025ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d113      	bne.n	80025ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	085b      	lsrs	r3, r3, #1
 80025b2:	3b01      	subs	r3, #1
 80025b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d109      	bne.n	80025ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c4:	085b      	lsrs	r3, r3, #1
 80025c6:	3b01      	subs	r3, #1
 80025c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3720      	adds	r7, #32
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021000 	.word	0x40021000

080025e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e11e      	b.n	8002836 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025f8:	4b91      	ldr	r3, [pc, #580]	; (8002840 <HAL_RCC_ClockConfig+0x260>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d910      	bls.n	8002628 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b8e      	ldr	r3, [pc, #568]	; (8002840 <HAL_RCC_ClockConfig+0x260>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 020f 	bic.w	r2, r3, #15
 800260e:	498c      	ldr	r1, [pc, #560]	; (8002840 <HAL_RCC_ClockConfig+0x260>)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b8a      	ldr	r3, [pc, #552]	; (8002840 <HAL_RCC_ClockConfig+0x260>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e106      	b.n	8002836 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d073      	beq.n	800271c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b03      	cmp	r3, #3
 800263a:	d129      	bne.n	8002690 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263c:	4b81      	ldr	r3, [pc, #516]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0f4      	b.n	8002836 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800264c:	f000 f966 	bl	800291c <RCC_GetSysClockFreqFromPLLSource>
 8002650:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4a7c      	ldr	r2, [pc, #496]	; (8002848 <HAL_RCC_ClockConfig+0x268>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d93f      	bls.n	80026da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800265a:	4b7a      	ldr	r3, [pc, #488]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d009      	beq.n	800267a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800266e:	2b00      	cmp	r3, #0
 8002670:	d033      	beq.n	80026da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002676:	2b00      	cmp	r3, #0
 8002678:	d12f      	bne.n	80026da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800267a:	4b72      	ldr	r3, [pc, #456]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002682:	4a70      	ldr	r2, [pc, #448]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 8002684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002688:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	e024      	b.n	80026da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d107      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002698:	4b6a      	ldr	r3, [pc, #424]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d109      	bne.n	80026b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0c6      	b.n	8002836 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026a8:	4b66      	ldr	r3, [pc, #408]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0be      	b.n	8002836 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80026b8:	f000 f8ce 	bl	8002858 <HAL_RCC_GetSysClockFreq>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4a61      	ldr	r2, [pc, #388]	; (8002848 <HAL_RCC_ClockConfig+0x268>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d909      	bls.n	80026da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026c6:	4b5f      	ldr	r3, [pc, #380]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ce:	4a5d      	ldr	r2, [pc, #372]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 80026d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026da:	4b5a      	ldr	r3, [pc, #360]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f023 0203 	bic.w	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	4957      	ldr	r1, [pc, #348]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ec:	f7fd ff28 	bl	8000540 <HAL_GetTick>
 80026f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f2:	e00a      	b.n	800270a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f4:	f7fd ff24 	bl	8000540 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e095      	b.n	8002836 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270a:	4b4e      	ldr	r3, [pc, #312]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 020c 	and.w	r2, r3, #12
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	429a      	cmp	r2, r3
 800271a:	d1eb      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d023      	beq.n	8002770 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002734:	4b43      	ldr	r3, [pc, #268]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	4a42      	ldr	r2, [pc, #264]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 800273a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800273e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d007      	beq.n	800275c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800274c:	4b3d      	ldr	r3, [pc, #244]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002754:	4a3b      	ldr	r2, [pc, #236]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 8002756:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800275a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800275c:	4b39      	ldr	r3, [pc, #228]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4936      	ldr	r1, [pc, #216]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
 800276e:	e008      	b.n	8002782 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	2b80      	cmp	r3, #128	; 0x80
 8002774:	d105      	bne.n	8002782 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002776:	4b33      	ldr	r3, [pc, #204]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	4a32      	ldr	r2, [pc, #200]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 800277c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002780:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002782:	4b2f      	ldr	r3, [pc, #188]	; (8002840 <HAL_RCC_ClockConfig+0x260>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d21d      	bcs.n	80027cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002790:	4b2b      	ldr	r3, [pc, #172]	; (8002840 <HAL_RCC_ClockConfig+0x260>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f023 020f 	bic.w	r2, r3, #15
 8002798:	4929      	ldr	r1, [pc, #164]	; (8002840 <HAL_RCC_ClockConfig+0x260>)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	4313      	orrs	r3, r2
 800279e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027a0:	f7fd fece 	bl	8000540 <HAL_GetTick>
 80027a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	e00a      	b.n	80027be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a8:	f7fd feca 	bl	8000540 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e03b      	b.n	8002836 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b20      	ldr	r3, [pc, #128]	; (8002840 <HAL_RCC_ClockConfig+0x260>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d1ed      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d8:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4917      	ldr	r1, [pc, #92]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027f6:	4b13      	ldr	r3, [pc, #76]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	490f      	ldr	r1, [pc, #60]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 8002806:	4313      	orrs	r3, r2
 8002808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800280a:	f000 f825 	bl	8002858 <HAL_RCC_GetSysClockFreq>
 800280e:	4601      	mov	r1, r0
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <HAL_RCC_ClockConfig+0x264>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	4a0c      	ldr	r2, [pc, #48]	; (800284c <HAL_RCC_ClockConfig+0x26c>)
 800281c:	5cd3      	ldrb	r3, [r2, r3]
 800281e:	f003 031f 	and.w	r3, r3, #31
 8002822:	fa21 f303 	lsr.w	r3, r1, r3
 8002826:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <HAL_RCC_ClockConfig+0x270>)
 8002828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_RCC_ClockConfig+0x274>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7fd fe3a 	bl	80004a8 <HAL_InitTick>
 8002834:	4603      	mov	r3, r0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40022000 	.word	0x40022000
 8002844:	40021000 	.word	0x40021000
 8002848:	04c4b400 	.word	0x04c4b400
 800284c:	080070d0 	.word	0x080070d0
 8002850:	20000000 	.word	0x20000000
 8002854:	20000004 	.word	0x20000004

08002858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800285e:	4b2c      	ldr	r3, [pc, #176]	; (8002910 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b04      	cmp	r3, #4
 8002868:	d102      	bne.n	8002870 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800286a:	4b2a      	ldr	r3, [pc, #168]	; (8002914 <HAL_RCC_GetSysClockFreq+0xbc>)
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	e047      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002870:	4b27      	ldr	r3, [pc, #156]	; (8002910 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 030c 	and.w	r3, r3, #12
 8002878:	2b08      	cmp	r3, #8
 800287a:	d102      	bne.n	8002882 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800287c:	4b26      	ldr	r3, [pc, #152]	; (8002918 <HAL_RCC_GetSysClockFreq+0xc0>)
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	e03e      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002882:	4b23      	ldr	r3, [pc, #140]	; (8002910 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d136      	bne.n	80028fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800288e:	4b20      	ldr	r3, [pc, #128]	; (8002910 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <HAL_RCC_GetSysClockFreq+0xb8>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	3301      	adds	r3, #1
 80028a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d10c      	bne.n	80028c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028ac:	4a1a      	ldr	r2, [pc, #104]	; (8002918 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b4:	4a16      	ldr	r2, [pc, #88]	; (8002910 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028b6:	68d2      	ldr	r2, [r2, #12]
 80028b8:	0a12      	lsrs	r2, r2, #8
 80028ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028be:	fb02 f303 	mul.w	r3, r2, r3
 80028c2:	617b      	str	r3, [r7, #20]
      break;
 80028c4:	e00c      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028c6:	4a13      	ldr	r2, [pc, #76]	; (8002914 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ce:	4a10      	ldr	r2, [pc, #64]	; (8002910 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d0:	68d2      	ldr	r2, [r2, #12]
 80028d2:	0a12      	lsrs	r2, r2, #8
 80028d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028d8:	fb02 f303 	mul.w	r3, r2, r3
 80028dc:	617b      	str	r3, [r7, #20]
      break;
 80028de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	0e5b      	lsrs	r3, r3, #25
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	3301      	adds	r3, #1
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	e001      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002900:	693b      	ldr	r3, [r7, #16]
}
 8002902:	4618      	mov	r0, r3
 8002904:	371c      	adds	r7, #28
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000
 8002914:	00f42400 	.word	0x00f42400
 8002918:	007a1200 	.word	0x007a1200

0800291c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002922:	4b1e      	ldr	r3, [pc, #120]	; (800299c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	3301      	adds	r3, #1
 8002938:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d10c      	bne.n	800295a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002940:	4a17      	ldr	r2, [pc, #92]	; (80029a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	4a14      	ldr	r2, [pc, #80]	; (800299c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800294a:	68d2      	ldr	r2, [r2, #12]
 800294c:	0a12      	lsrs	r2, r2, #8
 800294e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002952:	fb02 f303 	mul.w	r3, r2, r3
 8002956:	617b      	str	r3, [r7, #20]
    break;
 8002958:	e00c      	b.n	8002974 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800295a:	4a12      	ldr	r2, [pc, #72]	; (80029a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002962:	4a0e      	ldr	r2, [pc, #56]	; (800299c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002964:	68d2      	ldr	r2, [r2, #12]
 8002966:	0a12      	lsrs	r2, r2, #8
 8002968:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800296c:	fb02 f303 	mul.w	r3, r2, r3
 8002970:	617b      	str	r3, [r7, #20]
    break;
 8002972:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002974:	4b09      	ldr	r3, [pc, #36]	; (800299c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	0e5b      	lsrs	r3, r3, #25
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	3301      	adds	r3, #1
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	fbb2 f3f3 	udiv	r3, r2, r3
 800298c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800298e:	687b      	ldr	r3, [r7, #4]
}
 8002990:	4618      	mov	r0, r3
 8002992:	371c      	adds	r7, #28
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	40021000 	.word	0x40021000
 80029a0:	007a1200 	.word	0x007a1200
 80029a4:	00f42400 	.word	0x00f42400

080029a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029b0:	2300      	movs	r3, #0
 80029b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029b4:	2300      	movs	r3, #0
 80029b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 8098 	beq.w	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c6:	2300      	movs	r3, #0
 80029c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ca:	4b43      	ldr	r3, [pc, #268]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10d      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d6:	4b40      	ldr	r3, [pc, #256]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029da:	4a3f      	ldr	r2, [pc, #252]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e0:	6593      	str	r3, [r2, #88]	; 0x58
 80029e2:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ee:	2301      	movs	r3, #1
 80029f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029f2:	4b3a      	ldr	r3, [pc, #232]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a39      	ldr	r2, [pc, #228]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029fe:	f7fd fd9f 	bl	8000540 <HAL_GetTick>
 8002a02:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a04:	e009      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a06:	f7fd fd9b 	bl	8000540 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d902      	bls.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	74fb      	strb	r3, [r7, #19]
        break;
 8002a18:	e005      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a1a:	4b30      	ldr	r3, [pc, #192]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0ef      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002a26:	7cfb      	ldrb	r3, [r7, #19]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d159      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a36:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d01e      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d019      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a48:	4b23      	ldr	r3, [pc, #140]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a54:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5a:	4a1f      	ldr	r2, [pc, #124]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a64:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	4a1b      	ldr	r2, [pc, #108]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a74:	4a18      	ldr	r2, [pc, #96]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d016      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a86:	f7fd fd5b 	bl	8000540 <HAL_GetTick>
 8002a8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a8c:	e00b      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8e:	f7fd fd57 	bl	8000540 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d902      	bls.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	74fb      	strb	r3, [r7, #19]
            break;
 8002aa4:	e006      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ec      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10b      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aba:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	4903      	ldr	r1, [pc, #12]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ad2:	7cfb      	ldrb	r3, [r7, #19]
 8002ad4:	74bb      	strb	r3, [r7, #18]
 8002ad6:	e005      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae0:	7cfb      	ldrb	r3, [r7, #19]
 8002ae2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ae4:	7c7b      	ldrb	r3, [r7, #17]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d105      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aea:	4ba6      	ldr	r3, [pc, #664]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aee:	4aa5      	ldr	r2, [pc, #660]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b02:	4ba0      	ldr	r3, [pc, #640]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b08:	f023 0203 	bic.w	r2, r3, #3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	499c      	ldr	r1, [pc, #624]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b24:	4b97      	ldr	r3, [pc, #604]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	f023 020c 	bic.w	r2, r3, #12
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	4994      	ldr	r1, [pc, #592]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b46:	4b8f      	ldr	r3, [pc, #572]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	498b      	ldr	r1, [pc, #556]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b68:	4b86      	ldr	r3, [pc, #536]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	4983      	ldr	r1, [pc, #524]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b8a:	4b7e      	ldr	r3, [pc, #504]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b90:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	497a      	ldr	r1, [pc, #488]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00a      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bac:	4b75      	ldr	r3, [pc, #468]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	4972      	ldr	r1, [pc, #456]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bce:	4b6d      	ldr	r3, [pc, #436]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	4969      	ldr	r1, [pc, #420]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bf0:	4b64      	ldr	r3, [pc, #400]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	4961      	ldr	r1, [pc, #388]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c12:	4b5c      	ldr	r3, [pc, #368]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	4958      	ldr	r1, [pc, #352]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d015      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c34:	4b53      	ldr	r3, [pc, #332]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	4950      	ldr	r1, [pc, #320]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c52:	d105      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c54:	4b4b      	ldr	r3, [pc, #300]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4a4a      	ldr	r2, [pc, #296]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c5e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d015      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c6c:	4b45      	ldr	r3, [pc, #276]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	4942      	ldr	r1, [pc, #264]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c8a:	d105      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c8c:	4b3d      	ldr	r3, [pc, #244]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4a3c      	ldr	r2, [pc, #240]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c96:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d015      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ca4:	4b37      	ldr	r3, [pc, #220]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002caa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	4934      	ldr	r1, [pc, #208]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cc2:	d105      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cc4:	4b2f      	ldr	r3, [pc, #188]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4a2e      	ldr	r2, [pc, #184]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d015      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cdc:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cea:	4926      	ldr	r1, [pc, #152]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cfa:	d105      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cfc:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	4a20      	ldr	r2, [pc, #128]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d06:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d015      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d14:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	4918      	ldr	r1, [pc, #96]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d32:	d105      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d34:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	4a12      	ldr	r2, [pc, #72]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d015      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d4c:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5a:	490a      	ldr	r1, [pc, #40]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d6a:	d105      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d76:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002d78:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000

08002d88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002d98:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8002d9c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b085      	sub	sp, #20
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002dbe:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8002dc2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002dec:	b084      	sub	sp, #16
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	f107 0014 	add.w	r0, r7, #20
 8002dfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	b004      	add	sp, #16
 8002e2c:	4770      	bx	lr
	...

08002e30 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b09b      	sub	sp, #108	; 0x6c
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e56:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	78db      	ldrb	r3, [r3, #3]
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d81f      	bhi.n	8002ea2 <USB_ActivateEndpoint+0x72>
 8002e62:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <USB_ActivateEndpoint+0x38>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	08002e79 	.word	0x08002e79
 8002e6c:	08002e95 	.word	0x08002e95
 8002e70:	08002eab 	.word	0x08002eab
 8002e74:	08002e87 	.word	0x08002e87
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002e78:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e80:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002e84:	e012      	b.n	8002eac <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002e86:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e8a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002e8e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002e92:	e00b      	b.n	8002eac <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002e94:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e9c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002ea0:	e004      	b.n	8002eac <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002ea8:	e000      	b.n	8002eac <USB_ActivateEndpoint+0x7c>
      break;
 8002eaa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	441a      	add	r2, r3
 8002eb6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	b21b      	sxth	r3, r3
 8002ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee6:	b21a      	sxth	r2, r3
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	b21b      	sxth	r3, r3
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	b21b      	sxth	r3, r3
 8002ef2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	441a      	add	r2, r3
 8002f00:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002f04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	7b1b      	ldrb	r3, [r3, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f040 8149 	bne.w	80031b4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	785b      	ldrb	r3, [r3, #1]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 8084 	beq.w	8003034 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	00da      	lsls	r2, r3, #3
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	88db      	ldrh	r3, [r3, #6]
 8002f54:	085b      	lsrs	r3, r3, #1
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	81fb      	strh	r3, [r7, #14]
 8002f6e:	89fb      	ldrh	r3, [r7, #14]
 8002f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01b      	beq.n	8002fb0 <USB_ActivateEndpoint+0x180>
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8e:	81bb      	strh	r3, [r7, #12]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	441a      	add	r2, r3
 8002f9a:	89bb      	ldrh	r3, [r7, #12]
 8002f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fa8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	78db      	ldrb	r3, [r3, #3]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d020      	beq.n	8002ffa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fce:	813b      	strh	r3, [r7, #8]
 8002fd0:	893b      	ldrh	r3, [r7, #8]
 8002fd2:	f083 0320 	eor.w	r3, r3, #32
 8002fd6:	813b      	strh	r3, [r7, #8]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	441a      	add	r2, r3
 8002fe2:	893b      	ldrh	r3, [r7, #8]
 8002fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	8013      	strh	r3, [r2, #0]
 8002ff8:	e27f      	b.n	80034fa <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	b29b      	uxth	r3, r3
 8003008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800300c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003010:	817b      	strh	r3, [r7, #10]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	441a      	add	r2, r3
 800301c:	897b      	ldrh	r3, [r7, #10]
 800301e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800302a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800302e:	b29b      	uxth	r3, r3
 8003030:	8013      	strh	r3, [r2, #0]
 8003032:	e262      	b.n	80034fa <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800303e:	b29b      	uxth	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003044:	4413      	add	r3, r2
 8003046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	00da      	lsls	r2, r3, #3
 800304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003050:	4413      	add	r3, r2
 8003052:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003056:	62bb      	str	r3, [r7, #40]	; 0x28
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	88db      	ldrh	r3, [r3, #6]
 800305c:	085b      	lsrs	r3, r3, #1
 800305e:	b29b      	uxth	r3, r3
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003066:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003072:	b29b      	uxth	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	4413      	add	r3, r2
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	00da      	lsls	r2, r3, #3
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	4413      	add	r3, r2
 8003086:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800308a:	623b      	str	r3, [r7, #32]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d112      	bne.n	80030ba <USB_ActivateEndpoint+0x28a>
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	b29b      	uxth	r3, r3
 800309a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800309e:	b29a      	uxth	r2, r3
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	801a      	strh	r2, [r3, #0]
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	801a      	strh	r2, [r3, #0]
 80030b8:	e02f      	b.n	800311a <USB_ActivateEndpoint+0x2ea>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b3e      	cmp	r3, #62	; 0x3e
 80030c0:	d813      	bhi.n	80030ea <USB_ActivateEndpoint+0x2ba>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	085b      	lsrs	r3, r3, #1
 80030c8:	663b      	str	r3, [r7, #96]	; 0x60
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <USB_ActivateEndpoint+0x2ac>
 80030d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030d8:	3301      	adds	r3, #1
 80030da:	663b      	str	r3, [r7, #96]	; 0x60
 80030dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030de:	b29b      	uxth	r3, r3
 80030e0:	029b      	lsls	r3, r3, #10
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	801a      	strh	r2, [r3, #0]
 80030e8:	e017      	b.n	800311a <USB_ActivateEndpoint+0x2ea>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	663b      	str	r3, [r7, #96]	; 0x60
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d102      	bne.n	8003104 <USB_ActivateEndpoint+0x2d4>
 80030fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003100:	3b01      	subs	r3, #1
 8003102:	663b      	str	r3, [r7, #96]	; 0x60
 8003104:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003106:	b29b      	uxth	r3, r3
 8003108:	029b      	lsls	r3, r3, #10
 800310a:	b29b      	uxth	r3, r3
 800310c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003114:	b29a      	uxth	r2, r3
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	83fb      	strh	r3, [r7, #30]
 8003128:	8bfb      	ldrh	r3, [r7, #30]
 800312a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d01b      	beq.n	800316a <USB_ActivateEndpoint+0x33a>
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	b29b      	uxth	r3, r3
 8003140:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003148:	83bb      	strh	r3, [r7, #28]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	441a      	add	r2, r3
 8003154:	8bbb      	ldrh	r3, [r7, #28]
 8003156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800315a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800315e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003166:	b29b      	uxth	r3, r3
 8003168:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	b29b      	uxth	r3, r3
 8003178:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800317c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003180:	837b      	strh	r3, [r7, #26]
 8003182:	8b7b      	ldrh	r3, [r7, #26]
 8003184:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003188:	837b      	strh	r3, [r7, #26]
 800318a:	8b7b      	ldrh	r3, [r7, #26]
 800318c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003190:	837b      	strh	r3, [r7, #26]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	441a      	add	r2, r3
 800319c:	8b7b      	ldrh	r3, [r7, #26]
 800319e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	8013      	strh	r3, [r2, #0]
 80031b2:	e1a2      	b.n	80034fa <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ca:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	441a      	add	r2, r3
 80031d8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80031dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031e4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80031e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003200:	4413      	add	r3, r2
 8003202:	65bb      	str	r3, [r7, #88]	; 0x58
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	00da      	lsls	r2, r3, #3
 800320a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800320c:	4413      	add	r3, r2
 800320e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003212:	657b      	str	r3, [r7, #84]	; 0x54
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	891b      	ldrh	r3, [r3, #8]
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	b29b      	uxth	r3, r3
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003222:	801a      	strh	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	653b      	str	r3, [r7, #80]	; 0x50
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800322e:	b29b      	uxth	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003234:	4413      	add	r3, r2
 8003236:	653b      	str	r3, [r7, #80]	; 0x50
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	00da      	lsls	r2, r3, #3
 800323e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003240:	4413      	add	r3, r2
 8003242:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	895b      	ldrh	r3, [r3, #10]
 800324c:	085b      	lsrs	r3, r3, #1
 800324e:	b29b      	uxth	r3, r3
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003256:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	785b      	ldrb	r3, [r3, #1]
 800325c:	2b00      	cmp	r3, #0
 800325e:	f040 8091 	bne.w	8003384 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003270:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d01b      	beq.n	80032b2 <USB_ActivateEndpoint+0x482>
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800328c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003290:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	441a      	add	r2, r3
 800329c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800329e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	873b      	strh	r3, [r7, #56]	; 0x38
 80032c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80032c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d01b      	beq.n	8003302 <USB_ActivateEndpoint+0x4d2>
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	441a      	add	r2, r3
 80032ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80032ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032fe:	b29b      	uxth	r3, r3
 8003300:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	b29b      	uxth	r3, r3
 8003310:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003318:	86bb      	strh	r3, [r7, #52]	; 0x34
 800331a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800331c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003320:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003322:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003324:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003328:	86bb      	strh	r3, [r7, #52]	; 0x34
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	441a      	add	r2, r3
 8003334:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800333a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800333e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003346:	b29b      	uxth	r3, r3
 8003348:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	b29b      	uxth	r3, r3
 8003358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800335c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003360:	867b      	strh	r3, [r7, #50]	; 0x32
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	441a      	add	r2, r3
 800336c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800336e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800337a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800337e:	b29b      	uxth	r3, r3
 8003380:	8013      	strh	r3, [r2, #0]
 8003382:	e0ba      	b.n	80034fa <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003394:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01d      	beq.n	80033dc <USB_ActivateEndpoint+0x5ac>
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	441a      	add	r2, r3
 80033c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d8:	b29b      	uxth	r3, r3
 80033da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80033ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80033f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d01d      	beq.n	8003434 <USB_ActivateEndpoint+0x604>
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	b29b      	uxth	r3, r3
 8003406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800340a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	441a      	add	r2, r3
 800341c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800342c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003430:	b29b      	uxth	r3, r3
 8003432:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	78db      	ldrb	r3, [r3, #3]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d024      	beq.n	8003486 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	b29b      	uxth	r3, r3
 800344a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800344e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003452:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003456:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800345a:	f083 0320 	eor.w	r3, r3, #32
 800345e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	441a      	add	r2, r3
 800346c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800347c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003480:	b29b      	uxth	r3, r3
 8003482:	8013      	strh	r3, [r2, #0]
 8003484:	e01d      	b.n	80034c2 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	b29b      	uxth	r3, r3
 8003494:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800349c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	441a      	add	r2, r3
 80034aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80034ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034be:	b29b      	uxth	r3, r3
 80034c0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	441a      	add	r2, r3
 80034e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80034e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80034fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80034fe:	4618      	mov	r0, r3
 8003500:	376c      	adds	r7, #108	; 0x6c
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop

0800350c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800350c:	b480      	push	{r7}
 800350e:	b08d      	sub	sp, #52	; 0x34
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	7b1b      	ldrb	r3, [r3, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	f040 808e 	bne.w	800363c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	785b      	ldrb	r3, [r3, #1]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d044      	beq.n	80035b2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	81bb      	strh	r3, [r7, #12]
 8003536:	89bb      	ldrh	r3, [r7, #12]
 8003538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01b      	beq.n	8003578 <USB_DeactivateEndpoint+0x6c>
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	b29b      	uxth	r3, r3
 800354e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003556:	817b      	strh	r3, [r7, #10]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	441a      	add	r2, r3
 8003562:	897b      	ldrh	r3, [r7, #10]
 8003564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800356c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003570:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003574:	b29b      	uxth	r3, r3
 8003576:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	b29b      	uxth	r3, r3
 8003586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800358a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800358e:	813b      	strh	r3, [r7, #8]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	441a      	add	r2, r3
 800359a:	893b      	ldrh	r3, [r7, #8]
 800359c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	8013      	strh	r3, [r2, #0]
 80035b0:	e192      	b.n	80038d8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	827b      	strh	r3, [r7, #18]
 80035c0:	8a7b      	ldrh	r3, [r7, #18]
 80035c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d01b      	beq.n	8003602 <USB_DeactivateEndpoint+0xf6>
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e0:	823b      	strh	r3, [r7, #16]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	441a      	add	r2, r3
 80035ec:	8a3b      	ldrh	r3, [r7, #16]
 80035ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035fe:	b29b      	uxth	r3, r3
 8003600:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	b29b      	uxth	r3, r3
 8003610:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003618:	81fb      	strh	r3, [r7, #14]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	441a      	add	r2, r3
 8003624:	89fb      	ldrh	r3, [r7, #14]
 8003626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800362a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800362e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003636:	b29b      	uxth	r3, r3
 8003638:	8013      	strh	r3, [r2, #0]
 800363a:	e14d      	b.n	80038d8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	785b      	ldrb	r3, [r3, #1]
 8003640:	2b00      	cmp	r3, #0
 8003642:	f040 80a5 	bne.w	8003790 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	843b      	strh	r3, [r7, #32]
 8003654:	8c3b      	ldrh	r3, [r7, #32]
 8003656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d01b      	beq.n	8003696 <USB_DeactivateEndpoint+0x18a>
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	b29b      	uxth	r3, r3
 800366c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003674:	83fb      	strh	r3, [r7, #30]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	441a      	add	r2, r3
 8003680:	8bfb      	ldrh	r3, [r7, #30]
 8003682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800368a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800368e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003692:	b29b      	uxth	r3, r3
 8003694:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	83bb      	strh	r3, [r7, #28]
 80036a4:	8bbb      	ldrh	r3, [r7, #28]
 80036a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01b      	beq.n	80036e6 <USB_DeactivateEndpoint+0x1da>
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c4:	837b      	strh	r3, [r7, #26]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	441a      	add	r2, r3
 80036d0:	8b7b      	ldrh	r3, [r7, #26]
 80036d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fc:	833b      	strh	r3, [r7, #24]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	441a      	add	r2, r3
 8003708:	8b3b      	ldrh	r3, [r7, #24]
 800370a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800370e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003716:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800371a:	b29b      	uxth	r3, r3
 800371c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	b29b      	uxth	r3, r3
 800372c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003734:	82fb      	strh	r3, [r7, #22]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	441a      	add	r2, r3
 8003740:	8afb      	ldrh	r3, [r7, #22]
 8003742:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800374a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800374e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003752:	b29b      	uxth	r3, r3
 8003754:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	b29b      	uxth	r3, r3
 8003764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800376c:	82bb      	strh	r3, [r7, #20]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	441a      	add	r2, r3
 8003778:	8abb      	ldrh	r3, [r7, #20]
 800377a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800377e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800378a:	b29b      	uxth	r3, r3
 800378c:	8013      	strh	r3, [r2, #0]
 800378e:	e0a3      	b.n	80038d8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800379e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80037a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d01b      	beq.n	80037e0 <USB_DeactivateEndpoint+0x2d4>
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037be:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	441a      	add	r2, r3
 80037ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80037cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037dc:	b29b      	uxth	r3, r3
 80037de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	857b      	strh	r3, [r7, #42]	; 0x2a
 80037ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01b      	beq.n	8003830 <USB_DeactivateEndpoint+0x324>
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	b29b      	uxth	r3, r3
 8003806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800380a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	441a      	add	r2, r3
 800381a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800381c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003828:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800382c:	b29b      	uxth	r3, r3
 800382e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	b29b      	uxth	r3, r3
 800383e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003846:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	441a      	add	r2, r3
 8003852:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003854:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003858:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800385c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003864:	b29b      	uxth	r3, r3
 8003866:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	b29b      	uxth	r3, r3
 8003876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800387a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800387e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	441a      	add	r2, r3
 800388a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800388c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800389c:	b29b      	uxth	r3, r3
 800389e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b6:	847b      	strh	r3, [r7, #34]	; 0x22
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	441a      	add	r2, r3
 80038c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80038c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3734      	adds	r7, #52	; 0x34
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b0c4      	sub	sp, #272	; 0x110
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	1d3b      	adds	r3, r7, #4
 80038ee:	6018      	str	r0, [r3, #0]
 80038f0:	463b      	mov	r3, r7
 80038f2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80038f4:	463b      	mov	r3, r7
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	785b      	ldrb	r3, [r3, #1]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	f040 8566 	bne.w	80043cc <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003900:	463b      	mov	r3, r7
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	463b      	mov	r3, r7
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	429a      	cmp	r2, r3
 800390e:	d905      	bls.n	800391c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003910:	463b      	mov	r3, r7
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800391a:	e004      	b.n	8003926 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800391c:	463b      	mov	r3, r7
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003926:	463b      	mov	r3, r7
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	7b1b      	ldrb	r3, [r3, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d12c      	bne.n	800398a <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003930:	463b      	mov	r3, r7
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6959      	ldr	r1, [r3, #20]
 8003936:	463b      	mov	r3, r7
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	88da      	ldrh	r2, [r3, #6]
 800393c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003940:	b29b      	uxth	r3, r3
 8003942:	1d38      	adds	r0, r7, #4
 8003944:	6800      	ldr	r0, [r0, #0]
 8003946:	f001 fa43 	bl	8004dd0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800394a:	1d3b      	adds	r3, r7, #4
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	1d3b      	adds	r3, r7, #4
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003958:	b29b      	uxth	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	4413      	add	r3, r2
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	463b      	mov	r3, r7
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	00da      	lsls	r2, r3, #3
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	4413      	add	r3, r2
 800396e:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8003972:	f107 0310 	add.w	r3, r7, #16
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800397c:	b29a      	uxth	r2, r3
 800397e:	f107 0310 	add.w	r3, r7, #16
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	801a      	strh	r2, [r3, #0]
 8003986:	f000 bcec 	b.w	8004362 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800398a:	463b      	mov	r3, r7
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	78db      	ldrb	r3, [r3, #3]
 8003990:	2b02      	cmp	r3, #2
 8003992:	f040 8356 	bne.w	8004042 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003996:	463b      	mov	r3, r7
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6a1a      	ldr	r2, [r3, #32]
 800399c:	463b      	mov	r3, r7
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	f240 82fa 	bls.w	8003f9c <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80039a8:	1d3b      	adds	r3, r7, #4
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	463b      	mov	r3, r7
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80039c6:	1d3b      	adds	r3, r7, #4
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	463b      	mov	r3, r7
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	441a      	add	r2, r3
 80039d4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80039d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039e0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80039e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80039ec:	463b      	mov	r3, r7
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80039f6:	463b      	mov	r3, r7
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6a1a      	ldr	r2, [r3, #32]
 80039fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a00:	1ad2      	subs	r2, r2, r3
 8003a02:	463b      	mov	r3, r7
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003a08:	1d3b      	adds	r3, r7, #4
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	463b      	mov	r3, r7
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 815e 	beq.w	8003ce0 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a24:	1d3b      	adds	r3, r7, #4
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	637b      	str	r3, [r7, #52]	; 0x34
 8003a2a:	463b      	mov	r3, r7
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	785b      	ldrb	r3, [r3, #1]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d164      	bne.n	8003afe <USB_EPStartXfer+0x218>
 8003a34:	1d3b      	adds	r3, r7, #4
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a3a:	1d3b      	adds	r3, r7, #4
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a48:	4413      	add	r3, r2
 8003a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a4c:	463b      	mov	r3, r7
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	00da      	lsls	r2, r3, #3
 8003a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a56:	4413      	add	r3, r2
 8003a58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d112      	bne.n	8003a8c <USB_EPStartXfer+0x1a6>
 8003a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a74:	801a      	strh	r2, [r3, #0]
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a88:	801a      	strh	r2, [r3, #0]
 8003a8a:	e054      	b.n	8003b36 <USB_EPStartXfer+0x250>
 8003a8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a90:	2b3e      	cmp	r3, #62	; 0x3e
 8003a92:	d817      	bhi.n	8003ac4 <USB_EPStartXfer+0x1de>
 8003a94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a98:	085b      	lsrs	r3, r3, #1
 8003a9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d004      	beq.n	8003ab4 <USB_EPStartXfer+0x1ce>
 8003aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003aae:	3301      	adds	r3, #1
 8003ab0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	029b      	lsls	r3, r3, #10
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac0:	801a      	strh	r2, [r3, #0]
 8003ac2:	e038      	b.n	8003b36 <USB_EPStartXfer+0x250>
 8003ac4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ace:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d104      	bne.n	8003ae4 <USB_EPStartXfer+0x1fe>
 8003ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	029b      	lsls	r3, r3, #10
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afa:	801a      	strh	r2, [r3, #0]
 8003afc:	e01b      	b.n	8003b36 <USB_EPStartXfer+0x250>
 8003afe:	463b      	mov	r3, r7
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	785b      	ldrb	r3, [r3, #1]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d116      	bne.n	8003b36 <USB_EPStartXfer+0x250>
 8003b08:	1d3b      	adds	r3, r7, #4
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	461a      	mov	r2, r3
 8003b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b16:	4413      	add	r3, r2
 8003b18:	637b      	str	r3, [r7, #52]	; 0x34
 8003b1a:	463b      	mov	r3, r7
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	00da      	lsls	r2, r3, #3
 8003b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b24:	4413      	add	r3, r2
 8003b26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b2a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003b36:	463b      	mov	r3, r7
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	895b      	ldrh	r3, [r3, #10]
 8003b3c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b40:	463b      	mov	r3, r7
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6959      	ldr	r1, [r3, #20]
 8003b46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8003b50:	1d38      	adds	r0, r7, #4
 8003b52:	6800      	ldr	r0, [r0, #0]
 8003b54:	f001 f93c 	bl	8004dd0 <USB_WritePMA>
            ep->xfer_buff += len;
 8003b58:	463b      	mov	r3, r7
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b62:	441a      	add	r2, r3
 8003b64:	463b      	mov	r3, r7
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003b6a:	463b      	mov	r3, r7
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6a1a      	ldr	r2, [r3, #32]
 8003b70:	463b      	mov	r3, r7
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d90e      	bls.n	8003b98 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8003b7a:	463b      	mov	r3, r7
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8003b84:	463b      	mov	r3, r7
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6a1a      	ldr	r2, [r3, #32]
 8003b8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b8e:	1ad2      	subs	r2, r2, r3
 8003b90:	463b      	mov	r3, r7
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	621a      	str	r2, [r3, #32]
 8003b96:	e008      	b.n	8003baa <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8003b98:	463b      	mov	r3, r7
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8003ba2:	463b      	mov	r3, r7
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003baa:	463b      	mov	r3, r7
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	785b      	ldrb	r3, [r3, #1]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d164      	bne.n	8003c7e <USB_EPStartXfer+0x398>
 8003bb4:	1d3b      	adds	r3, r7, #4
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	61fb      	str	r3, [r7, #28]
 8003bba:	1d3b      	adds	r3, r7, #4
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	4413      	add	r3, r2
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	463b      	mov	r3, r7
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	00da      	lsls	r2, r3, #3
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d112      	bne.n	8003c0c <USB_EPStartXfer+0x326>
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	801a      	strh	r2, [r3, #0]
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	801a      	strh	r2, [r3, #0]
 8003c0a:	e057      	b.n	8003cbc <USB_EPStartXfer+0x3d6>
 8003c0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003c10:	2b3e      	cmp	r3, #62	; 0x3e
 8003c12:	d817      	bhi.n	8003c44 <USB_EPStartXfer+0x35e>
 8003c14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003c18:	085b      	lsrs	r3, r3, #1
 8003c1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d004      	beq.n	8003c34 <USB_EPStartXfer+0x34e>
 8003c2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c2e:	3301      	adds	r3, #1
 8003c30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	029b      	lsls	r3, r3, #10
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	801a      	strh	r2, [r3, #0]
 8003c42:	e03b      	b.n	8003cbc <USB_EPStartXfer+0x3d6>
 8003c44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d104      	bne.n	8003c64 <USB_EPStartXfer+0x37e>
 8003c5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c64:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	029b      	lsls	r3, r3, #10
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	801a      	strh	r2, [r3, #0]
 8003c7c:	e01e      	b.n	8003cbc <USB_EPStartXfer+0x3d6>
 8003c7e:	463b      	mov	r3, r7
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	785b      	ldrb	r3, [r3, #1]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d119      	bne.n	8003cbc <USB_EPStartXfer+0x3d6>
 8003c88:	1d3b      	adds	r3, r7, #4
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8e:	1d3b      	adds	r3, r7, #4
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	4413      	add	r3, r2
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca0:	463b      	mov	r3, r7
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	00da      	lsls	r2, r3, #3
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	4413      	add	r3, r2
 8003cac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003cb0:	623b      	str	r3, [r7, #32]
 8003cb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003cbc:	463b      	mov	r3, r7
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	891b      	ldrh	r3, [r3, #8]
 8003cc2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003cc6:	463b      	mov	r3, r7
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6959      	ldr	r1, [r3, #20]
 8003ccc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8003cd6:	1d38      	adds	r0, r7, #4
 8003cd8:	6800      	ldr	r0, [r0, #0]
 8003cda:	f001 f879 	bl	8004dd0 <USB_WritePMA>
 8003cde:	e340      	b.n	8004362 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003ce0:	463b      	mov	r3, r7
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	785b      	ldrb	r3, [r3, #1]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d164      	bne.n	8003db4 <USB_EPStartXfer+0x4ce>
 8003cea:	1d3b      	adds	r3, r7, #4
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cf0:	1d3b      	adds	r3, r7, #4
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cfe:	4413      	add	r3, r2
 8003d00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d02:	463b      	mov	r3, r7
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	00da      	lsls	r2, r3, #3
 8003d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d12:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d112      	bne.n	8003d42 <USB_EPStartXfer+0x45c>
 8003d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d2a:	801a      	strh	r2, [r3, #0]
 8003d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d3e:	801a      	strh	r2, [r3, #0]
 8003d40:	e057      	b.n	8003df2 <USB_EPStartXfer+0x50c>
 8003d42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d46:	2b3e      	cmp	r3, #62	; 0x3e
 8003d48:	d817      	bhi.n	8003d7a <USB_EPStartXfer+0x494>
 8003d4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003d54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d004      	beq.n	8003d6a <USB_EPStartXfer+0x484>
 8003d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d64:	3301      	adds	r3, #1
 8003d66:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	029b      	lsls	r3, r3, #10
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d76:	801a      	strh	r2, [r3, #0]
 8003d78:	e03b      	b.n	8003df2 <USB_EPStartXfer+0x50c>
 8003d7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003d84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d88:	f003 031f 	and.w	r3, r3, #31
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d104      	bne.n	8003d9a <USB_EPStartXfer+0x4b4>
 8003d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d94:	3b01      	subs	r3, #1
 8003d96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	029b      	lsls	r3, r3, #10
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db0:	801a      	strh	r2, [r3, #0]
 8003db2:	e01e      	b.n	8003df2 <USB_EPStartXfer+0x50c>
 8003db4:	463b      	mov	r3, r7
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	785b      	ldrb	r3, [r3, #1]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d119      	bne.n	8003df2 <USB_EPStartXfer+0x50c>
 8003dbe:	1d3b      	adds	r3, r7, #4
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	657b      	str	r3, [r7, #84]	; 0x54
 8003dc4:	1d3b      	adds	r3, r7, #4
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dd2:	4413      	add	r3, r2
 8003dd4:	657b      	str	r3, [r7, #84]	; 0x54
 8003dd6:	463b      	mov	r3, r7
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	00da      	lsls	r2, r3, #3
 8003dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003de0:	4413      	add	r3, r2
 8003de2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003de6:	653b      	str	r3, [r7, #80]	; 0x50
 8003de8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003df2:	463b      	mov	r3, r7
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	891b      	ldrh	r3, [r3, #8]
 8003df8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003dfc:	463b      	mov	r3, r7
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6959      	ldr	r1, [r3, #20]
 8003e02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8003e0c:	1d38      	adds	r0, r7, #4
 8003e0e:	6800      	ldr	r0, [r0, #0]
 8003e10:	f000 ffde 	bl	8004dd0 <USB_WritePMA>
            ep->xfer_buff += len;
 8003e14:	463b      	mov	r3, r7
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e1e:	441a      	add	r2, r3
 8003e20:	463b      	mov	r3, r7
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003e26:	463b      	mov	r3, r7
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6a1a      	ldr	r2, [r3, #32]
 8003e2c:	463b      	mov	r3, r7
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d90e      	bls.n	8003e54 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8003e36:	463b      	mov	r3, r7
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8003e40:	463b      	mov	r3, r7
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6a1a      	ldr	r2, [r3, #32]
 8003e46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e4a:	1ad2      	subs	r2, r2, r3
 8003e4c:	463b      	mov	r3, r7
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	621a      	str	r2, [r3, #32]
 8003e52:	e008      	b.n	8003e66 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8003e54:	463b      	mov	r3, r7
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8003e5e:	463b      	mov	r3, r7
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2200      	movs	r2, #0
 8003e64:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e66:	1d3b      	adds	r3, r7, #4
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e6c:	463b      	mov	r3, r7
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	785b      	ldrb	r3, [r3, #1]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d164      	bne.n	8003f40 <USB_EPStartXfer+0x65a>
 8003e76:	1d3b      	adds	r3, r7, #4
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e7c:	1d3b      	adds	r3, r7, #4
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	461a      	mov	r2, r3
 8003e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8a:	4413      	add	r3, r2
 8003e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e8e:	463b      	mov	r3, r7
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	00da      	lsls	r2, r3, #3
 8003e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e98:	4413      	add	r3, r2
 8003e9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ea0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d112      	bne.n	8003ece <USB_EPStartXfer+0x5e8>
 8003ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb6:	801a      	strh	r2, [r3, #0]
 8003eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eca:	801a      	strh	r2, [r3, #0]
 8003ecc:	e054      	b.n	8003f78 <USB_EPStartXfer+0x692>
 8003ece:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ed2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ed4:	d817      	bhi.n	8003f06 <USB_EPStartXfer+0x620>
 8003ed6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003eda:	085b      	lsrs	r3, r3, #1
 8003edc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ee0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d004      	beq.n	8003ef6 <USB_EPStartXfer+0x610>
 8003eec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ef6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	029b      	lsls	r3, r3, #10
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f02:	801a      	strh	r2, [r3, #0]
 8003f04:	e038      	b.n	8003f78 <USB_EPStartXfer+0x692>
 8003f06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003f10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d104      	bne.n	8003f26 <USB_EPStartXfer+0x640>
 8003f1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f20:	3b01      	subs	r3, #1
 8003f22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003f26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	029b      	lsls	r3, r3, #10
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3c:	801a      	strh	r2, [r3, #0]
 8003f3e:	e01b      	b.n	8003f78 <USB_EPStartXfer+0x692>
 8003f40:	463b      	mov	r3, r7
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	785b      	ldrb	r3, [r3, #1]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d116      	bne.n	8003f78 <USB_EPStartXfer+0x692>
 8003f4a:	1d3b      	adds	r3, r7, #4
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f58:	4413      	add	r3, r2
 8003f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f5c:	463b      	mov	r3, r7
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	00da      	lsls	r2, r3, #3
 8003f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f66:	4413      	add	r3, r2
 8003f68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f6c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003f78:	463b      	mov	r3, r7
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	895b      	ldrh	r3, [r3, #10]
 8003f7e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f82:	463b      	mov	r3, r7
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6959      	ldr	r1, [r3, #20]
 8003f88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8003f92:	1d38      	adds	r0, r7, #4
 8003f94:	6800      	ldr	r0, [r0, #0]
 8003f96:	f000 ff1b 	bl	8004dd0 <USB_WritePMA>
 8003f9a:	e1e2      	b.n	8004362 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8003f9c:	463b      	mov	r3, r7
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003fa6:	1d3b      	adds	r3, r7, #4
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	463b      	mov	r3, r7
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003fc4:	1d3b      	adds	r3, r7, #4
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	463b      	mov	r3, r7
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	441a      	add	r2, r3
 8003fd2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003fea:	1d3b      	adds	r3, r7, #4
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	663b      	str	r3, [r7, #96]	; 0x60
 8003ff0:	1d3b      	adds	r3, r7, #4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ffe:	4413      	add	r3, r2
 8004000:	663b      	str	r3, [r7, #96]	; 0x60
 8004002:	463b      	mov	r3, r7
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	00da      	lsls	r2, r3, #3
 800400a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800400c:	4413      	add	r3, r2
 800400e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004012:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004014:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004018:	b29a      	uxth	r2, r3
 800401a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800401c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800401e:	463b      	mov	r3, r7
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	891b      	ldrh	r3, [r3, #8]
 8004024:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004028:	463b      	mov	r3, r7
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6959      	ldr	r1, [r3, #20]
 800402e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004032:	b29b      	uxth	r3, r3
 8004034:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004038:	1d38      	adds	r0, r7, #4
 800403a:	6800      	ldr	r0, [r0, #0]
 800403c:	f000 fec8 	bl	8004dd0 <USB_WritePMA>
 8004040:	e18f      	b.n	8004362 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004042:	1d3b      	adds	r3, r7, #4
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	463b      	mov	r3, r7
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	b29b      	uxth	r3, r3
 8004054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 808f 	beq.w	800417c <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800405e:	1d3b      	adds	r3, r7, #4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	67bb      	str	r3, [r7, #120]	; 0x78
 8004064:	463b      	mov	r3, r7
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	785b      	ldrb	r3, [r3, #1]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d164      	bne.n	8004138 <USB_EPStartXfer+0x852>
 800406e:	1d3b      	adds	r3, r7, #4
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	673b      	str	r3, [r7, #112]	; 0x70
 8004074:	1d3b      	adds	r3, r7, #4
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800407c:	b29b      	uxth	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004082:	4413      	add	r3, r2
 8004084:	673b      	str	r3, [r7, #112]	; 0x70
 8004086:	463b      	mov	r3, r7
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	00da      	lsls	r2, r3, #3
 800408e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004090:	4413      	add	r3, r2
 8004092:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004096:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004098:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800409c:	2b00      	cmp	r3, #0
 800409e:	d112      	bne.n	80040c6 <USB_EPStartXfer+0x7e0>
 80040a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ae:	801a      	strh	r2, [r3, #0]
 80040b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040be:	b29a      	uxth	r2, r3
 80040c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c2:	801a      	strh	r2, [r3, #0]
 80040c4:	e054      	b.n	8004170 <USB_EPStartXfer+0x88a>
 80040c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80040ca:	2b3e      	cmp	r3, #62	; 0x3e
 80040cc:	d817      	bhi.n	80040fe <USB_EPStartXfer+0x818>
 80040ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80040d2:	085b      	lsrs	r3, r3, #1
 80040d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80040d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d004      	beq.n	80040ee <USB_EPStartXfer+0x808>
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e8:	3301      	adds	r3, #1
 80040ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80040ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	029b      	lsls	r3, r3, #10
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fa:	801a      	strh	r2, [r3, #0]
 80040fc:	e038      	b.n	8004170 <USB_EPStartXfer+0x88a>
 80040fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004108:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	2b00      	cmp	r3, #0
 8004112:	d104      	bne.n	800411e <USB_EPStartXfer+0x838>
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	3b01      	subs	r3, #1
 800411a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800411e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004122:	b29b      	uxth	r3, r3
 8004124:	029b      	lsls	r3, r3, #10
 8004126:	b29b      	uxth	r3, r3
 8004128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800412c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004130:	b29a      	uxth	r2, r3
 8004132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004134:	801a      	strh	r2, [r3, #0]
 8004136:	e01b      	b.n	8004170 <USB_EPStartXfer+0x88a>
 8004138:	463b      	mov	r3, r7
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	785b      	ldrb	r3, [r3, #1]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d116      	bne.n	8004170 <USB_EPStartXfer+0x88a>
 8004142:	1d3b      	adds	r3, r7, #4
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800414a:	b29b      	uxth	r3, r3
 800414c:	461a      	mov	r2, r3
 800414e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004150:	4413      	add	r3, r2
 8004152:	67bb      	str	r3, [r7, #120]	; 0x78
 8004154:	463b      	mov	r3, r7
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	00da      	lsls	r2, r3, #3
 800415c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800415e:	4413      	add	r3, r2
 8004160:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004164:	677b      	str	r3, [r7, #116]	; 0x74
 8004166:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800416a:	b29a      	uxth	r2, r3
 800416c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800416e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004170:	463b      	mov	r3, r7
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	895b      	ldrh	r3, [r3, #10]
 8004176:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800417a:	e097      	b.n	80042ac <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800417c:	463b      	mov	r3, r7
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	785b      	ldrb	r3, [r3, #1]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d168      	bne.n	8004258 <USB_EPStartXfer+0x972>
 8004186:	1d3b      	adds	r3, r7, #4
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800418e:	1d3b      	adds	r3, r7, #4
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004196:	b29b      	uxth	r3, r3
 8004198:	461a      	mov	r2, r3
 800419a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800419e:	4413      	add	r3, r2
 80041a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041a4:	463b      	mov	r3, r7
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	00da      	lsls	r2, r3, #3
 80041ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041b0:	4413      	add	r3, r2
 80041b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80041b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d112      	bne.n	80041e6 <USB_EPStartXfer+0x900>
 80041c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041ce:	801a      	strh	r2, [r3, #0]
 80041d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041de:	b29a      	uxth	r2, r3
 80041e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041e2:	801a      	strh	r2, [r3, #0]
 80041e4:	e05d      	b.n	80042a2 <USB_EPStartXfer+0x9bc>
 80041e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80041ea:	2b3e      	cmp	r3, #62	; 0x3e
 80041ec:	d817      	bhi.n	800421e <USB_EPStartXfer+0x938>
 80041ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80041f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d004      	beq.n	800420e <USB_EPStartXfer+0x928>
 8004204:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004208:	3301      	adds	r3, #1
 800420a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800420e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004212:	b29b      	uxth	r3, r3
 8004214:	029b      	lsls	r3, r3, #10
 8004216:	b29a      	uxth	r2, r3
 8004218:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800421a:	801a      	strh	r2, [r3, #0]
 800421c:	e041      	b.n	80042a2 <USB_EPStartXfer+0x9bc>
 800421e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004228:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	2b00      	cmp	r3, #0
 8004232:	d104      	bne.n	800423e <USB_EPStartXfer+0x958>
 8004234:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004238:	3b01      	subs	r3, #1
 800423a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800423e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004242:	b29b      	uxth	r3, r3
 8004244:	029b      	lsls	r3, r3, #10
 8004246:	b29b      	uxth	r3, r3
 8004248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800424c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004250:	b29a      	uxth	r2, r3
 8004252:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004254:	801a      	strh	r2, [r3, #0]
 8004256:	e024      	b.n	80042a2 <USB_EPStartXfer+0x9bc>
 8004258:	463b      	mov	r3, r7
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	785b      	ldrb	r3, [r3, #1]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d11f      	bne.n	80042a2 <USB_EPStartXfer+0x9bc>
 8004262:	1d3b      	adds	r3, r7, #4
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800426a:	1d3b      	adds	r3, r7, #4
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004272:	b29b      	uxth	r3, r3
 8004274:	461a      	mov	r2, r3
 8004276:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800427a:	4413      	add	r3, r2
 800427c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004280:	463b      	mov	r3, r7
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	00da      	lsls	r2, r3, #3
 8004288:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800428c:	4413      	add	r3, r2
 800428e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004292:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004296:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800429a:	b29a      	uxth	r2, r3
 800429c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80042a2:	463b      	mov	r3, r7
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	891b      	ldrh	r3, [r3, #8]
 80042a8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042ac:	463b      	mov	r3, r7
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6959      	ldr	r1, [r3, #20]
 80042b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80042bc:	1d38      	adds	r0, r7, #4
 80042be:	6800      	ldr	r0, [r0, #0]
 80042c0:	f000 fd86 	bl	8004dd0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80042c4:	463b      	mov	r3, r7
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	785b      	ldrb	r3, [r3, #1]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d122      	bne.n	8004314 <USB_EPStartXfer+0xa2e>
 80042ce:	1d3b      	adds	r3, r7, #4
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	463b      	mov	r3, r7
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80042ec:	1d3b      	adds	r3, r7, #4
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	463b      	mov	r3, r7
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	441a      	add	r2, r3
 80042fa:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80042fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800430a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800430e:	b29b      	uxth	r3, r3
 8004310:	8013      	strh	r3, [r2, #0]
 8004312:	e026      	b.n	8004362 <USB_EPStartXfer+0xa7c>
 8004314:	463b      	mov	r3, r7
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	785b      	ldrb	r3, [r3, #1]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d121      	bne.n	8004362 <USB_EPStartXfer+0xa7c>
 800431e:	1d3b      	adds	r3, r7, #4
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	463b      	mov	r3, r7
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	b29b      	uxth	r3, r3
 8004330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004338:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800433c:	1d3b      	adds	r3, r7, #4
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	463b      	mov	r3, r7
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	441a      	add	r2, r3
 800434a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800434e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004356:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800435a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800435e:	b29b      	uxth	r3, r3
 8004360:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004362:	1d3b      	adds	r3, r7, #4
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	463b      	mov	r3, r7
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	b29b      	uxth	r3, r3
 8004374:	f107 020e 	add.w	r2, r7, #14
 8004378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800437c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004380:	8013      	strh	r3, [r2, #0]
 8004382:	f107 030e 	add.w	r3, r7, #14
 8004386:	f107 020e 	add.w	r2, r7, #14
 800438a:	8812      	ldrh	r2, [r2, #0]
 800438c:	f082 0210 	eor.w	r2, r2, #16
 8004390:	801a      	strh	r2, [r3, #0]
 8004392:	f107 030e 	add.w	r3, r7, #14
 8004396:	f107 020e 	add.w	r2, r7, #14
 800439a:	8812      	ldrh	r2, [r2, #0]
 800439c:	f082 0220 	eor.w	r2, r2, #32
 80043a0:	801a      	strh	r2, [r3, #0]
 80043a2:	1d3b      	adds	r3, r7, #4
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	463b      	mov	r3, r7
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	441a      	add	r2, r3
 80043b0:	f107 030e 	add.w	r3, r7, #14
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	8013      	strh	r3, [r2, #0]
 80043ca:	e3b5      	b.n	8004b38 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80043cc:	463b      	mov	r3, r7
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	7b1b      	ldrb	r3, [r3, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f040 8090 	bne.w	80044f8 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 80043d8:	463b      	mov	r3, r7
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	463b      	mov	r3, r7
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d90e      	bls.n	8004406 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 80043e8:	463b      	mov	r3, r7
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 80043f2:	463b      	mov	r3, r7
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699a      	ldr	r2, [r3, #24]
 80043f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80043fc:	1ad2      	subs	r2, r2, r3
 80043fe:	463b      	mov	r3, r7
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	619a      	str	r2, [r3, #24]
 8004404:	e008      	b.n	8004418 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8004406:	463b      	mov	r3, r7
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8004410:	463b      	mov	r3, r7
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2200      	movs	r2, #0
 8004416:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004418:	1d3b      	adds	r3, r7, #4
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004420:	1d3b      	adds	r3, r7, #4
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004428:	b29b      	uxth	r3, r3
 800442a:	461a      	mov	r2, r3
 800442c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004430:	4413      	add	r3, r2
 8004432:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004436:	463b      	mov	r3, r7
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	00da      	lsls	r2, r3, #3
 800443e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004442:	4413      	add	r3, r2
 8004444:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004448:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800444c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004450:	2b00      	cmp	r3, #0
 8004452:	d116      	bne.n	8004482 <USB_EPStartXfer+0xb9c>
 8004454:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	b29b      	uxth	r3, r3
 800445c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004460:	b29a      	uxth	r2, r3
 8004462:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004466:	801a      	strh	r2, [r3, #0]
 8004468:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004478:	b29a      	uxth	r2, r3
 800447a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800447e:	801a      	strh	r2, [r3, #0]
 8004480:	e32c      	b.n	8004adc <USB_EPStartXfer+0x11f6>
 8004482:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004486:	2b3e      	cmp	r3, #62	; 0x3e
 8004488:	d818      	bhi.n	80044bc <USB_EPStartXfer+0xbd6>
 800448a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800448e:	085b      	lsrs	r3, r3, #1
 8004490:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004494:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d004      	beq.n	80044aa <USB_EPStartXfer+0xbc4>
 80044a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80044a4:	3301      	adds	r3, #1
 80044a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80044aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	029b      	lsls	r3, r3, #10
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044b8:	801a      	strh	r2, [r3, #0]
 80044ba:	e30f      	b.n	8004adc <USB_EPStartXfer+0x11f6>
 80044bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80044c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d104      	bne.n	80044dc <USB_EPStartXfer+0xbf6>
 80044d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80044d6:	3b01      	subs	r3, #1
 80044d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80044dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	029b      	lsls	r3, r3, #10
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044f4:	801a      	strh	r2, [r3, #0]
 80044f6:	e2f1      	b.n	8004adc <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 80044f8:	463b      	mov	r3, r7
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	78db      	ldrb	r3, [r3, #3]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	f040 818f 	bne.w	8004822 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004504:	463b      	mov	r3, r7
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	785b      	ldrb	r3, [r3, #1]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d175      	bne.n	80045fa <USB_EPStartXfer+0xd14>
 800450e:	1d3b      	adds	r3, r7, #4
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004516:	1d3b      	adds	r3, r7, #4
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451e:	b29b      	uxth	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004526:	4413      	add	r3, r2
 8004528:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800452c:	463b      	mov	r3, r7
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	00da      	lsls	r2, r3, #3
 8004534:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004538:	4413      	add	r3, r2
 800453a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800453e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004542:	463b      	mov	r3, r7
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d116      	bne.n	800457a <USB_EPStartXfer+0xc94>
 800454c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	b29b      	uxth	r3, r3
 8004554:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004558:	b29a      	uxth	r2, r3
 800455a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800455e:	801a      	strh	r2, [r3, #0]
 8004560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b29b      	uxth	r3, r3
 8004568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800456c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004570:	b29a      	uxth	r2, r3
 8004572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004576:	801a      	strh	r2, [r3, #0]
 8004578:	e065      	b.n	8004646 <USB_EPStartXfer+0xd60>
 800457a:	463b      	mov	r3, r7
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	2b3e      	cmp	r3, #62	; 0x3e
 8004582:	d81a      	bhi.n	80045ba <USB_EPStartXfer+0xcd4>
 8004584:	463b      	mov	r3, r7
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	085b      	lsrs	r3, r3, #1
 800458c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004590:	463b      	mov	r3, r7
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d004      	beq.n	80045a8 <USB_EPStartXfer+0xcc2>
 800459e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045a2:	3301      	adds	r3, #1
 80045a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	029b      	lsls	r3, r3, #10
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045b6:	801a      	strh	r2, [r3, #0]
 80045b8:	e045      	b.n	8004646 <USB_EPStartXfer+0xd60>
 80045ba:	463b      	mov	r3, r7
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045c6:	463b      	mov	r3, r7
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d104      	bne.n	80045de <USB_EPStartXfer+0xcf8>
 80045d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045d8:	3b01      	subs	r3, #1
 80045da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	029b      	lsls	r3, r3, #10
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045f6:	801a      	strh	r2, [r3, #0]
 80045f8:	e025      	b.n	8004646 <USB_EPStartXfer+0xd60>
 80045fa:	463b      	mov	r3, r7
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	785b      	ldrb	r3, [r3, #1]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d120      	bne.n	8004646 <USB_EPStartXfer+0xd60>
 8004604:	1d3b      	adds	r3, r7, #4
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800460c:	1d3b      	adds	r3, r7, #4
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004614:	b29b      	uxth	r3, r3
 8004616:	461a      	mov	r2, r3
 8004618:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800461c:	4413      	add	r3, r2
 800461e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004622:	463b      	mov	r3, r7
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	00da      	lsls	r2, r3, #3
 800462a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800462e:	4413      	add	r3, r2
 8004630:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004638:	463b      	mov	r3, r7
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	b29a      	uxth	r2, r3
 8004640:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004644:	801a      	strh	r2, [r3, #0]
 8004646:	1d3b      	adds	r3, r7, #4
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800464e:	463b      	mov	r3, r7
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	785b      	ldrb	r3, [r3, #1]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d175      	bne.n	8004744 <USB_EPStartXfer+0xe5e>
 8004658:	1d3b      	adds	r3, r7, #4
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004660:	1d3b      	adds	r3, r7, #4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004668:	b29b      	uxth	r3, r3
 800466a:	461a      	mov	r2, r3
 800466c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004670:	4413      	add	r3, r2
 8004672:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004676:	463b      	mov	r3, r7
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	00da      	lsls	r2, r3, #3
 800467e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004682:	4413      	add	r3, r2
 8004684:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004688:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800468c:	463b      	mov	r3, r7
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d116      	bne.n	80046c4 <USB_EPStartXfer+0xdde>
 8004696:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	b29b      	uxth	r3, r3
 800469e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046a8:	801a      	strh	r2, [r3, #0]
 80046aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046c0:	801a      	strh	r2, [r3, #0]
 80046c2:	e061      	b.n	8004788 <USB_EPStartXfer+0xea2>
 80046c4:	463b      	mov	r3, r7
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b3e      	cmp	r3, #62	; 0x3e
 80046cc:	d81a      	bhi.n	8004704 <USB_EPStartXfer+0xe1e>
 80046ce:	463b      	mov	r3, r7
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	085b      	lsrs	r3, r3, #1
 80046d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046da:	463b      	mov	r3, r7
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d004      	beq.n	80046f2 <USB_EPStartXfer+0xe0c>
 80046e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ec:	3301      	adds	r3, #1
 80046ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	029b      	lsls	r3, r3, #10
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004700:	801a      	strh	r2, [r3, #0]
 8004702:	e041      	b.n	8004788 <USB_EPStartXfer+0xea2>
 8004704:	463b      	mov	r3, r7
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004710:	463b      	mov	r3, r7
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 031f 	and.w	r3, r3, #31
 800471a:	2b00      	cmp	r3, #0
 800471c:	d104      	bne.n	8004728 <USB_EPStartXfer+0xe42>
 800471e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004722:	3b01      	subs	r3, #1
 8004724:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472c:	b29b      	uxth	r3, r3
 800472e:	029b      	lsls	r3, r3, #10
 8004730:	b29b      	uxth	r3, r3
 8004732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800473a:	b29a      	uxth	r2, r3
 800473c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004740:	801a      	strh	r2, [r3, #0]
 8004742:	e021      	b.n	8004788 <USB_EPStartXfer+0xea2>
 8004744:	463b      	mov	r3, r7
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	785b      	ldrb	r3, [r3, #1]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d11c      	bne.n	8004788 <USB_EPStartXfer+0xea2>
 800474e:	1d3b      	adds	r3, r7, #4
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004756:	b29b      	uxth	r3, r3
 8004758:	461a      	mov	r2, r3
 800475a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800475e:	4413      	add	r3, r2
 8004760:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004764:	463b      	mov	r3, r7
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	00da      	lsls	r2, r3, #3
 800476c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004770:	4413      	add	r3, r2
 8004772:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004776:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800477a:	463b      	mov	r3, r7
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	b29a      	uxth	r2, r3
 8004782:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004786:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8004788:	463b      	mov	r3, r7
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 81a4 	beq.w	8004adc <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004794:	1d3b      	adds	r3, r7, #4
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	463b      	mov	r3, r7
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80047a8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80047ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <USB_EPStartXfer+0xeda>
 80047b4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80047b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10d      	bne.n	80047dc <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80047c0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80047c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f040 8187 	bne.w	8004adc <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80047ce:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80047d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f040 8180 	bne.w	8004adc <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80047dc:	1d3b      	adds	r3, r7, #4
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	463b      	mov	r3, r7
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80047fa:	1d3b      	adds	r3, r7, #4
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	463b      	mov	r3, r7
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	441a      	add	r2, r3
 8004808:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800480c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004818:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800481c:	b29b      	uxth	r3, r3
 800481e:	8013      	strh	r3, [r2, #0]
 8004820:	e15c      	b.n	8004adc <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004822:	463b      	mov	r3, r7
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	78db      	ldrb	r3, [r3, #3]
 8004828:	2b01      	cmp	r3, #1
 800482a:	f040 8155 	bne.w	8004ad8 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800482e:	463b      	mov	r3, r7
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699a      	ldr	r2, [r3, #24]
 8004834:	463b      	mov	r3, r7
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	429a      	cmp	r2, r3
 800483c:	d90e      	bls.n	800485c <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800483e:	463b      	mov	r3, r7
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8004848:	463b      	mov	r3, r7
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004852:	1ad2      	subs	r2, r2, r3
 8004854:	463b      	mov	r3, r7
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	619a      	str	r2, [r3, #24]
 800485a:	e008      	b.n	800486e <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 800485c:	463b      	mov	r3, r7
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8004866:	463b      	mov	r3, r7
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2200      	movs	r2, #0
 800486c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800486e:	463b      	mov	r3, r7
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	785b      	ldrb	r3, [r3, #1]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d16f      	bne.n	8004958 <USB_EPStartXfer+0x1072>
 8004878:	1d3b      	adds	r3, r7, #4
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004880:	1d3b      	adds	r3, r7, #4
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004888:	b29b      	uxth	r3, r3
 800488a:	461a      	mov	r2, r3
 800488c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004890:	4413      	add	r3, r2
 8004892:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004896:	463b      	mov	r3, r7
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	00da      	lsls	r2, r3, #3
 800489e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80048a2:	4413      	add	r3, r2
 80048a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d116      	bne.n	80048e2 <USB_EPStartXfer+0xffc>
 80048b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048c6:	801a      	strh	r2, [r3, #0]
 80048c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048d8:	b29a      	uxth	r2, r3
 80048da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048de:	801a      	strh	r2, [r3, #0]
 80048e0:	e05f      	b.n	80049a2 <USB_EPStartXfer+0x10bc>
 80048e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048e6:	2b3e      	cmp	r3, #62	; 0x3e
 80048e8:	d818      	bhi.n	800491c <USB_EPStartXfer+0x1036>
 80048ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048ee:	085b      	lsrs	r3, r3, #1
 80048f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d004      	beq.n	800490a <USB_EPStartXfer+0x1024>
 8004900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004904:	3301      	adds	r3, #1
 8004906:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800490a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800490e:	b29b      	uxth	r3, r3
 8004910:	029b      	lsls	r3, r3, #10
 8004912:	b29a      	uxth	r2, r3
 8004914:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004918:	801a      	strh	r2, [r3, #0]
 800491a:	e042      	b.n	80049a2 <USB_EPStartXfer+0x10bc>
 800491c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004920:	095b      	lsrs	r3, r3, #5
 8004922:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004926:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	2b00      	cmp	r3, #0
 8004930:	d104      	bne.n	800493c <USB_EPStartXfer+0x1056>
 8004932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004936:	3b01      	subs	r3, #1
 8004938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800493c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004940:	b29b      	uxth	r3, r3
 8004942:	029b      	lsls	r3, r3, #10
 8004944:	b29b      	uxth	r3, r3
 8004946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800494a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800494e:	b29a      	uxth	r2, r3
 8004950:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004954:	801a      	strh	r2, [r3, #0]
 8004956:	e024      	b.n	80049a2 <USB_EPStartXfer+0x10bc>
 8004958:	463b      	mov	r3, r7
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	785b      	ldrb	r3, [r3, #1]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d11f      	bne.n	80049a2 <USB_EPStartXfer+0x10bc>
 8004962:	1d3b      	adds	r3, r7, #4
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004972:	b29b      	uxth	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800497a:	4413      	add	r3, r2
 800497c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004980:	463b      	mov	r3, r7
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	00da      	lsls	r2, r3, #3
 8004988:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800498c:	4413      	add	r3, r2
 800498e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004996:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800499a:	b29a      	uxth	r2, r3
 800499c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049a0:	801a      	strh	r2, [r3, #0]
 80049a2:	1d3b      	adds	r3, r7, #4
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049aa:	463b      	mov	r3, r7
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	785b      	ldrb	r3, [r3, #1]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d16f      	bne.n	8004a94 <USB_EPStartXfer+0x11ae>
 80049b4:	1d3b      	adds	r3, r7, #4
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049bc:	1d3b      	adds	r3, r7, #4
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049cc:	4413      	add	r3, r2
 80049ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049d2:	463b      	mov	r3, r7
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	00da      	lsls	r2, r3, #3
 80049da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049de:	4413      	add	r3, r2
 80049e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80049e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80049e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d116      	bne.n	8004a1e <USB_EPStartXfer+0x1138>
 80049f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a02:	801a      	strh	r2, [r3, #0]
 8004a04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a1a:	801a      	strh	r2, [r3, #0]
 8004a1c:	e05e      	b.n	8004adc <USB_EPStartXfer+0x11f6>
 8004a1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a22:	2b3e      	cmp	r3, #62	; 0x3e
 8004a24:	d818      	bhi.n	8004a58 <USB_EPStartXfer+0x1172>
 8004a26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a2a:	085b      	lsrs	r3, r3, #1
 8004a2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d004      	beq.n	8004a46 <USB_EPStartXfer+0x1160>
 8004a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a40:	3301      	adds	r3, #1
 8004a42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	029b      	lsls	r3, r3, #10
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a54:	801a      	strh	r2, [r3, #0]
 8004a56:	e041      	b.n	8004adc <USB_EPStartXfer+0x11f6>
 8004a58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a66:	f003 031f 	and.w	r3, r3, #31
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d104      	bne.n	8004a78 <USB_EPStartXfer+0x1192>
 8004a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a72:	3b01      	subs	r3, #1
 8004a74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	029b      	lsls	r3, r3, #10
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a90:	801a      	strh	r2, [r3, #0]
 8004a92:	e023      	b.n	8004adc <USB_EPStartXfer+0x11f6>
 8004a94:	463b      	mov	r3, r7
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	785b      	ldrb	r3, [r3, #1]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d11e      	bne.n	8004adc <USB_EPStartXfer+0x11f6>
 8004a9e:	1d3b      	adds	r3, r7, #4
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004aae:	4413      	add	r3, r2
 8004ab0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ab4:	463b      	mov	r3, r7
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	00da      	lsls	r2, r3, #3
 8004abc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ac6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004aca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ad4:	801a      	strh	r2, [r3, #0]
 8004ad6:	e001      	b.n	8004adc <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e02e      	b.n	8004b3a <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004adc:	1d3b      	adds	r3, r7, #4
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	463b      	mov	r3, r7
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004afa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004afe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b02:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004b06:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004b0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b0e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004b12:	1d3b      	adds	r3, r7, #4
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	463b      	mov	r3, r7
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	441a      	add	r2, r3
 8004b20:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	785b      	ldrb	r3, [r3, #1]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d020      	beq.n	8004b98 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b6c:	81bb      	strh	r3, [r7, #12]
 8004b6e:	89bb      	ldrh	r3, [r7, #12]
 8004b70:	f083 0310 	eor.w	r3, r3, #16
 8004b74:	81bb      	strh	r3, [r7, #12]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	441a      	add	r2, r3
 8004b80:	89bb      	ldrh	r3, [r7, #12]
 8004b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	8013      	strh	r3, [r2, #0]
 8004b96:	e01f      	b.n	8004bd8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bae:	81fb      	strh	r3, [r7, #14]
 8004bb0:	89fb      	ldrh	r3, [r7, #14]
 8004bb2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004bb6:	81fb      	strh	r3, [r7, #14]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	441a      	add	r2, r3
 8004bc2:	89fb      	ldrh	r3, [r7, #14]
 8004bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b087      	sub	sp, #28
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	7b1b      	ldrb	r3, [r3, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f040 809d 	bne.w	8004d34 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	785b      	ldrb	r3, [r3, #1]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d04c      	beq.n	8004c9c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	823b      	strh	r3, [r7, #16]
 8004c10:	8a3b      	ldrh	r3, [r7, #16]
 8004c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d01b      	beq.n	8004c52 <USB_EPClearStall+0x6c>
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c30:	81fb      	strh	r3, [r7, #14]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	441a      	add	r2, r3
 8004c3c:	89fb      	ldrh	r3, [r7, #14]
 8004c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	78db      	ldrb	r3, [r3, #3]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d06c      	beq.n	8004d34 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c70:	81bb      	strh	r3, [r7, #12]
 8004c72:	89bb      	ldrh	r3, [r7, #12]
 8004c74:	f083 0320 	eor.w	r3, r3, #32
 8004c78:	81bb      	strh	r3, [r7, #12]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	441a      	add	r2, r3
 8004c84:	89bb      	ldrh	r3, [r7, #12]
 8004c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	8013      	strh	r3, [r2, #0]
 8004c9a:	e04b      	b.n	8004d34 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	82fb      	strh	r3, [r7, #22]
 8004caa:	8afb      	ldrh	r3, [r7, #22]
 8004cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d01b      	beq.n	8004cec <USB_EPClearStall+0x106>
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cca:	82bb      	strh	r3, [r7, #20]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	441a      	add	r2, r3
 8004cd6:	8abb      	ldrh	r3, [r7, #20]
 8004cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d02:	827b      	strh	r3, [r7, #18]
 8004d04:	8a7b      	ldrh	r3, [r7, #18]
 8004d06:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004d0a:	827b      	strh	r3, [r7, #18]
 8004d0c:	8a7b      	ldrh	r3, [r7, #18]
 8004d0e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d12:	827b      	strh	r3, [r7, #18]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	441a      	add	r2, r3
 8004d1e:	8a7b      	ldrh	r3, [r7, #18]
 8004d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004d4e:	78fb      	ldrb	r3, [r7, #3]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d103      	bne.n	8004d5c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2280      	movs	r2, #128	; 0x80
 8004d58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004daa:	68fb      	ldr	r3, [r7, #12]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b08d      	sub	sp, #52	; 0x34
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	4611      	mov	r1, r2
 8004ddc:	461a      	mov	r2, r3
 8004dde:	460b      	mov	r3, r1
 8004de0:	80fb      	strh	r3, [r7, #6]
 8004de2:	4613      	mov	r3, r2
 8004de4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004de6:	88bb      	ldrh	r3, [r7, #4]
 8004de8:	3301      	adds	r3, #1
 8004dea:	085b      	lsrs	r3, r3, #1
 8004dec:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004df6:	88fa      	ldrh	r2, [r7, #6]
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e00:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e06:	e01b      	b.n	8004e40 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	3301      	adds	r3, #1
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	021b      	lsls	r3, r3, #8
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	461a      	mov	r2, r3
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	3302      	adds	r3, #2
 8004e32:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	3301      	adds	r3, #1
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e0      	bne.n	8004e08 <USB_WritePMA+0x38>
  }
}
 8004e46:	bf00      	nop
 8004e48:	3734      	adds	r7, #52	; 0x34
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b08b      	sub	sp, #44	; 0x2c
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	60f8      	str	r0, [r7, #12]
 8004e5a:	60b9      	str	r1, [r7, #8]
 8004e5c:	4611      	mov	r1, r2
 8004e5e:	461a      	mov	r2, r3
 8004e60:	460b      	mov	r3, r1
 8004e62:	80fb      	strh	r3, [r7, #6]
 8004e64:	4613      	mov	r3, r2
 8004e66:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004e68:	88bb      	ldrh	r3, [r7, #4]
 8004e6a:	085b      	lsrs	r3, r3, #1
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e78:	88fa      	ldrh	r2, [r7, #6]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e82:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
 8004e88:	e018      	b.n	8004ebc <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	3302      	adds	r3, #2
 8004e96:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	0a1b      	lsrs	r3, r3, #8
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	627b      	str	r3, [r7, #36]	; 0x24
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e3      	bne.n	8004e8a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004ec2:	88bb      	ldrh	r3, [r7, #4]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d007      	beq.n	8004ede <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	701a      	strb	r2, [r3, #0]
  }
}
 8004ede:	bf00      	nop
 8004ee0:	372c      	adds	r7, #44	; 0x2c
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004ef6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004efa:	f002 f843 	bl	8006f84 <USBD_static_malloc>
 8004efe:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d105      	bne.n	8004f12 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e066      	b.n	8004fe0 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	7c1b      	ldrb	r3, [r3, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d119      	bne.n	8004f56 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f26:	2202      	movs	r2, #2
 8004f28:	2181      	movs	r1, #129	; 0x81
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f001 fecf 	bl	8006cce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f001 fec5 	bl	8006cce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2210      	movs	r2, #16
 8004f50:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004f54:	e016      	b.n	8004f84 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f56:	2340      	movs	r3, #64	; 0x40
 8004f58:	2202      	movs	r2, #2
 8004f5a:	2181      	movs	r1, #129	; 0x81
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f001 feb6 	bl	8006cce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f68:	2340      	movs	r3, #64	; 0x40
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f001 fead 	bl	8006cce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2210      	movs	r2, #16
 8004f80:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f84:	2308      	movs	r3, #8
 8004f86:	2203      	movs	r2, #3
 8004f88:	2182      	movs	r1, #130	; 0x82
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f001 fe9f 	bl	8006cce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	7c1b      	ldrb	r3, [r3, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f001 ff71 	bl	8006eae <USBD_LL_PrepareReceive>
 8004fcc:	e007      	b.n	8004fde <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fd4:	2340      	movs	r3, #64	; 0x40
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f001 ff68 	bl	8006eae <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004ff4:	2181      	movs	r1, #129	; 0x81
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f001 fe8f 	bl	8006d1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005002:	2101      	movs	r1, #1
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f001 fe88 	bl	8006d1a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005012:	2182      	movs	r1, #130	; 0x82
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f001 fe80 	bl	8006d1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00e      	beq.n	8005052 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005044:	4618      	mov	r0, r3
 8005046:	f001 ffab 	bl	8006fa0 <USBD_static_free>
    pdev->pClassData = NULL;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800506c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005072:	2300      	movs	r3, #0
 8005074:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005082:	2b00      	cmp	r3, #0
 8005084:	d03a      	beq.n	80050fc <USBD_CDC_Setup+0xa0>
 8005086:	2b20      	cmp	r3, #32
 8005088:	f040 8097 	bne.w	80051ba <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	88db      	ldrh	r3, [r3, #6]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d029      	beq.n	80050e8 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	b25b      	sxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	da11      	bge.n	80050c2 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80050aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	88d2      	ldrh	r2, [r2, #6]
 80050b0:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80050b2:	6939      	ldr	r1, [r7, #16]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	88db      	ldrh	r3, [r3, #6]
 80050b8:	461a      	mov	r2, r3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f001 fa5d 	bl	800657a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80050c0:	e082      	b.n	80051c8 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	785a      	ldrb	r2, [r3, #1]
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	88db      	ldrh	r3, [r3, #6]
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80050d8:	6939      	ldr	r1, [r7, #16]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	88db      	ldrh	r3, [r3, #6]
 80050de:	461a      	mov	r2, r3
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f001 fa76 	bl	80065d2 <USBD_CtlPrepareRx>
      break;
 80050e6:	e06f      	b.n	80051c8 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	7850      	ldrb	r0, [r2, #1]
 80050f4:	2200      	movs	r2, #0
 80050f6:	6839      	ldr	r1, [r7, #0]
 80050f8:	4798      	blx	r3
      break;
 80050fa:	e065      	b.n	80051c8 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	785b      	ldrb	r3, [r3, #1]
 8005100:	2b0b      	cmp	r3, #11
 8005102:	d84f      	bhi.n	80051a4 <USBD_CDC_Setup+0x148>
 8005104:	a201      	add	r2, pc, #4	; (adr r2, 800510c <USBD_CDC_Setup+0xb0>)
 8005106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510a:	bf00      	nop
 800510c:	0800513d 	.word	0x0800513d
 8005110:	080051b3 	.word	0x080051b3
 8005114:	080051a5 	.word	0x080051a5
 8005118:	080051a5 	.word	0x080051a5
 800511c:	080051a5 	.word	0x080051a5
 8005120:	080051a5 	.word	0x080051a5
 8005124:	080051a5 	.word	0x080051a5
 8005128:	080051a5 	.word	0x080051a5
 800512c:	080051a5 	.word	0x080051a5
 8005130:	080051a5 	.word	0x080051a5
 8005134:	08005165 	.word	0x08005165
 8005138:	0800518d 	.word	0x0800518d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005142:	2b03      	cmp	r3, #3
 8005144:	d107      	bne.n	8005156 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005146:	f107 030c 	add.w	r3, r7, #12
 800514a:	2202      	movs	r2, #2
 800514c:	4619      	mov	r1, r3
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f001 fa13 	bl	800657a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005154:	e030      	b.n	80051b8 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8005156:	6839      	ldr	r1, [r7, #0]
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f001 f99d 	bl	8006498 <USBD_CtlError>
            ret = USBD_FAIL;
 800515e:	2303      	movs	r3, #3
 8005160:	75fb      	strb	r3, [r7, #23]
          break;
 8005162:	e029      	b.n	80051b8 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800516a:	2b03      	cmp	r3, #3
 800516c:	d107      	bne.n	800517e <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800516e:	f107 030f 	add.w	r3, r7, #15
 8005172:	2201      	movs	r2, #1
 8005174:	4619      	mov	r1, r3
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f001 f9ff 	bl	800657a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800517c:	e01c      	b.n	80051b8 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800517e:	6839      	ldr	r1, [r7, #0]
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f001 f989 	bl	8006498 <USBD_CtlError>
            ret = USBD_FAIL;
 8005186:	2303      	movs	r3, #3
 8005188:	75fb      	strb	r3, [r7, #23]
          break;
 800518a:	e015      	b.n	80051b8 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005192:	2b03      	cmp	r3, #3
 8005194:	d00f      	beq.n	80051b6 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8005196:	6839      	ldr	r1, [r7, #0]
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f001 f97d 	bl	8006498 <USBD_CtlError>
            ret = USBD_FAIL;
 800519e:	2303      	movs	r3, #3
 80051a0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80051a2:	e008      	b.n	80051b6 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80051a4:	6839      	ldr	r1, [r7, #0]
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f001 f976 	bl	8006498 <USBD_CtlError>
          ret = USBD_FAIL;
 80051ac:	2303      	movs	r3, #3
 80051ae:	75fb      	strb	r3, [r7, #23]
          break;
 80051b0:	e002      	b.n	80051b8 <USBD_CDC_Setup+0x15c>
          break;
 80051b2:	bf00      	nop
 80051b4:	e008      	b.n	80051c8 <USBD_CDC_Setup+0x16c>
          break;
 80051b6:	bf00      	nop
      }
      break;
 80051b8:	e006      	b.n	80051c8 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 80051ba:	6839      	ldr	r1, [r7, #0]
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f001 f96b 	bl	8006498 <USBD_CtlError>
      ret = USBD_FAIL;
 80051c2:	2303      	movs	r3, #3
 80051c4:	75fb      	strb	r3, [r7, #23]
      break;
 80051c6:	bf00      	nop
  }

  return (uint8_t)ret;
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop

080051d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80051e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e04f      	b.n	8005296 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80051fe:	78fa      	ldrb	r2, [r7, #3]
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	440b      	add	r3, r1
 800520c:	3318      	adds	r3, #24
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d029      	beq.n	8005268 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005214:	78fa      	ldrb	r2, [r7, #3]
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	440b      	add	r3, r1
 8005222:	3318      	adds	r3, #24
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	78f9      	ldrb	r1, [r7, #3]
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	460b      	mov	r3, r1
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	4403      	add	r3, r0
 8005234:	3338      	adds	r3, #56	; 0x38
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	fbb2 f1f3 	udiv	r1, r2, r3
 800523c:	fb03 f301 	mul.w	r3, r3, r1
 8005240:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005242:	2b00      	cmp	r3, #0
 8005244:	d110      	bne.n	8005268 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005246:	78fa      	ldrb	r2, [r7, #3]
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	4613      	mov	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	440b      	add	r3, r1
 8005254:	3318      	adds	r3, #24
 8005256:	2200      	movs	r2, #0
 8005258:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800525a:	78f9      	ldrb	r1, [r7, #3]
 800525c:	2300      	movs	r3, #0
 800525e:	2200      	movs	r2, #0
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f001 fe03 	bl	8006e6c <USBD_LL_Transmit>
 8005266:	e015      	b.n	8005294 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2200      	movs	r2, #0
 800526c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00b      	beq.n	8005294 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005290:	78fa      	ldrb	r2, [r7, #3]
 8005292:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b084      	sub	sp, #16
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	460b      	mov	r3, r1
 80052a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80052bc:	2303      	movs	r3, #3
 80052be:	e015      	b.n	80052ec <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	4619      	mov	r1, r3
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f001 fe13 	bl	8006ef0 <USBD_LL_GetRxDataSize>
 80052ca:	4602      	mov	r2, r0
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80052e6:	4611      	mov	r1, r2
 80052e8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005302:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d015      	beq.n	800533a <USBD_CDC_EP0_RxReady+0x46>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005314:	2bff      	cmp	r3, #255	; 0xff
 8005316:	d010      	beq.n	800533a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005326:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800532e:	b292      	uxth	r2, r2
 8005330:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	22ff      	movs	r2, #255	; 0xff
 8005336:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2243      	movs	r2, #67	; 0x43
 8005350:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005352:	4b03      	ldr	r3, [pc, #12]	; (8005360 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005354:	4618      	mov	r0, r3
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	20000094 	.word	0x20000094

08005364 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2243      	movs	r2, #67	; 0x43
 8005370:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005372:	4b03      	ldr	r3, [pc, #12]	; (8005380 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005374:	4618      	mov	r0, r3
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	20000050 	.word	0x20000050

08005384 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2243      	movs	r2, #67	; 0x43
 8005390:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005392:	4b03      	ldr	r3, [pc, #12]	; (80053a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	200000d8 	.word	0x200000d8

080053a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	220a      	movs	r2, #10
 80053b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80053b2:	4b03      	ldr	r3, [pc, #12]	; (80053c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	2000000c 	.word	0x2000000c

080053c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e004      	b.n	80053e2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b087      	sub	sp, #28
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005400:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	371c      	adds	r7, #28
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005430:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005456:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005462:	2303      	movs	r3, #3
 8005464:	e016      	b.n	8005494 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	7c1b      	ldrb	r3, [r3, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d109      	bne.n	8005482 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005474:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005478:	2101      	movs	r1, #1
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f001 fd17 	bl	8006eae <USBD_LL_PrepareReceive>
 8005480:	e007      	b.n	8005492 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005488:	2340      	movs	r3, #64	; 0x40
 800548a:	2101      	movs	r1, #1
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f001 fd0e 	bl	8006eae <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	4613      	mov	r3, r2
 80054a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e01f      	b.n	80054f4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	79fa      	ldrb	r2, [r7, #7]
 80054e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f001 fb75 	bl	8006bd8 <USBD_LL_Init>
 80054ee:	4603      	mov	r3, r0
 80054f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80054f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005510:	2303      	movs	r3, #3
 8005512:	e016      	b.n	8005542 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00b      	beq.n	8005540 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	f107 020e 	add.w	r2, r7, #14
 8005534:	4610      	mov	r0, r2
 8005536:	4798      	blx	r3
 8005538:	4602      	mov	r2, r0
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f001 fba0 	bl	8006c98 <USBD_LL_Start>
 8005558:	4603      	mov	r3, r0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	460b      	mov	r3, r1
 8005582:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005584:	2303      	movs	r3, #3
 8005586:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800558e:	2b00      	cmp	r3, #0
 8005590:	d009      	beq.n	80055a6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	78fa      	ldrb	r2, [r7, #3]
 800559c:	4611      	mov	r1, r2
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	4798      	blx	r3
 80055a2:	4603      	mov	r3, r0
 80055a4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	460b      	mov	r3, r1
 80055ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	78fa      	ldrb	r2, [r7, #3]
 80055d0:	4611      	mov	r1, r2
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	4798      	blx	r3
  }

  return USBD_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055f0:	6839      	ldr	r1, [r7, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 ff16 	bl	8006424 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005606:	461a      	mov	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005614:	f003 031f 	and.w	r3, r3, #31
 8005618:	2b01      	cmp	r3, #1
 800561a:	d00e      	beq.n	800563a <USBD_LL_SetupStage+0x5a>
 800561c:	2b01      	cmp	r3, #1
 800561e:	d302      	bcc.n	8005626 <USBD_LL_SetupStage+0x46>
 8005620:	2b02      	cmp	r3, #2
 8005622:	d014      	beq.n	800564e <USBD_LL_SetupStage+0x6e>
 8005624:	e01d      	b.n	8005662 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800562c:	4619      	mov	r1, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f9d6 	bl	80059e0 <USBD_StdDevReq>
 8005634:	4603      	mov	r3, r0
 8005636:	73fb      	strb	r3, [r7, #15]
      break;
 8005638:	e020      	b.n	800567c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005640:	4619      	mov	r1, r3
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fa3a 	bl	8005abc <USBD_StdItfReq>
 8005648:	4603      	mov	r3, r0
 800564a:	73fb      	strb	r3, [r7, #15]
      break;
 800564c:	e016      	b.n	800567c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005654:	4619      	mov	r1, r3
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fa76 	bl	8005b48 <USBD_StdEPReq>
 800565c:	4603      	mov	r3, r0
 800565e:	73fb      	strb	r3, [r7, #15]
      break;
 8005660:	e00c      	b.n	800567c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005668:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800566c:	b2db      	uxtb	r3, r3
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f001 fb71 	bl	8006d58 <USBD_LL_StallEP>
 8005676:	4603      	mov	r3, r0
 8005678:	73fb      	strb	r3, [r7, #15]
      break;
 800567a:	bf00      	nop
  }

  return ret;
 800567c:	7bfb      	ldrb	r3, [r7, #15]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b086      	sub	sp, #24
 800568a:	af00      	add	r7, sp, #0
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	460b      	mov	r3, r1
 8005690:	607a      	str	r2, [r7, #4]
 8005692:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005694:	7afb      	ldrb	r3, [r7, #11]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d137      	bne.n	800570a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80056a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d14a      	bne.n	8005742 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d913      	bls.n	80056e0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	1ad2      	subs	r2, r2, r3
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	4293      	cmp	r3, r2
 80056d0:	bf28      	it	cs
 80056d2:	4613      	movcs	r3, r2
 80056d4:	461a      	mov	r2, r3
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 ff97 	bl	800660c <USBD_CtlContinueRx>
 80056de:	e030      	b.n	8005742 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80056f2:	2b03      	cmp	r3, #3
 80056f4:	d105      	bne.n	8005702 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 ff93 	bl	800662e <USBD_CtlSendStatus>
 8005708:	e01b      	b.n	8005742 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d013      	beq.n	800573e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800571c:	2b03      	cmp	r3, #3
 800571e:	d10e      	bne.n	800573e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	7afa      	ldrb	r2, [r7, #11]
 800572a:	4611      	mov	r1, r2
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	4798      	blx	r3
 8005730:	4603      	mov	r3, r0
 8005732:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005734:	7dfb      	ldrb	r3, [r7, #23]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800573a:	7dfb      	ldrb	r3, [r7, #23]
 800573c:	e002      	b.n	8005744 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800573e:	2303      	movs	r3, #3
 8005740:	e000      	b.n	8005744 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	460b      	mov	r3, r1
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800575a:	7afb      	ldrb	r3, [r7, #11]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d16a      	bne.n	8005836 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	3314      	adds	r3, #20
 8005764:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800576c:	2b02      	cmp	r3, #2
 800576e:	d155      	bne.n	800581c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	429a      	cmp	r2, r3
 800577a:	d914      	bls.n	80057a6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	1ad2      	subs	r2, r2, r3
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	461a      	mov	r2, r3
 8005790:	6879      	ldr	r1, [r7, #4]
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 ff0c 	bl	80065b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005798:	2300      	movs	r3, #0
 800579a:	2200      	movs	r2, #0
 800579c:	2100      	movs	r1, #0
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f001 fb85 	bl	8006eae <USBD_LL_PrepareReceive>
 80057a4:	e03a      	b.n	800581c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d11c      	bne.n	80057ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d316      	bcc.n	80057ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d20f      	bcs.n	80057ec <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80057cc:	2200      	movs	r2, #0
 80057ce:	2100      	movs	r1, #0
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 feed 	bl	80065b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057de:	2300      	movs	r3, #0
 80057e0:	2200      	movs	r2, #0
 80057e2:	2100      	movs	r1, #0
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f001 fb62 	bl	8006eae <USBD_LL_PrepareReceive>
 80057ea:	e017      	b.n	800581c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00a      	beq.n	800580e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d105      	bne.n	800580e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800580e:	2180      	movs	r1, #128	; 0x80
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f001 faa1 	bl	8006d58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 ff1c 	bl	8006654 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005822:	2b01      	cmp	r3, #1
 8005824:	d123      	bne.n	800586e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f7ff fe9b 	bl	8005562 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005834:	e01b      	b.n	800586e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d013      	beq.n	800586a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005848:	2b03      	cmp	r3, #3
 800584a:	d10e      	bne.n	800586a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	7afa      	ldrb	r2, [r7, #11]
 8005856:	4611      	mov	r1, r2
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	4798      	blx	r3
 800585c:	4603      	mov	r3, r0
 800585e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005860:	7dfb      	ldrb	r3, [r7, #23]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005866:	7dfb      	ldrb	r3, [r7, #23]
 8005868:	e002      	b.n	8005870 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800586a:	2303      	movs	r3, #3
 800586c:	e000      	b.n	8005870 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d009      	beq.n	80058bc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6852      	ldr	r2, [r2, #4]
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	4611      	mov	r1, r2
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058bc:	2340      	movs	r3, #64	; 0x40
 80058be:	2200      	movs	r2, #0
 80058c0:	2100      	movs	r1, #0
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f001 fa03 	bl	8006cce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2240      	movs	r2, #64	; 0x40
 80058d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058d8:	2340      	movs	r3, #64	; 0x40
 80058da:	2200      	movs	r2, #0
 80058dc:	2180      	movs	r1, #128	; 0x80
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f001 f9f5 	bl	8006cce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2240      	movs	r2, #64	; 0x40
 80058ee:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	460b      	mov	r3, r1
 8005904:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	78fa      	ldrb	r2, [r7, #3]
 800590a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2204      	movs	r2, #4
 8005932:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005952:	2b04      	cmp	r3, #4
 8005954:	d105      	bne.n	8005962 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800597e:	2b03      	cmp	r3, #3
 8005980:	d10b      	bne.n	800599a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d005      	beq.n	800599a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	3301      	adds	r3, #1
 80059ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80059c2:	8a3b      	ldrh	r3, [r7, #16]
 80059c4:	021b      	lsls	r3, r3, #8
 80059c6:	b21a      	sxth	r2, r3
 80059c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	b21b      	sxth	r3, r3
 80059d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80059d2:	89fb      	ldrh	r3, [r7, #14]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d004      	beq.n	8005a04 <USBD_StdDevReq+0x24>
 80059fa:	2b40      	cmp	r3, #64	; 0x40
 80059fc:	d002      	beq.n	8005a04 <USBD_StdDevReq+0x24>
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <USBD_StdDevReq+0x38>
 8005a02:	e050      	b.n	8005aa6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	4798      	blx	r3
 8005a12:	4603      	mov	r3, r0
 8005a14:	73fb      	strb	r3, [r7, #15]
    break;
 8005a16:	e04b      	b.n	8005ab0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	785b      	ldrb	r3, [r3, #1]
 8005a1c:	2b09      	cmp	r3, #9
 8005a1e:	d83c      	bhi.n	8005a9a <USBD_StdDevReq+0xba>
 8005a20:	a201      	add	r2, pc, #4	; (adr r2, 8005a28 <USBD_StdDevReq+0x48>)
 8005a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a26:	bf00      	nop
 8005a28:	08005a7d 	.word	0x08005a7d
 8005a2c:	08005a91 	.word	0x08005a91
 8005a30:	08005a9b 	.word	0x08005a9b
 8005a34:	08005a87 	.word	0x08005a87
 8005a38:	08005a9b 	.word	0x08005a9b
 8005a3c:	08005a5b 	.word	0x08005a5b
 8005a40:	08005a51 	.word	0x08005a51
 8005a44:	08005a9b 	.word	0x08005a9b
 8005a48:	08005a73 	.word	0x08005a73
 8005a4c:	08005a65 	.word	0x08005a65
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005a50:	6839      	ldr	r1, [r7, #0]
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f9d0 	bl	8005df8 <USBD_GetDescriptor>
      break;
 8005a58:	e024      	b.n	8005aa4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005a5a:	6839      	ldr	r1, [r7, #0]
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fb5f 	bl	8006120 <USBD_SetAddress>
      break;
 8005a62:	e01f      	b.n	8005aa4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005a64:	6839      	ldr	r1, [r7, #0]
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fb9c 	bl	80061a4 <USBD_SetConfig>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a70:	e018      	b.n	8005aa4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005a72:	6839      	ldr	r1, [r7, #0]
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fc39 	bl	80062ec <USBD_GetConfig>
      break;
 8005a7a:	e013      	b.n	8005aa4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fc68 	bl	8006354 <USBD_GetStatus>
      break;
 8005a84:	e00e      	b.n	8005aa4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005a86:	6839      	ldr	r1, [r7, #0]
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fc96 	bl	80063ba <USBD_SetFeature>
      break;
 8005a8e:	e009      	b.n	8005aa4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005a90:	6839      	ldr	r1, [r7, #0]
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fca5 	bl	80063e2 <USBD_ClrFeature>
      break;
 8005a98:	e004      	b.n	8005aa4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005a9a:	6839      	ldr	r1, [r7, #0]
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fcfb 	bl	8006498 <USBD_CtlError>
      break;
 8005aa2:	bf00      	nop
    }
    break;
 8005aa4:	e004      	b.n	8005ab0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005aa6:	6839      	ldr	r1, [r7, #0]
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fcf5 	bl	8006498 <USBD_CtlError>
    break;
 8005aae:	bf00      	nop
  }

  return ret;
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop

08005abc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ad2:	2b20      	cmp	r3, #32
 8005ad4:	d003      	beq.n	8005ade <USBD_StdItfReq+0x22>
 8005ad6:	2b40      	cmp	r3, #64	; 0x40
 8005ad8:	d001      	beq.n	8005ade <USBD_StdItfReq+0x22>
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d12a      	bne.n	8005b34 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d81d      	bhi.n	8005b26 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	889b      	ldrh	r3, [r3, #4]
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d813      	bhi.n	8005b1c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	6839      	ldr	r1, [r7, #0]
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	4798      	blx	r3
 8005b02:	4603      	mov	r3, r0
 8005b04:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	88db      	ldrh	r3, [r3, #6]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d110      	bne.n	8005b30 <USBD_StdItfReq+0x74>
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10d      	bne.n	8005b30 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fd8a 	bl	800662e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005b1a:	e009      	b.n	8005b30 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005b1c:	6839      	ldr	r1, [r7, #0]
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fcba 	bl	8006498 <USBD_CtlError>
      break;
 8005b24:	e004      	b.n	8005b30 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fcb5 	bl	8006498 <USBD_CtlError>
      break;
 8005b2e:	e000      	b.n	8005b32 <USBD_StdItfReq+0x76>
      break;
 8005b30:	bf00      	nop
    }
    break;
 8005b32:	e004      	b.n	8005b3e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005b34:	6839      	ldr	r1, [r7, #0]
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fcae 	bl	8006498 <USBD_CtlError>
    break;
 8005b3c:	bf00      	nop
  }

  return ret;
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	889b      	ldrh	r3, [r3, #4]
 8005b5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	d004      	beq.n	8005b72 <USBD_StdEPReq+0x2a>
 8005b68:	2b40      	cmp	r3, #64	; 0x40
 8005b6a:	d002      	beq.n	8005b72 <USBD_StdEPReq+0x2a>
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00a      	beq.n	8005b86 <USBD_StdEPReq+0x3e>
 8005b70:	e137      	b.n	8005de2 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	6839      	ldr	r1, [r7, #0]
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	4798      	blx	r3
 8005b80:	4603      	mov	r3, r0
 8005b82:	73fb      	strb	r3, [r7, #15]
    break;
 8005b84:	e132      	b.n	8005dec <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	785b      	ldrb	r3, [r3, #1]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d03e      	beq.n	8005c0c <USBD_StdEPReq+0xc4>
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d002      	beq.n	8005b98 <USBD_StdEPReq+0x50>
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d079      	beq.n	8005c8a <USBD_StdEPReq+0x142>
 8005b96:	e11e      	b.n	8005dd6 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d002      	beq.n	8005ba8 <USBD_StdEPReq+0x60>
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d015      	beq.n	8005bd2 <USBD_StdEPReq+0x8a>
 8005ba6:	e02b      	b.n	8005c00 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ba8:	7bbb      	ldrb	r3, [r7, #14]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00c      	beq.n	8005bc8 <USBD_StdEPReq+0x80>
 8005bae:	7bbb      	ldrb	r3, [r7, #14]
 8005bb0:	2b80      	cmp	r3, #128	; 0x80
 8005bb2:	d009      	beq.n	8005bc8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005bb4:	7bbb      	ldrb	r3, [r7, #14]
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f001 f8cd 	bl	8006d58 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bbe:	2180      	movs	r1, #128	; 0x80
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f001 f8c9 	bl	8006d58 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005bc6:	e020      	b.n	8005c0a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005bc8:	6839      	ldr	r1, [r7, #0]
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fc64 	bl	8006498 <USBD_CtlError>
        break;
 8005bd0:	e01b      	b.n	8005c0a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	885b      	ldrh	r3, [r3, #2]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10e      	bne.n	8005bf8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005bda:	7bbb      	ldrb	r3, [r7, #14]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00b      	beq.n	8005bf8 <USBD_StdEPReq+0xb0>
 8005be0:	7bbb      	ldrb	r3, [r7, #14]
 8005be2:	2b80      	cmp	r3, #128	; 0x80
 8005be4:	d008      	beq.n	8005bf8 <USBD_StdEPReq+0xb0>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	88db      	ldrh	r3, [r3, #6]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d104      	bne.n	8005bf8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005bee:	7bbb      	ldrb	r3, [r7, #14]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f001 f8b0 	bl	8006d58 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fd18 	bl	800662e <USBD_CtlSendStatus>

        break;
 8005bfe:	e004      	b.n	8005c0a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fc48 	bl	8006498 <USBD_CtlError>
        break;
 8005c08:	bf00      	nop
      }
      break;
 8005c0a:	e0e9      	b.n	8005de0 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d002      	beq.n	8005c1c <USBD_StdEPReq+0xd4>
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	d015      	beq.n	8005c46 <USBD_StdEPReq+0xfe>
 8005c1a:	e02f      	b.n	8005c7c <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c1c:	7bbb      	ldrb	r3, [r7, #14]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00c      	beq.n	8005c3c <USBD_StdEPReq+0xf4>
 8005c22:	7bbb      	ldrb	r3, [r7, #14]
 8005c24:	2b80      	cmp	r3, #128	; 0x80
 8005c26:	d009      	beq.n	8005c3c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c28:	7bbb      	ldrb	r3, [r7, #14]
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f001 f893 	bl	8006d58 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c32:	2180      	movs	r1, #128	; 0x80
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f001 f88f 	bl	8006d58 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005c3a:	e025      	b.n	8005c88 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8005c3c:	6839      	ldr	r1, [r7, #0]
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fc2a 	bl	8006498 <USBD_CtlError>
        break;
 8005c44:	e020      	b.n	8005c88 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	885b      	ldrh	r3, [r3, #2]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d11b      	bne.n	8005c86 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005c4e:	7bbb      	ldrb	r3, [r7, #14]
 8005c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d004      	beq.n	8005c62 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c58:	7bbb      	ldrb	r3, [r7, #14]
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f001 f89a 	bl	8006d96 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fce3 	bl	800662e <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	6839      	ldr	r1, [r7, #0]
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	4798      	blx	r3
 8005c76:	4603      	mov	r3, r0
 8005c78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c7a:	e004      	b.n	8005c86 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8005c7c:	6839      	ldr	r1, [r7, #0]
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fc0a 	bl	8006498 <USBD_CtlError>
        break;
 8005c84:	e000      	b.n	8005c88 <USBD_StdEPReq+0x140>
        break;
 8005c86:	bf00      	nop
      }
      break;
 8005c88:	e0aa      	b.n	8005de0 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d002      	beq.n	8005c9a <USBD_StdEPReq+0x152>
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	d032      	beq.n	8005cfe <USBD_StdEPReq+0x1b6>
 8005c98:	e097      	b.n	8005dca <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c9a:	7bbb      	ldrb	r3, [r7, #14]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d007      	beq.n	8005cb0 <USBD_StdEPReq+0x168>
 8005ca0:	7bbb      	ldrb	r3, [r7, #14]
 8005ca2:	2b80      	cmp	r3, #128	; 0x80
 8005ca4:	d004      	beq.n	8005cb0 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8005ca6:	6839      	ldr	r1, [r7, #0]
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fbf5 	bl	8006498 <USBD_CtlError>
          break;
 8005cae:	e091      	b.n	8005dd4 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	da0b      	bge.n	8005cd0 <USBD_StdEPReq+0x188>
 8005cb8:	7bbb      	ldrb	r3, [r7, #14]
 8005cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	3310      	adds	r3, #16
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	4413      	add	r3, r2
 8005ccc:	3304      	adds	r3, #4
 8005cce:	e00b      	b.n	8005ce8 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005cd0:	7bbb      	ldrb	r3, [r7, #14]
 8005cd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fc3f 	bl	800657a <USBD_CtlSendData>
        break;
 8005cfc:	e06a      	b.n	8005dd4 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005cfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	da11      	bge.n	8005d2a <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005d06:	7bbb      	ldrb	r3, [r7, #14]
 8005d08:	f003 020f 	and.w	r2, r3, #15
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	440b      	add	r3, r1
 8005d18:	3324      	adds	r3, #36	; 0x24
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d117      	bne.n	8005d50 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8005d20:	6839      	ldr	r1, [r7, #0]
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fbb8 	bl	8006498 <USBD_CtlError>
            break;
 8005d28:	e054      	b.n	8005dd4 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005d2a:	7bbb      	ldrb	r3, [r7, #14]
 8005d2c:	f003 020f 	and.w	r2, r3, #15
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	4613      	mov	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	440b      	add	r3, r1
 8005d3c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d104      	bne.n	8005d50 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fba5 	bl	8006498 <USBD_CtlError>
            break;
 8005d4e:	e041      	b.n	8005dd4 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	da0b      	bge.n	8005d70 <USBD_StdEPReq+0x228>
 8005d58:	7bbb      	ldrb	r3, [r7, #14]
 8005d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d5e:	4613      	mov	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	3310      	adds	r3, #16
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	e00b      	b.n	8005d88 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005d70:	7bbb      	ldrb	r3, [r7, #14]
 8005d72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	4413      	add	r3, r2
 8005d86:	3304      	adds	r3, #4
 8005d88:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005d8a:	7bbb      	ldrb	r3, [r7, #14]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <USBD_StdEPReq+0x24e>
 8005d90:	7bbb      	ldrb	r3, [r7, #14]
 8005d92:	2b80      	cmp	r3, #128	; 0x80
 8005d94:	d103      	bne.n	8005d9e <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	e00e      	b.n	8005dbc <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005d9e:	7bbb      	ldrb	r3, [r7, #14]
 8005da0:	4619      	mov	r1, r3
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f001 f816 	bl	8006dd4 <USBD_LL_IsStallEP>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2201      	movs	r2, #1
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	e002      	b.n	8005dbc <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fbd9 	bl	800657a <USBD_CtlSendData>
          break;
 8005dc8:	e004      	b.n	8005dd4 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8005dca:	6839      	ldr	r1, [r7, #0]
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fb63 	bl	8006498 <USBD_CtlError>
        break;
 8005dd2:	bf00      	nop
      }
      break;
 8005dd4:	e004      	b.n	8005de0 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8005dd6:	6839      	ldr	r1, [r7, #0]
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fb5d 	bl	8006498 <USBD_CtlError>
      break;
 8005dde:	bf00      	nop
    }
    break;
 8005de0:	e004      	b.n	8005dec <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8005de2:	6839      	ldr	r1, [r7, #0]
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fb57 	bl	8006498 <USBD_CtlError>
    break;
 8005dea:	bf00      	nop
  }

  return ret;
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
	...

08005df8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	885b      	ldrh	r3, [r3, #2]
 8005e12:	0a1b      	lsrs	r3, r3, #8
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	2b0e      	cmp	r3, #14
 8005e1a:	f200 8152 	bhi.w	80060c2 <USBD_GetDescriptor+0x2ca>
 8005e1e:	a201      	add	r2, pc, #4	; (adr r2, 8005e24 <USBD_GetDescriptor+0x2c>)
 8005e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e24:	08005e95 	.word	0x08005e95
 8005e28:	08005ead 	.word	0x08005ead
 8005e2c:	08005eed 	.word	0x08005eed
 8005e30:	080060c3 	.word	0x080060c3
 8005e34:	080060c3 	.word	0x080060c3
 8005e38:	08006063 	.word	0x08006063
 8005e3c:	0800608f 	.word	0x0800608f
 8005e40:	080060c3 	.word	0x080060c3
 8005e44:	080060c3 	.word	0x080060c3
 8005e48:	080060c3 	.word	0x080060c3
 8005e4c:	080060c3 	.word	0x080060c3
 8005e50:	080060c3 	.word	0x080060c3
 8005e54:	080060c3 	.word	0x080060c3
 8005e58:	080060c3 	.word	0x080060c3
 8005e5c:	08005e61 	.word	0x08005e61
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00b      	beq.n	8005e84 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	7c12      	ldrb	r2, [r2, #16]
 8005e78:	f107 0108 	add.w	r1, r7, #8
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	4798      	blx	r3
 8005e80:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005e82:	e126      	b.n	80060d2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fb06 	bl	8006498 <USBD_CtlError>
      err++;
 8005e8c:	7afb      	ldrb	r3, [r7, #11]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	72fb      	strb	r3, [r7, #11]
    break;
 8005e92:	e11e      	b.n	80060d2 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	7c12      	ldrb	r2, [r2, #16]
 8005ea0:	f107 0108 	add.w	r1, r7, #8
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	4798      	blx	r3
 8005ea8:	60f8      	str	r0, [r7, #12]
    break;
 8005eaa:	e112      	b.n	80060d2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	7c1b      	ldrb	r3, [r3, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10d      	bne.n	8005ed0 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebc:	f107 0208 	add.w	r2, r7, #8
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	4798      	blx	r3
 8005ec4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	2202      	movs	r2, #2
 8005ecc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005ece:	e100      	b.n	80060d2 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	f107 0208 	add.w	r2, r7, #8
 8005edc:	4610      	mov	r0, r2
 8005ede:	4798      	blx	r3
 8005ee0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	701a      	strb	r2, [r3, #0]
    break;
 8005eea:	e0f2      	b.n	80060d2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	885b      	ldrh	r3, [r3, #2]
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b05      	cmp	r3, #5
 8005ef4:	f200 80ac 	bhi.w	8006050 <USBD_GetDescriptor+0x258>
 8005ef8:	a201      	add	r2, pc, #4	; (adr r2, 8005f00 <USBD_GetDescriptor+0x108>)
 8005efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efe:	bf00      	nop
 8005f00:	08005f19 	.word	0x08005f19
 8005f04:	08005f4d 	.word	0x08005f4d
 8005f08:	08005f81 	.word	0x08005f81
 8005f0c:	08005fb5 	.word	0x08005fb5
 8005f10:	08005fe9 	.word	0x08005fe9
 8005f14:	0800601d 	.word	0x0800601d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00b      	beq.n	8005f3c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	7c12      	ldrb	r2, [r2, #16]
 8005f30:	f107 0108 	add.w	r1, r7, #8
 8005f34:	4610      	mov	r0, r2
 8005f36:	4798      	blx	r3
 8005f38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f3a:	e091      	b.n	8006060 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8005f3c:	6839      	ldr	r1, [r7, #0]
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 faaa 	bl	8006498 <USBD_CtlError>
        err++;
 8005f44:	7afb      	ldrb	r3, [r7, #11]
 8005f46:	3301      	adds	r3, #1
 8005f48:	72fb      	strb	r3, [r7, #11]
      break;
 8005f4a:	e089      	b.n	8006060 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00b      	beq.n	8005f70 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	7c12      	ldrb	r2, [r2, #16]
 8005f64:	f107 0108 	add.w	r1, r7, #8
 8005f68:	4610      	mov	r0, r2
 8005f6a:	4798      	blx	r3
 8005f6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f6e:	e077      	b.n	8006060 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8005f70:	6839      	ldr	r1, [r7, #0]
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fa90 	bl	8006498 <USBD_CtlError>
        err++;
 8005f78:	7afb      	ldrb	r3, [r7, #11]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	72fb      	strb	r3, [r7, #11]
      break;
 8005f7e:	e06f      	b.n	8006060 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00b      	beq.n	8005fa4 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	7c12      	ldrb	r2, [r2, #16]
 8005f98:	f107 0108 	add.w	r1, r7, #8
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	4798      	blx	r3
 8005fa0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005fa2:	e05d      	b.n	8006060 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fa76 	bl	8006498 <USBD_CtlError>
        err++;
 8005fac:	7afb      	ldrb	r3, [r7, #11]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	72fb      	strb	r3, [r7, #11]
      break;
 8005fb2:	e055      	b.n	8006060 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00b      	beq.n	8005fd8 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	7c12      	ldrb	r2, [r2, #16]
 8005fcc:	f107 0108 	add.w	r1, r7, #8
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4798      	blx	r3
 8005fd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005fd6:	e043      	b.n	8006060 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fa5c 	bl	8006498 <USBD_CtlError>
        err++;
 8005fe0:	7afb      	ldrb	r3, [r7, #11]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	72fb      	strb	r3, [r7, #11]
      break;
 8005fe6:	e03b      	b.n	8006060 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00b      	beq.n	800600c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	7c12      	ldrb	r2, [r2, #16]
 8006000:	f107 0108 	add.w	r1, r7, #8
 8006004:	4610      	mov	r0, r2
 8006006:	4798      	blx	r3
 8006008:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800600a:	e029      	b.n	8006060 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fa42 	bl	8006498 <USBD_CtlError>
        err++;
 8006014:	7afb      	ldrb	r3, [r7, #11]
 8006016:	3301      	adds	r3, #1
 8006018:	72fb      	strb	r3, [r7, #11]
      break;
 800601a:	e021      	b.n	8006060 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00b      	beq.n	8006040 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	7c12      	ldrb	r2, [r2, #16]
 8006034:	f107 0108 	add.w	r1, r7, #8
 8006038:	4610      	mov	r0, r2
 800603a:	4798      	blx	r3
 800603c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800603e:	e00f      	b.n	8006060 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006040:	6839      	ldr	r1, [r7, #0]
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fa28 	bl	8006498 <USBD_CtlError>
        err++;
 8006048:	7afb      	ldrb	r3, [r7, #11]
 800604a:	3301      	adds	r3, #1
 800604c:	72fb      	strb	r3, [r7, #11]
      break;
 800604e:	e007      	b.n	8006060 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006050:	6839      	ldr	r1, [r7, #0]
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fa20 	bl	8006498 <USBD_CtlError>
      err++;
 8006058:	7afb      	ldrb	r3, [r7, #11]
 800605a:	3301      	adds	r3, #1
 800605c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800605e:	bf00      	nop
    }
    break;
 8006060:	e037      	b.n	80060d2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	7c1b      	ldrb	r3, [r3, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d109      	bne.n	800607e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006072:	f107 0208 	add.w	r2, r7, #8
 8006076:	4610      	mov	r0, r2
 8006078:	4798      	blx	r3
 800607a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800607c:	e029      	b.n	80060d2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800607e:	6839      	ldr	r1, [r7, #0]
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fa09 	bl	8006498 <USBD_CtlError>
      err++;
 8006086:	7afb      	ldrb	r3, [r7, #11]
 8006088:	3301      	adds	r3, #1
 800608a:	72fb      	strb	r3, [r7, #11]
    break;
 800608c:	e021      	b.n	80060d2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	7c1b      	ldrb	r3, [r3, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10d      	bne.n	80060b2 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800609c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609e:	f107 0208 	add.w	r2, r7, #8
 80060a2:	4610      	mov	r0, r2
 80060a4:	4798      	blx	r3
 80060a6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	3301      	adds	r3, #1
 80060ac:	2207      	movs	r2, #7
 80060ae:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80060b0:	e00f      	b.n	80060d2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80060b2:	6839      	ldr	r1, [r7, #0]
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f9ef 	bl	8006498 <USBD_CtlError>
      err++;
 80060ba:	7afb      	ldrb	r3, [r7, #11]
 80060bc:	3301      	adds	r3, #1
 80060be:	72fb      	strb	r3, [r7, #11]
    break;
 80060c0:	e007      	b.n	80060d2 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 80060c2:	6839      	ldr	r1, [r7, #0]
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f9e7 	bl	8006498 <USBD_CtlError>
    err++;
 80060ca:	7afb      	ldrb	r3, [r7, #11]
 80060cc:	3301      	adds	r3, #1
 80060ce:	72fb      	strb	r3, [r7, #11]
    break;
 80060d0:	bf00      	nop
  }

  if (err != 0U)
 80060d2:	7afb      	ldrb	r3, [r7, #11]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d11e      	bne.n	8006116 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	88db      	ldrh	r3, [r3, #6]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d016      	beq.n	800610e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 80060e0:	893b      	ldrh	r3, [r7, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00e      	beq.n	8006104 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	88da      	ldrh	r2, [r3, #6]
 80060ea:	893b      	ldrh	r3, [r7, #8]
 80060ec:	4293      	cmp	r3, r2
 80060ee:	bf28      	it	cs
 80060f0:	4613      	movcs	r3, r2
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80060f6:	893b      	ldrh	r3, [r7, #8]
 80060f8:	461a      	mov	r2, r3
 80060fa:	68f9      	ldr	r1, [r7, #12]
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fa3c 	bl	800657a <USBD_CtlSendData>
 8006102:	e009      	b.n	8006118 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f9c6 	bl	8006498 <USBD_CtlError>
 800610c:	e004      	b.n	8006118 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fa8d 	bl	800662e <USBD_CtlSendStatus>
 8006114:	e000      	b.n	8006118 <USBD_GetDescriptor+0x320>
    return;
 8006116:	bf00      	nop
    }
  }
}
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop

08006120 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	889b      	ldrh	r3, [r3, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d130      	bne.n	8006194 <USBD_SetAddress+0x74>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	88db      	ldrh	r3, [r3, #6]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d12c      	bne.n	8006194 <USBD_SetAddress+0x74>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	885b      	ldrh	r3, [r3, #2]
 800613e:	2b7f      	cmp	r3, #127	; 0x7f
 8006140:	d828      	bhi.n	8006194 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	885b      	ldrh	r3, [r3, #2]
 8006146:	b2db      	uxtb	r3, r3
 8006148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800614c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006154:	2b03      	cmp	r3, #3
 8006156:	d104      	bne.n	8006162 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f99c 	bl	8006498 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006160:	e01c      	b.n	800619c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	7bfa      	ldrb	r2, [r7, #15]
 8006166:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800616a:	7bfb      	ldrb	r3, [r7, #15]
 800616c:	4619      	mov	r1, r3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fe5d 	bl	8006e2e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fa5a 	bl	800662e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800617a:	7bfb      	ldrb	r3, [r7, #15]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d004      	beq.n	800618a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006188:	e008      	b.n	800619c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006192:	e003      	b.n	800619c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006194:	6839      	ldr	r1, [r7, #0]
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f97e 	bl	8006498 <USBD_CtlError>
  }
}
 800619c:	bf00      	nop
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	885b      	ldrh	r3, [r3, #2]
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	4b4b      	ldr	r3, [pc, #300]	; (80062e8 <USBD_SetConfig+0x144>)
 80061ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80061bc:	4b4a      	ldr	r3, [pc, #296]	; (80062e8 <USBD_SetConfig+0x144>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d905      	bls.n	80061d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f966 	bl	8006498 <USBD_CtlError>
    return USBD_FAIL;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e087      	b.n	80062e0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d002      	beq.n	80061e0 <USBD_SetConfig+0x3c>
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d025      	beq.n	800622a <USBD_SetConfig+0x86>
 80061de:	e071      	b.n	80062c4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80061e0:	4b41      	ldr	r3, [pc, #260]	; (80062e8 <USBD_SetConfig+0x144>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01c      	beq.n	8006222 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80061e8:	4b3f      	ldr	r3, [pc, #252]	; (80062e8 <USBD_SetConfig+0x144>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	461a      	mov	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80061f2:	4b3d      	ldr	r3, [pc, #244]	; (80062e8 <USBD_SetConfig+0x144>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	4619      	mov	r1, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7ff f9bd 	bl	8005578 <USBD_SetClassConfig>
 80061fe:	4603      	mov	r3, r0
 8006200:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006202:	7bfb      	ldrb	r3, [r7, #15]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d004      	beq.n	8006212 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f944 	bl	8006498 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006210:	e065      	b.n	80062de <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fa0b 	bl	800662e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2203      	movs	r2, #3
 800621c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006220:	e05d      	b.n	80062de <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fa03 	bl	800662e <USBD_CtlSendStatus>
    break;
 8006228:	e059      	b.n	80062de <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800622a:	4b2f      	ldr	r3, [pc, #188]	; (80062e8 <USBD_SetConfig+0x144>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d112      	bne.n	8006258 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2202      	movs	r2, #2
 8006236:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800623a:	4b2b      	ldr	r3, [pc, #172]	; (80062e8 <USBD_SetConfig+0x144>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006244:	4b28      	ldr	r3, [pc, #160]	; (80062e8 <USBD_SetConfig+0x144>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	4619      	mov	r1, r3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7ff f9b0 	bl	80055b0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f9ec 	bl	800662e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006256:	e042      	b.n	80062de <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006258:	4b23      	ldr	r3, [pc, #140]	; (80062e8 <USBD_SetConfig+0x144>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	461a      	mov	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	429a      	cmp	r2, r3
 8006264:	d02a      	beq.n	80062bc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	b2db      	uxtb	r3, r3
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7ff f99e 	bl	80055b0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006274:	4b1c      	ldr	r3, [pc, #112]	; (80062e8 <USBD_SetConfig+0x144>)
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800627e:	4b1a      	ldr	r3, [pc, #104]	; (80062e8 <USBD_SetConfig+0x144>)
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7ff f977 	bl	8005578 <USBD_SetClassConfig>
 800628a:	4603      	mov	r3, r0
 800628c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800628e:	7bfb      	ldrb	r3, [r7, #15]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00f      	beq.n	80062b4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f8fe 	bl	8006498 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff f983 	bl	80055b0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80062b2:	e014      	b.n	80062de <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f9ba 	bl	800662e <USBD_CtlSendStatus>
    break;
 80062ba:	e010      	b.n	80062de <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f9b6 	bl	800662e <USBD_CtlSendStatus>
    break;
 80062c2:	e00c      	b.n	80062de <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80062c4:	6839      	ldr	r1, [r7, #0]
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f8e6 	bl	8006498 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80062cc:	4b06      	ldr	r3, [pc, #24]	; (80062e8 <USBD_SetConfig+0x144>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	4619      	mov	r1, r3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff f96c 	bl	80055b0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80062d8:	2303      	movs	r3, #3
 80062da:	73fb      	strb	r3, [r7, #15]
    break;
 80062dc:	bf00      	nop
  }

  return ret;
 80062de:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	200001a0 	.word	0x200001a0

080062ec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	88db      	ldrh	r3, [r3, #6]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d004      	beq.n	8006308 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f8c9 	bl	8006498 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006306:	e021      	b.n	800634c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800630e:	2b01      	cmp	r3, #1
 8006310:	db17      	blt.n	8006342 <USBD_GetConfig+0x56>
 8006312:	2b02      	cmp	r3, #2
 8006314:	dd02      	ble.n	800631c <USBD_GetConfig+0x30>
 8006316:	2b03      	cmp	r3, #3
 8006318:	d00b      	beq.n	8006332 <USBD_GetConfig+0x46>
 800631a:	e012      	b.n	8006342 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	3308      	adds	r3, #8
 8006326:	2201      	movs	r2, #1
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f925 	bl	800657a <USBD_CtlSendData>
      break;
 8006330:	e00c      	b.n	800634c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3304      	adds	r3, #4
 8006336:	2201      	movs	r2, #1
 8006338:	4619      	mov	r1, r3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f91d 	bl	800657a <USBD_CtlSendData>
      break;
 8006340:	e004      	b.n	800634c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006342:	6839      	ldr	r1, [r7, #0]
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f8a7 	bl	8006498 <USBD_CtlError>
      break;
 800634a:	bf00      	nop
}
 800634c:	bf00      	nop
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006364:	3b01      	subs	r3, #1
 8006366:	2b02      	cmp	r3, #2
 8006368:	d81e      	bhi.n	80063a8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	88db      	ldrh	r3, [r3, #6]
 800636e:	2b02      	cmp	r3, #2
 8006370:	d004      	beq.n	800637c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f88f 	bl	8006498 <USBD_CtlError>
      break;
 800637a:	e01a      	b.n	80063b2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f043 0202 	orr.w	r2, r3, #2
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	330c      	adds	r3, #12
 800639c:	2202      	movs	r2, #2
 800639e:	4619      	mov	r1, r3
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f8ea 	bl	800657a <USBD_CtlSendData>
    break;
 80063a6:	e004      	b.n	80063b2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80063a8:	6839      	ldr	r1, [r7, #0]
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f874 	bl	8006498 <USBD_CtlError>
    break;
 80063b0:	bf00      	nop
  }
}
 80063b2:	bf00      	nop
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b082      	sub	sp, #8
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	885b      	ldrh	r3, [r3, #2]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d106      	bne.n	80063da <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f92a 	bl	800662e <USBD_CtlSendStatus>
  }
}
 80063da:	bf00      	nop
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b082      	sub	sp, #8
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063f2:	3b01      	subs	r3, #1
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d80b      	bhi.n	8006410 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	885b      	ldrh	r3, [r3, #2]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d10c      	bne.n	800641a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f910 	bl	800662e <USBD_CtlSendStatus>
      }
      break;
 800640e:	e004      	b.n	800641a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f840 	bl	8006498 <USBD_CtlError>
      break;
 8006418:	e000      	b.n	800641c <USBD_ClrFeature+0x3a>
      break;
 800641a:	bf00      	nop
  }
}
 800641c:	bf00      	nop
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	781a      	ldrb	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	3301      	adds	r3, #1
 800643e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	781a      	ldrb	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3301      	adds	r3, #1
 800644c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f7ff faa8 	bl	80059a4 <SWAPBYTE>
 8006454:	4603      	mov	r3, r0
 8006456:	461a      	mov	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3301      	adds	r3, #1
 8006460:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3301      	adds	r3, #1
 8006466:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f7ff fa9b 	bl	80059a4 <SWAPBYTE>
 800646e:	4603      	mov	r3, r0
 8006470:	461a      	mov	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	3301      	adds	r3, #1
 800647a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	3301      	adds	r3, #1
 8006480:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f7ff fa8e 	bl	80059a4 <SWAPBYTE>
 8006488:	4603      	mov	r3, r0
 800648a:	461a      	mov	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	80da      	strh	r2, [r3, #6]
}
 8006490:	bf00      	nop
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80064a2:	2180      	movs	r1, #128	; 0x80
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fc57 	bl	8006d58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80064aa:	2100      	movs	r1, #0
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fc53 	bl	8006d58 <USBD_LL_StallEP>
}
 80064b2:	bf00      	nop
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b086      	sub	sp, #24
 80064be:	af00      	add	r7, sp, #0
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	60b9      	str	r1, [r7, #8]
 80064c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d036      	beq.n	800653e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80064d4:	6938      	ldr	r0, [r7, #16]
 80064d6:	f000 f836 	bl	8006546 <USBD_GetLen>
 80064da:	4603      	mov	r3, r0
 80064dc:	3301      	adds	r3, #1
 80064de:	b29b      	uxth	r3, r3
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	4413      	add	r3, r2
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	7812      	ldrb	r2, [r2, #0]
 80064f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80064f4:	7dfb      	ldrb	r3, [r7, #23]
 80064f6:	3301      	adds	r3, #1
 80064f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80064fa:	7dfb      	ldrb	r3, [r7, #23]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	4413      	add	r3, r2
 8006500:	2203      	movs	r2, #3
 8006502:	701a      	strb	r2, [r3, #0]
  idx++;
 8006504:	7dfb      	ldrb	r3, [r7, #23]
 8006506:	3301      	adds	r3, #1
 8006508:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800650a:	e013      	b.n	8006534 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800650c:	7dfb      	ldrb	r3, [r7, #23]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	4413      	add	r3, r2
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	7812      	ldrb	r2, [r2, #0]
 8006516:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	3301      	adds	r3, #1
 800651c:	613b      	str	r3, [r7, #16]
    idx++;
 800651e:	7dfb      	ldrb	r3, [r7, #23]
 8006520:	3301      	adds	r3, #1
 8006522:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006524:	7dfb      	ldrb	r3, [r7, #23]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	4413      	add	r3, r2
 800652a:	2200      	movs	r2, #0
 800652c:	701a      	strb	r2, [r3, #0]
    idx++;
 800652e:	7dfb      	ldrb	r3, [r7, #23]
 8006530:	3301      	adds	r3, #1
 8006532:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1e7      	bne.n	800650c <USBD_GetString+0x52>
 800653c:	e000      	b.n	8006540 <USBD_GetString+0x86>
    return;
 800653e:	bf00      	nop
  }
}
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006546:	b480      	push	{r7}
 8006548:	b085      	sub	sp, #20
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006556:	e005      	b.n	8006564 <USBD_GetLen+0x1e>
  {
    len++;
 8006558:	7bfb      	ldrb	r3, [r7, #15]
 800655a:	3301      	adds	r3, #1
 800655c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	3301      	adds	r3, #1
 8006562:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1f5      	bne.n	8006558 <USBD_GetLen+0x12>
  }

  return len;
 800656c:	7bfb      	ldrb	r3, [r7, #15]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b084      	sub	sp, #16
 800657e:	af00      	add	r7, sp, #0
 8006580:	60f8      	str	r0, [r7, #12]
 8006582:	60b9      	str	r1, [r7, #8]
 8006584:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2202      	movs	r2, #2
 800658a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	2100      	movs	r1, #0
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 fc63 	bl	8006e6c <USBD_LL_Transmit>

  return USBD_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	2100      	movs	r1, #0
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 fc52 	bl	8006e6c <USBD_LL_Transmit>

  return USBD_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b084      	sub	sp, #16
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	60f8      	str	r0, [r7, #12]
 80065da:	60b9      	str	r1, [r7, #8]
 80065dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2203      	movs	r2, #3
 80065e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	2100      	movs	r1, #0
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 fc56 	bl	8006eae <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	2100      	movs	r1, #0
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 fc45 	bl	8006eae <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2204      	movs	r2, #4
 800663a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800663e:	2300      	movs	r3, #0
 8006640:	2200      	movs	r2, #0
 8006642:	2100      	movs	r1, #0
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fc11 	bl	8006e6c <USBD_LL_Transmit>

  return USBD_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2205      	movs	r2, #5
 8006660:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006664:	2300      	movs	r3, #0
 8006666:	2200      	movs	r2, #0
 8006668:	2100      	movs	r1, #0
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fc1f 	bl	8006eae <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
	...

0800667c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8006680:	2200      	movs	r2, #0
 8006682:	4912      	ldr	r1, [pc, #72]	; (80066cc <MX_USB_Device_Init+0x50>)
 8006684:	4812      	ldr	r0, [pc, #72]	; (80066d0 <MX_USB_Device_Init+0x54>)
 8006686:	f7fe ff09 	bl	800549c <USBD_Init>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8006690:	f7f9 fe4e 	bl	8000330 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8006694:	490f      	ldr	r1, [pc, #60]	; (80066d4 <MX_USB_Device_Init+0x58>)
 8006696:	480e      	ldr	r0, [pc, #56]	; (80066d0 <MX_USB_Device_Init+0x54>)
 8006698:	f7fe ff30 	bl	80054fc <USBD_RegisterClass>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80066a2:	f7f9 fe45 	bl	8000330 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80066a6:	490c      	ldr	r1, [pc, #48]	; (80066d8 <MX_USB_Device_Init+0x5c>)
 80066a8:	4809      	ldr	r0, [pc, #36]	; (80066d0 <MX_USB_Device_Init+0x54>)
 80066aa:	f7fe fe8b 	bl	80053c4 <USBD_CDC_RegisterInterface>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80066b4:	f7f9 fe3c 	bl	8000330 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80066b8:	4805      	ldr	r0, [pc, #20]	; (80066d0 <MX_USB_Device_Init+0x54>)
 80066ba:	f7fe ff46 	bl	800554a <USBD_Start>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80066c4:	f7f9 fe34 	bl	8000330 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80066c8:	bf00      	nop
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	20000130 	.word	0x20000130
 80066d0:	200003c8 	.word	0x200003c8
 80066d4:	20000018 	.word	0x20000018
 80066d8:	2000011c 	.word	0x2000011c

080066dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80066e0:	2200      	movs	r2, #0
 80066e2:	4905      	ldr	r1, [pc, #20]	; (80066f8 <CDC_Init_FS+0x1c>)
 80066e4:	4805      	ldr	r0, [pc, #20]	; (80066fc <CDC_Init_FS+0x20>)
 80066e6:	f7fe fe82 	bl	80053ee <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80066ea:	4905      	ldr	r1, [pc, #20]	; (8006700 <CDC_Init_FS+0x24>)
 80066ec:	4803      	ldr	r0, [pc, #12]	; (80066fc <CDC_Init_FS+0x20>)
 80066ee:	f7fe fe97 	bl	8005420 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80066f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	20000a80 	.word	0x20000a80
 80066fc:	200003c8 	.word	0x200003c8
 8006700:	20000698 	.word	0x20000698

08006704 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006704:	b480      	push	{r7}
 8006706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006708:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800670a:	4618      	mov	r0, r3
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	6039      	str	r1, [r7, #0]
 800671e:	71fb      	strb	r3, [r7, #7]
 8006720:	4613      	mov	r3, r2
 8006722:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006724:	79fb      	ldrb	r3, [r7, #7]
 8006726:	2b23      	cmp	r3, #35	; 0x23
 8006728:	d84a      	bhi.n	80067c0 <CDC_Control_FS+0xac>
 800672a:	a201      	add	r2, pc, #4	; (adr r2, 8006730 <CDC_Control_FS+0x1c>)
 800672c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006730:	080067c1 	.word	0x080067c1
 8006734:	080067c1 	.word	0x080067c1
 8006738:	080067c1 	.word	0x080067c1
 800673c:	080067c1 	.word	0x080067c1
 8006740:	080067c1 	.word	0x080067c1
 8006744:	080067c1 	.word	0x080067c1
 8006748:	080067c1 	.word	0x080067c1
 800674c:	080067c1 	.word	0x080067c1
 8006750:	080067c1 	.word	0x080067c1
 8006754:	080067c1 	.word	0x080067c1
 8006758:	080067c1 	.word	0x080067c1
 800675c:	080067c1 	.word	0x080067c1
 8006760:	080067c1 	.word	0x080067c1
 8006764:	080067c1 	.word	0x080067c1
 8006768:	080067c1 	.word	0x080067c1
 800676c:	080067c1 	.word	0x080067c1
 8006770:	080067c1 	.word	0x080067c1
 8006774:	080067c1 	.word	0x080067c1
 8006778:	080067c1 	.word	0x080067c1
 800677c:	080067c1 	.word	0x080067c1
 8006780:	080067c1 	.word	0x080067c1
 8006784:	080067c1 	.word	0x080067c1
 8006788:	080067c1 	.word	0x080067c1
 800678c:	080067c1 	.word	0x080067c1
 8006790:	080067c1 	.word	0x080067c1
 8006794:	080067c1 	.word	0x080067c1
 8006798:	080067c1 	.word	0x080067c1
 800679c:	080067c1 	.word	0x080067c1
 80067a0:	080067c1 	.word	0x080067c1
 80067a4:	080067c1 	.word	0x080067c1
 80067a8:	080067c1 	.word	0x080067c1
 80067ac:	080067c1 	.word	0x080067c1
 80067b0:	080067c1 	.word	0x080067c1
 80067b4:	080067c1 	.word	0x080067c1
 80067b8:	080067c1 	.word	0x080067c1
 80067bc:	080067c1 	.word	0x080067c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80067c0:	bf00      	nop
  }

  return (USBD_OK);
 80067c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80067da:	6879      	ldr	r1, [r7, #4]
 80067dc:	4805      	ldr	r0, [pc, #20]	; (80067f4 <CDC_Receive_FS+0x24>)
 80067de:	f7fe fe1f 	bl	8005420 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80067e2:	4804      	ldr	r0, [pc, #16]	; (80067f4 <CDC_Receive_FS+0x24>)
 80067e4:	f7fe fe30 	bl	8005448 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80067e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	200003c8 	.word	0x200003c8

080067f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	4613      	mov	r3, r2
 8006804:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800680a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800680e:	4618      	mov	r0, r3
 8006810:	371c      	adds	r7, #28
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
	...

0800681c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	4603      	mov	r3, r0
 8006824:	6039      	str	r1, [r7, #0]
 8006826:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	2212      	movs	r2, #18
 800682c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800682e:	4b03      	ldr	r3, [pc, #12]	; (800683c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8006830:	4618      	mov	r0, r3
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	20000150 	.word	0x20000150

08006840 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	4603      	mov	r3, r0
 8006848:	6039      	str	r1, [r7, #0]
 800684a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2204      	movs	r2, #4
 8006850:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006852:	4b03      	ldr	r3, [pc, #12]	; (8006860 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8006854:	4618      	mov	r0, r3
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	20000164 	.word	0x20000164

08006864 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	4603      	mov	r3, r0
 800686c:	6039      	str	r1, [r7, #0]
 800686e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006870:	79fb      	ldrb	r3, [r7, #7]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d105      	bne.n	8006882 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	4907      	ldr	r1, [pc, #28]	; (8006898 <USBD_CDC_ProductStrDescriptor+0x34>)
 800687a:	4808      	ldr	r0, [pc, #32]	; (800689c <USBD_CDC_ProductStrDescriptor+0x38>)
 800687c:	f7ff fe1d 	bl	80064ba <USBD_GetString>
 8006880:	e004      	b.n	800688c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	4904      	ldr	r1, [pc, #16]	; (8006898 <USBD_CDC_ProductStrDescriptor+0x34>)
 8006886:	4805      	ldr	r0, [pc, #20]	; (800689c <USBD_CDC_ProductStrDescriptor+0x38>)
 8006888:	f7ff fe17 	bl	80064ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800688c:	4b02      	ldr	r3, [pc, #8]	; (8006898 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20000e68 	.word	0x20000e68
 800689c:	08007088 	.word	0x08007088

080068a0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	4603      	mov	r3, r0
 80068a8:	6039      	str	r1, [r7, #0]
 80068aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	4904      	ldr	r1, [pc, #16]	; (80068c0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80068b0:	4804      	ldr	r0, [pc, #16]	; (80068c4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80068b2:	f7ff fe02 	bl	80064ba <USBD_GetString>
  return USBD_StrDesc;
 80068b6:	4b02      	ldr	r3, [pc, #8]	; (80068c0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	20000e68 	.word	0x20000e68
 80068c4:	080070a0 	.word	0x080070a0

080068c8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	4603      	mov	r3, r0
 80068d0:	6039      	str	r1, [r7, #0]
 80068d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	221a      	movs	r2, #26
 80068d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80068da:	f000 f843 	bl	8006964 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80068de:	4b02      	ldr	r3, [pc, #8]	; (80068e8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	20000168 	.word	0x20000168

080068ec <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	4603      	mov	r3, r0
 80068f4:	6039      	str	r1, [r7, #0]
 80068f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80068f8:	79fb      	ldrb	r3, [r7, #7]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d105      	bne.n	800690a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	4907      	ldr	r1, [pc, #28]	; (8006920 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8006902:	4808      	ldr	r0, [pc, #32]	; (8006924 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8006904:	f7ff fdd9 	bl	80064ba <USBD_GetString>
 8006908:	e004      	b.n	8006914 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	4904      	ldr	r1, [pc, #16]	; (8006920 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800690e:	4805      	ldr	r0, [pc, #20]	; (8006924 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8006910:	f7ff fdd3 	bl	80064ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8006914:	4b02      	ldr	r3, [pc, #8]	; (8006920 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20000e68 	.word	0x20000e68
 8006924:	080070b4 	.word	0x080070b4

08006928 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	4603      	mov	r3, r0
 8006930:	6039      	str	r1, [r7, #0]
 8006932:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006934:	79fb      	ldrb	r3, [r7, #7]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d105      	bne.n	8006946 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	4907      	ldr	r1, [pc, #28]	; (800695c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800693e:	4808      	ldr	r0, [pc, #32]	; (8006960 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8006940:	f7ff fdbb 	bl	80064ba <USBD_GetString>
 8006944:	e004      	b.n	8006950 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	4904      	ldr	r1, [pc, #16]	; (800695c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800694a:	4805      	ldr	r0, [pc, #20]	; (8006960 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800694c:	f7ff fdb5 	bl	80064ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8006950:	4b02      	ldr	r3, [pc, #8]	; (800695c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8006952:	4618      	mov	r0, r3
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20000e68 	.word	0x20000e68
 8006960:	080070c0 	.word	0x080070c0

08006964 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800696a:	4b0f      	ldr	r3, [pc, #60]	; (80069a8 <Get_SerialNum+0x44>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006970:	4b0e      	ldr	r3, [pc, #56]	; (80069ac <Get_SerialNum+0x48>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006976:	4b0e      	ldr	r3, [pc, #56]	; (80069b0 <Get_SerialNum+0x4c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4413      	add	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d009      	beq.n	800699e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800698a:	2208      	movs	r2, #8
 800698c:	4909      	ldr	r1, [pc, #36]	; (80069b4 <Get_SerialNum+0x50>)
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 f814 	bl	80069bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006994:	2204      	movs	r2, #4
 8006996:	4908      	ldr	r1, [pc, #32]	; (80069b8 <Get_SerialNum+0x54>)
 8006998:	68b8      	ldr	r0, [r7, #8]
 800699a:	f000 f80f 	bl	80069bc <IntToUnicode>
  }
}
 800699e:	bf00      	nop
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	1fff7590 	.word	0x1fff7590
 80069ac:	1fff7594 	.word	0x1fff7594
 80069b0:	1fff7598 	.word	0x1fff7598
 80069b4:	2000016a 	.word	0x2000016a
 80069b8:	2000017a 	.word	0x2000017a

080069bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	4613      	mov	r3, r2
 80069c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80069ce:	2300      	movs	r3, #0
 80069d0:	75fb      	strb	r3, [r7, #23]
 80069d2:	e027      	b.n	8006a24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	0f1b      	lsrs	r3, r3, #28
 80069d8:	2b09      	cmp	r3, #9
 80069da:	d80b      	bhi.n	80069f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	0f1b      	lsrs	r3, r3, #28
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	7dfb      	ldrb	r3, [r7, #23]
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	4619      	mov	r1, r3
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	440b      	add	r3, r1
 80069ec:	3230      	adds	r2, #48	; 0x30
 80069ee:	b2d2      	uxtb	r2, r2
 80069f0:	701a      	strb	r2, [r3, #0]
 80069f2:	e00a      	b.n	8006a0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	0f1b      	lsrs	r3, r3, #28
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	7dfb      	ldrb	r3, [r7, #23]
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	4619      	mov	r1, r3
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	440b      	add	r3, r1
 8006a04:	3237      	adds	r2, #55	; 0x37
 8006a06:	b2d2      	uxtb	r2, r2
 8006a08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	011b      	lsls	r3, r3, #4
 8006a0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006a10:	7dfb      	ldrb	r3, [r7, #23]
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	3301      	adds	r3, #1
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	4413      	add	r3, r2
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006a1e:	7dfb      	ldrb	r3, [r7, #23]
 8006a20:	3301      	adds	r3, #1
 8006a22:	75fb      	strb	r3, [r7, #23]
 8006a24:	7dfa      	ldrb	r2, [r7, #23]
 8006a26:	79fb      	ldrb	r3, [r7, #7]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d3d3      	bcc.n	80069d4 <IntToUnicode+0x18>
  }
}
 8006a2c:	bf00      	nop
 8006a2e:	371c      	adds	r7, #28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a0d      	ldr	r2, [pc, #52]	; (8006a7c <HAL_PCD_MspInit+0x44>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d113      	bne.n	8006a72 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006a4a:	4b0d      	ldr	r3, [pc, #52]	; (8006a80 <HAL_PCD_MspInit+0x48>)
 8006a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4e:	4a0c      	ldr	r2, [pc, #48]	; (8006a80 <HAL_PCD_MspInit+0x48>)
 8006a50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a54:	6593      	str	r3, [r2, #88]	; 0x58
 8006a56:	4b0a      	ldr	r3, [pc, #40]	; (8006a80 <HAL_PCD_MspInit+0x48>)
 8006a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8006a62:	2200      	movs	r2, #0
 8006a64:	2100      	movs	r1, #0
 8006a66:	2014      	movs	r0, #20
 8006a68:	f7f9 fe51 	bl	800070e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8006a6c:	2014      	movs	r0, #20
 8006a6e:	f7f9 fe68 	bl	8000742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006a72:	bf00      	nop
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	40005c00 	.word	0x40005c00
 8006a80:	40021000 	.word	0x40021000

08006a84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	f7fe fda0 	bl	80055e0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8006aa0:	bf00      	nop
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8006aba:	78fa      	ldrb	r2, [r7, #3]
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	00db      	lsls	r3, r3, #3
 8006ac6:	440b      	add	r3, r1
 8006ac8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	78fb      	ldrb	r3, [r7, #3]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	f7fe fdd8 	bl	8005686 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8006ad6:	bf00      	nop
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b082      	sub	sp, #8
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8006af0:	78fa      	ldrb	r2, [r7, #3]
 8006af2:	6879      	ldr	r1, [r7, #4]
 8006af4:	4613      	mov	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	440b      	add	r3, r1
 8006afe:	333c      	adds	r3, #60	; 0x3c
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	78fb      	ldrb	r3, [r7, #3]
 8006b04:	4619      	mov	r1, r3
 8006b06:	f7fe fe21 	bl	800574c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8006b0a:	bf00      	nop
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b082      	sub	sp, #8
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fe ff25 	bl	8005970 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8006b26:	bf00      	nop
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006b36:	2301      	movs	r3, #1
 8006b38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d001      	beq.n	8006b46 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006b42:	f7f9 fbf5 	bl	8000330 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8006b4c:	7bfa      	ldrb	r2, [r7, #15]
 8006b4e:	4611      	mov	r1, r2
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7fe fed2 	bl	80058fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fe fe8b 	bl	8005878 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8006b62:	bf00      	nop
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
	...

08006b6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fe fecd 	bl	800591a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d005      	beq.n	8006b94 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006b88:	4b04      	ldr	r3, [pc, #16]	; (8006b9c <HAL_PCD_SuspendCallback+0x30>)
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	4a03      	ldr	r2, [pc, #12]	; (8006b9c <HAL_PCD_SuspendCallback+0x30>)
 8006b8e:	f043 0306 	orr.w	r3, r3, #6
 8006b92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8006b94:	bf00      	nop
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	e000ed00 	.word	0xe000ed00

08006ba0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d007      	beq.n	8006bc0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006bb0:	4b08      	ldr	r3, [pc, #32]	; (8006bd4 <HAL_PCD_ResumeCallback+0x34>)
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	4a07      	ldr	r2, [pc, #28]	; (8006bd4 <HAL_PCD_ResumeCallback+0x34>)
 8006bb6:	f023 0306 	bic.w	r3, r3, #6
 8006bba:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006bbc:	f000 f9fa 	bl	8006fb4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe febc 	bl	8005944 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8006bcc:	bf00      	nop
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	e000ed00 	.word	0xe000ed00

08006bd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8006be0:	4a2b      	ldr	r2, [pc, #172]	; (8006c90 <USBD_LL_Init+0xb8>)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a29      	ldr	r2, [pc, #164]	; (8006c90 <USBD_LL_Init+0xb8>)
 8006bec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8006bf0:	4b27      	ldr	r3, [pc, #156]	; (8006c90 <USBD_LL_Init+0xb8>)
 8006bf2:	4a28      	ldr	r2, [pc, #160]	; (8006c94 <USBD_LL_Init+0xbc>)
 8006bf4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006bf6:	4b26      	ldr	r3, [pc, #152]	; (8006c90 <USBD_LL_Init+0xb8>)
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006bfc:	4b24      	ldr	r3, [pc, #144]	; (8006c90 <USBD_LL_Init+0xb8>)
 8006bfe:	2202      	movs	r2, #2
 8006c00:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006c02:	4b23      	ldr	r3, [pc, #140]	; (8006c90 <USBD_LL_Init+0xb8>)
 8006c04:	2202      	movs	r2, #2
 8006c06:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8006c08:	4b21      	ldr	r3, [pc, #132]	; (8006c90 <USBD_LL_Init+0xb8>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006c0e:	4b20      	ldr	r3, [pc, #128]	; (8006c90 <USBD_LL_Init+0xb8>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006c14:	4b1e      	ldr	r3, [pc, #120]	; (8006c90 <USBD_LL_Init+0xb8>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006c1a:	4b1d      	ldr	r3, [pc, #116]	; (8006c90 <USBD_LL_Init+0xb8>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006c20:	481b      	ldr	r0, [pc, #108]	; (8006c90 <USBD_LL_Init+0xb8>)
 8006c22:	f7f9 fda8 	bl	8000776 <HAL_PCD_Init>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8006c2c:	f7f9 fb80 	bl	8000330 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006c36:	2318      	movs	r3, #24
 8006c38:	2200      	movs	r2, #0
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	f7fb f896 	bl	8001d6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006c46:	2358      	movs	r3, #88	; 0x58
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2180      	movs	r1, #128	; 0x80
 8006c4c:	f7fb f88e 	bl	8001d6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006c56:	23c0      	movs	r3, #192	; 0xc0
 8006c58:	2200      	movs	r2, #0
 8006c5a:	2181      	movs	r1, #129	; 0x81
 8006c5c:	f7fb f886 	bl	8001d6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006c66:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	f7fb f87d 	bl	8001d6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2182      	movs	r1, #130	; 0x82
 8006c80:	f7fb f874 	bl	8001d6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	20001068 	.word	0x20001068
 8006c94:	40005c00 	.word	0x40005c00

08006c98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7f9 fe46 	bl	8000940 <HAL_PCD_Start>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 f980 	bl	8006fc0 <USBD_Get_USB_Status>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	4608      	mov	r0, r1
 8006cd8:	4611      	mov	r1, r2
 8006cda:	461a      	mov	r2, r3
 8006cdc:	4603      	mov	r3, r0
 8006cde:	70fb      	strb	r3, [r7, #3]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	70bb      	strb	r3, [r7, #2]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cec:	2300      	movs	r3, #0
 8006cee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006cf6:	78bb      	ldrb	r3, [r7, #2]
 8006cf8:	883a      	ldrh	r2, [r7, #0]
 8006cfa:	78f9      	ldrb	r1, [r7, #3]
 8006cfc:	f7f9 ffb5 	bl	8000c6a <HAL_PCD_EP_Open>
 8006d00:	4603      	mov	r3, r0
 8006d02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 f95a 	bl	8006fc0 <USBD_Get_USB_Status>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d10:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	460b      	mov	r3, r1
 8006d24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d34:	78fa      	ldrb	r2, [r7, #3]
 8006d36:	4611      	mov	r1, r2
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7f9 fffc 	bl	8000d36 <HAL_PCD_EP_Close>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 f93b 	bl	8006fc0 <USBD_Get_USB_Status>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	460b      	mov	r3, r1
 8006d62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d72:	78fa      	ldrb	r2, [r7, #3]
 8006d74:	4611      	mov	r1, r2
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7fa f8bd 	bl	8000ef6 <HAL_PCD_EP_SetStall>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 f91c 	bl	8006fc0 <USBD_Get_USB_Status>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b084      	sub	sp, #16
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	460b      	mov	r3, r1
 8006da0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006db0:	78fa      	ldrb	r2, [r7, #3]
 8006db2:	4611      	mov	r1, r2
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fa f8fe 	bl	8000fb6 <HAL_PCD_EP_ClrStall>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 f8fd 	bl	8006fc0 <USBD_Get_USB_Status>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dca:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006de6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	da0c      	bge.n	8006e0a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006df0:	78fb      	ldrb	r3, [r7, #3]
 8006df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006df6:	68f9      	ldr	r1, [r7, #12]
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	00db      	lsls	r3, r3, #3
 8006e02:	440b      	add	r3, r1
 8006e04:	3302      	adds	r3, #2
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	e00b      	b.n	8006e22 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006e0a:	78fb      	ldrb	r3, [r7, #3]
 8006e0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e10:	68f9      	ldr	r1, [r7, #12]
 8006e12:	4613      	mov	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4413      	add	r3, r2
 8006e18:	00db      	lsls	r3, r3, #3
 8006e1a:	440b      	add	r3, r1
 8006e1c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8006e20:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b084      	sub	sp, #16
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	460b      	mov	r3, r1
 8006e38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e48:	78fa      	ldrb	r2, [r7, #3]
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7f9 fee7 	bl	8000c20 <HAL_PCD_SetAddress>
 8006e52:	4603      	mov	r3, r0
 8006e54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 f8b1 	bl	8006fc0 <USBD_Get_USB_Status>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	607a      	str	r2, [r7, #4]
 8006e76:	603b      	str	r3, [r7, #0]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e80:	2300      	movs	r3, #0
 8006e82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006e8a:	7af9      	ldrb	r1, [r7, #11]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	f7f9 ffee 	bl	8000e70 <HAL_PCD_EP_Transmit>
 8006e94:	4603      	mov	r3, r0
 8006e96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e98:	7dfb      	ldrb	r3, [r7, #23]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 f890 	bl	8006fc0 <USBD_Get_USB_Status>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006ea4:	7dbb      	ldrb	r3, [r7, #22]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b086      	sub	sp, #24
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
 8006eba:	460b      	mov	r3, r1
 8006ebc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006ecc:	7af9      	ldrb	r1, [r7, #11]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	f7f9 ff78 	bl	8000dc6 <HAL_PCD_EP_Receive>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 f86f 	bl	8006fc0 <USBD_Get_USB_Status>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006ee6:	7dbb      	ldrb	r3, [r7, #22]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3718      	adds	r7, #24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f02:	78fa      	ldrb	r2, [r7, #3]
 8006f04:	4611      	mov	r1, r2
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7f9 ff9a 	bl	8000e40 <HAL_PCD_EP_GetRxCount>
 8006f0c:	4603      	mov	r3, r0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
	...

08006f18 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	460b      	mov	r3, r1
 8006f22:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8006f24:	78fb      	ldrb	r3, [r7, #3]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <HAL_PCDEx_LPM_Callback+0x18>
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d013      	beq.n	8006f56 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8006f2e:	e023      	b.n	8006f78 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d007      	beq.n	8006f48 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8006f38:	f000 f83c 	bl	8006fb4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f3c:	4b10      	ldr	r3, [pc, #64]	; (8006f80 <HAL_PCDEx_LPM_Callback+0x68>)
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	4a0f      	ldr	r2, [pc, #60]	; (8006f80 <HAL_PCDEx_LPM_Callback+0x68>)
 8006f42:	f023 0306 	bic.w	r3, r3, #6
 8006f46:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fe fcf8 	bl	8005944 <USBD_LL_Resume>
    break;
 8006f54:	e010      	b.n	8006f78 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fe fcdc 	bl	800591a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d005      	beq.n	8006f76 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f6a:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <HAL_PCDEx_LPM_Callback+0x68>)
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	4a04      	ldr	r2, [pc, #16]	; (8006f80 <HAL_PCDEx_LPM_Callback+0x68>)
 8006f70:	f043 0306 	orr.w	r3, r3, #6
 8006f74:	6113      	str	r3, [r2, #16]
    break;
 8006f76:	bf00      	nop
}
 8006f78:	bf00      	nop
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	e000ed00 	.word	0xe000ed00

08006f84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006f8c:	4b03      	ldr	r3, [pc, #12]	; (8006f9c <USBD_static_malloc+0x18>)
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	200001a4 	.word	0x200001a4

08006fa0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]

}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8006fb8:	f7f9 f939 	bl	800022e <SystemClock_Config>
}
 8006fbc:	bf00      	nop
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006fce:	79fb      	ldrb	r3, [r7, #7]
 8006fd0:	2b03      	cmp	r3, #3
 8006fd2:	d817      	bhi.n	8007004 <USBD_Get_USB_Status+0x44>
 8006fd4:	a201      	add	r2, pc, #4	; (adr r2, 8006fdc <USBD_Get_USB_Status+0x1c>)
 8006fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fda:	bf00      	nop
 8006fdc:	08006fed 	.word	0x08006fed
 8006fe0:	08006ff3 	.word	0x08006ff3
 8006fe4:	08006ff9 	.word	0x08006ff9
 8006fe8:	08006fff 	.word	0x08006fff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	73fb      	strb	r3, [r7, #15]
    break;
 8006ff0:	e00b      	b.n	800700a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	73fb      	strb	r3, [r7, #15]
    break;
 8006ff6:	e008      	b.n	800700a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	73fb      	strb	r3, [r7, #15]
    break;
 8006ffc:	e005      	b.n	800700a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ffe:	2303      	movs	r3, #3
 8007000:	73fb      	strb	r3, [r7, #15]
    break;
 8007002:	e002      	b.n	800700a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007004:	2303      	movs	r3, #3
 8007006:	73fb      	strb	r3, [r7, #15]
    break;
 8007008:	bf00      	nop
  }
  return usb_status;
 800700a:	7bfb      	ldrb	r3, [r7, #15]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <__libc_init_array>:
 8007018:	b570      	push	{r4, r5, r6, lr}
 800701a:	4e0d      	ldr	r6, [pc, #52]	; (8007050 <__libc_init_array+0x38>)
 800701c:	4c0d      	ldr	r4, [pc, #52]	; (8007054 <__libc_init_array+0x3c>)
 800701e:	1ba4      	subs	r4, r4, r6
 8007020:	10a4      	asrs	r4, r4, #2
 8007022:	2500      	movs	r5, #0
 8007024:	42a5      	cmp	r5, r4
 8007026:	d109      	bne.n	800703c <__libc_init_array+0x24>
 8007028:	4e0b      	ldr	r6, [pc, #44]	; (8007058 <__libc_init_array+0x40>)
 800702a:	4c0c      	ldr	r4, [pc, #48]	; (800705c <__libc_init_array+0x44>)
 800702c:	f000 f820 	bl	8007070 <_init>
 8007030:	1ba4      	subs	r4, r4, r6
 8007032:	10a4      	asrs	r4, r4, #2
 8007034:	2500      	movs	r5, #0
 8007036:	42a5      	cmp	r5, r4
 8007038:	d105      	bne.n	8007046 <__libc_init_array+0x2e>
 800703a:	bd70      	pop	{r4, r5, r6, pc}
 800703c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007040:	4798      	blx	r3
 8007042:	3501      	adds	r5, #1
 8007044:	e7ee      	b.n	8007024 <__libc_init_array+0xc>
 8007046:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800704a:	4798      	blx	r3
 800704c:	3501      	adds	r5, #1
 800704e:	e7f2      	b.n	8007036 <__libc_init_array+0x1e>
 8007050:	080070e0 	.word	0x080070e0
 8007054:	080070e0 	.word	0x080070e0
 8007058:	080070e0 	.word	0x080070e0
 800705c:	080070e4 	.word	0x080070e4

08007060 <memset>:
 8007060:	4402      	add	r2, r0
 8007062:	4603      	mov	r3, r0
 8007064:	4293      	cmp	r3, r2
 8007066:	d100      	bne.n	800706a <memset+0xa>
 8007068:	4770      	bx	lr
 800706a:	f803 1b01 	strb.w	r1, [r3], #1
 800706e:	e7f9      	b.n	8007064 <memset+0x4>

08007070 <_init>:
 8007070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007072:	bf00      	nop
 8007074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007076:	bc08      	pop	{r3}
 8007078:	469e      	mov	lr, r3
 800707a:	4770      	bx	lr

0800707c <_fini>:
 800707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707e:	bf00      	nop
 8007080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007082:	bc08      	pop	{r3}
 8007084:	469e      	mov	lr, r3
 8007086:	4770      	bx	lr
