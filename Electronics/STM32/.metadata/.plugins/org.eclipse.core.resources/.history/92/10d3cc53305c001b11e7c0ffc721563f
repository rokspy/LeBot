/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef struct wheel_motor{
	uint16_t prev_enc;
	float speed;
	int16_t prev_err;
	int8_t direction;		// 0 is forwards, 1 is backwards
	uint16_t enc_val;
	int16_t integration;
	float USB_value;
}wheel_motor;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim15;
DMA_HandleTypeDef hdma_tim15_ch1;

/* USER CODE BEGIN PV */
wheel_motor motors[3];
float timer_s = 0.1;
uint16_t enc_offset = 5000;


uint16_t dma_buf[25]={0};

volatile int thrower_data[4] = {48,0,0,(BIT15)};
volatile int redundancy_count = 0;
uint8_t check = 0;
uint8_t DONE = 0;

uint8_t receive[17];
float P,I,D,max_enc, error;
volatile float Kp = 0.4;
volatile float Ki = 0;
volatile float Kd = 0;

uint16_t the_speed = 1500;		// Some meximum speed reference
int16_t enc_delta;

// USB command translate variables
uint8_t receive[17];
volatile float USB_test[3] = {150,150,150};
volatile float USB_test_fun[3] = {150,150,150};
volatile float temp[3] = {0,0,0};

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM15_Init(void);
static void MX_TIM8_Init(void);
/* USER CODE BEGIN PFP */
float* USB_command_translate(uint32_t message_length, uint8_t num_of_vals);
void* DMA_buf_load(uint16_t *buf, uint16_t val, uint8_t len);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  for(int k=0; k<3; k++){
	  motors[k].prev_enc = enc_offset;
	  motors[k].speed = 0;
	  motors[k].direction = 0;
	  motors[k].prev_err = 0;
	  motors[k].integration = 0;
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_TIM1_Init();
  MX_TIM15_Init();
  MX_USB_Device_Init();
  MX_TIM8_Init();
  /* USER CODE BEGIN 2 */


  __disable_irq();
  RCC->AHB1ENR |= 0x02;

  // Wheel Motor Configuration
  // Motor DIR pins PA3=DIR1, PF1=DIR2, PF0=DIR3
  GPIOA->MODER &= ~(0x3 << 3);
  GPIOA->MODER |= 0x1 << 3;
  GPIOF->MODER &= ~0x0F;
  GPIOF->MODER |= 0x05;
  GPIOF->ODR = 0x00;

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
  // Set motor frequency to 20kHz, by changing Auto-Reload Register value to core_freq/20k
  TIM1->ARR = 8400; // PWM bandwidth 20kHz, Core frequency is 64MHz
  //Set the duty cycle for each Motor channel
  TIM1->CCR1 = 0;		// CH1 is for M1
  TIM1->CCR2 = 0;		// CH2 is for M2
  TIM1->CCR3 = 0;		// CH3 is for M3

  // Thrower Configuration
  DMA_buf_load(dma_buf, 0, 25);
  TIM15->ARR = 	1120;
  HAL_TIM_PWM_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buf, 20);

  //  HAL_TIM_Base_Start_IT(&htim15);
  //HAL_TIM_Base_Start_IT(&htim15);
  //TIM15->DIER &= ~BIT0;




  //Encoder configuration
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
  // Load Encoder counters with pre-determined values
  TIM2->CNT = enc_offset;			// TIM2 is for M2, setting it to offset value
  TIM3->CNT = enc_offset;			// TIM3 is for M1, setting it to offset value
  TIM4->CNT = enc_offset;			// TIM4 is for M3, setting it to offset value


  // Debug LED Configuration
  GPIOB->MODER &= ~(0x03 << 10);
  GPIOB->MODER |= 0x01<<10;			// Enable DBG2 as OUTPUT
//  GPIOB->BSRR = 0x1 << 5;			// Set HIGH
//  GPIOB->BSRR = 0x1 << 21;		// Set LOW

  // PID Timer Configuration
  RCC->APB1ENR1 |= 0x1 << 5;		// Enable TIM7
  TIM7->PSC = (64000-1)*timer_s;
  TIM7->ARR = 1000-1;
  TIM7->CR1 = 1;
  TIM7->DIER |= 1;					// Update Interrupt Enable (UIE)

  NVIC_EnableIRQ(TIM7_IRQn);		// Enable PID Interrupt routine

  __enable_irq();					// Enable global interrupts

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  TIM1->CCR1 = TIM1->ARR / 3;
//	  TIM1->CCR2 = TIM1->ARR / 3;
//	  TIM1->CCR3 = TIM1->ARR / 3;
//	  TIM1->CCR1 = TIM1->ARR * motors[0].USB_value;	// Load the motor PWM register with the value
//	  TIM1->CCR2 = TIM1->ARR * motors[1].USB_value;	// Load the motor PWM register with the value
//	  TIM1->CCR3 = TIM1->ARR * motors[2].USB_value;
//	  motors[0].enc_val = TIM3->CNT;			// TIM2 is for M2, setting it to offset value
//	  motors[1].enc_val = TIM2->CNT;			// TIM3 is for M1, setting it to offset value
//	  motors[2].enc_val = TIM4->CNT;
//	  delay(10000);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 21;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.Pulse = 0;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.Pulse = 0;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4.294967295E9;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 65535;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}

/**
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
  htim8.Init.Prescaler = 0;
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim8.Init.Period = 65535;
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim8.Init.RepetitionCounter = 0;
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);

}

/**
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
  htim15.Init.Prescaler = 0;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim15.Init.Period = 65535;
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim15.Init.RepetitionCounter = 0;
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, M3_DIR_Pin|M2_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG_1_Pin|DBG_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : M3_DIR_Pin M2_DIR_Pin */
  GPIO_InitStruct.Pin = M3_DIR_Pin|M2_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  /*Configure GPIO pin : M1_DIR_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(M1_DIR_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : DBG_1_Pin DBG_2_Pin */
  GPIO_InitStruct.Pin = DBG_1_Pin|DBG_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void CDC_On_Receive(uint8_t* buffer, uint32_t* length){

	uint8_t motor_state = 0;
	int8_t direction[3] = {0};
	uint16_t temp[3] = {0};
	int8_t count = 0;
	uint8_t decimal_loc = 100;
	memcpy(&receive, buffer, sizeof(receive)/sizeof(uint8_t));
	uint8_t command = receive[0] + receive[1];

	switch(command){
		float *pointing;
		USB_test[0] = 0;
		USB_test[1] = 0;
		USB_test[2] = 0;
	case 175: // If message starts with s<
		pointing = USB_command_translate(*length, 3);
		for(int k=0; k<3; k++){
			if(*pointing < 0){
				motors[k].USB_value = *pointing * -1;
				motors[k].direction = 1;
			}
			else {
				motors[k].USB_value = *pointing/100.0;
				motors[k].direction = 0;

			}
			pointing++;
		}
		break;

	case 176:	// If message starts with t<

		pointing = USB_command_translate(*length,1);
		thrower_data[0] = *pointing;
		thrower_data[0] = (47 + thrower_data[0]*20) << 5;
		thrower_data[0] |= (thrower_data[0]&0x1E0)>>5;

		DMA_buf_load(&dma_buf[0], thrower_data[0], 18);
		GPIOB->ODR ^= BIT4;
		break;
	}
}

void DMA1_Channel1_IRQnHandler(void){

}

void TIM7_IRQHandler(void){

	// PID Main Handler
	Kp = 0.6;
	Ki = 0.2;
	//Kd = 0.1;
	max_enc = 3000;
	//int16_t error;
	//int16_t enc_delta;

//	char transmit[10] = {0};

	// Load the motor encoder varibles with the latest Encoder values
	motors[0].enc_val = TIM3->CNT;
	motors[1].enc_val = TIM2->CNT;
	motors[2].enc_val = TIM4->CNT;

	TIM3->CNT = enc_offset;
	TIM2->CNT = enc_offset;
	TIM4->CNT = enc_offset;

	for(int k=0; k<3; k++){
		if(k==0){
			enc_delta = enc_offset - motors[k].enc_val;
			if(motors[k].direction == 1){
				enc_delta = -enc_delta;
			}
		}
		if(k==1 || k==2){
			enc_delta = enc_offset - motors[k].enc_val;
			if(motors[k].direction == 0){
				enc_delta = -enc_delta;
			}
		}

//		error = the_speed*timer_s*0.5 - enc_delta;
		error = max_enc*timer_s*motors[k].USB_value - enc_delta;

		if(error > 10 || error < -10){
			P = Kp*error;

			I = (motors[k].integration + error)*Ki;
			motors[k].integration = motors[k].integration + error;

			//D = (error-motors[k].prev_err)/timer_s;
			motors[k].prev_err = error;

			motors[k].speed = motors[k].speed + (D+I+P)/(max_enc*timer_s/0.5);
			//motors[k].speed = (D+I+P)/(max_enc*timer_s/0.5);	// TEST
			if(motors[k].speed>1){
				motors[k].speed = 1;
			}
			motors[k].prev_enc = motors[k].enc_val;
		}
		else{
			motors[k].prev_enc = motors[k].enc_val;
		}
	}

	// Motor DIR pins PA3=DIR1, PF1=DIR2, PF0=DIR3
	GPIOA->ODR &= ~BIT3;
	GPIOF->ODR &= ~(BIT0 | BIT1);
	if(motors[0].direction) GPIOA->ODR |= BIT3;
	if(motors[1].direction) GPIOF->ODR |= BIT1;
	if(motors[2].direction) GPIOF->ODR |= BIT0;

	TIM1->CCR1 = TIM1->ARR * motors[0].speed;	// Load the motor PWM register with the value
	TIM1->CCR2 = TIM1->ARR * motors[1].speed;	// Load the motor PWM register with the value
	TIM1->CCR3 = TIM1->ARR * motors[2].speed;	// Load the motor PWM register with the value

	//GPIOB->ODR ^= BIT4;
	TIM7->SR = 0;
}


float* USB_command_translate(uint32_t message_length, uint8_t num_of_vals){
	int8_t sign = 1;
	uint8_t count = 0;
	uint8_t num_count = 0;
	uint8_t decimal_loc = 100;
	uint8_t error = 0;
	temp[0] = 0;
	temp[1] = 0;
	temp[2] = 0;

	for(int k=2; k<message_length; k++){

		// Set the sign of the number
		if(receive[k] == 45){
			sign = -1;
		}
		// break, if there are four digits in any number
		else if(count == 4){
			temp[0] = 0;
			temp[1] = 0;
			temp[2] = 0;
		}

		else if(receive[k] == 58){	// If symbol is ":"
			temp[num_count] = sign*temp[num_count]/pow(10,3-count);	//Finish up the previous number
			if(temp[num_count] > 100 || temp[num_count] < -100) error = 1; // Check if the number is in boundaries
			USB_test_fun[num_count] = temp[num_count];
			count=0;				// Set digit count to 0
			decimal_loc = 100;		// Set the decimal point location
			num_count++;			// Increment the number count
			sign=1;					// Reset the sign for the next number
		}
		else if(receive[k] == 62){	// If symbol is ">" (terminate)
			temp[num_count] = sign*temp[num_count]/pow(10,3-count); // Finsih up the previous number
			if(temp[num_count] > 100 || temp[num_count] < -100) error = 1; // Check if the number is in boundaries
			USB_test_fun[num_count] = temp[num_count];
			num_count++;
			break;
		}
		// Number manipulation
		else{
			temp[num_count] = temp[num_count] + (receive[k]-48)*decimal_loc;
			decimal_loc = decimal_loc/10;
			count++;
		}
	}
	// Amount of counted numbers must mathc the input parameter
	if(num_count != num_of_vals){
		// Send that message was not successfully read
		temp[0] = 0;
		temp[1] = 0;
		temp[2] = 0;
		return temp;
	}
	else if(error == 1){
		temp[0] = 0;
		temp[1] = 0;
		temp[2] = 0;
		return temp;
	}
	else{
		return temp;

	}
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){

	if(htim==&htim15){
		TIM15->CR1 &= ~BIT0;

		if(DONE == 1){
//			if(redundancy_count == 4){
//				redundancy_count = 0;
//				TIM15->DIER &= ~BIT0;
//				GPIOB->ODR ^= BIT5;
//			}
			if(redundancy_count==10){
				DONE = 0;
				redundancy_count = 0;
				thrower_data[3] = BIT15;
				TIM15->CCR1 = 0;
				TIM15->CR1 |= BIT0;
				TIM15->SR &= ~BIT0;
				TIM15->CNT = 0;
				return;
			}
			else{
				redundancy_count++;
				TIM15->CCR1 = 0;
				TIM15->CR1 |= BIT0;
				TIM15->SR &= ~BIT0;
				TIM15->CNT = 0;
				return;
			}
		}

		if(thrower_data[0] & thrower_data[3]){
			TIM15->CCR1 = 419; // 0.748
			thrower_data[2] |= thrower_data[0] & thrower_data[3];
		}
		else{
			TIM15->CCR1 = 209; // 0.374
			thrower_data[2] |= thrower_data[0] & thrower_data[3];
		}

		if(thrower_data[3] == BIT0){
			DONE = 1;
		}

		thrower_data[3] = thrower_data[3] >> 1;

		check++;
		TIM15->CR1 |= BIT0;
		TIM15->SR &= ~BIT0;
	}
}

void* DMA_buf_load(uint16_t *buf, uint16_t val, uint8_t len){
	uint32_t pos = BIT15;
	for(int k=0; k<len; k++){
		if(k<16){
			if(val&pos){
				*buf = 900;
			}
			else{
				*buf = 450;
			}
			pos = pos >> 1;
		}
		else{
			*buf = 0;
		}
		buf++;
	}
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
