
LeBot_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c28c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800c468  0800c468  0001c468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c508  0800c508  0002021c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c508  0800c508  0002021c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c508  0800c508  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c508  0800c508  0001c508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c50c  0800c50c  0001c50c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800c510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000149c  2000021c  0800c72c  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200016b8  0800c72c  000216b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bcce  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000369c  00000000  00000000  0003bf1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001430  00000000  00000000  0003f5b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012a8  00000000  00000000  000409e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000208fe  00000000  00000000  00041c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001264a  00000000  00000000  0006258e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4a44  00000000  00000000  00074bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013961c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005810  00000000  00000000  00139698  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000021c 	.word	0x2000021c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c44c 	.word	0x0800c44c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000220 	.word	0x20000220
 8000214:	0800c44c 	.word	0x0800c44c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db0b      	blt.n	8000bba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 021f 	and.w	r2, r3, #31
 8000ba8:	4907      	ldr	r1, [pc, #28]	; (8000bc8 <__NVIC_EnableIRQ+0x38>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd2:	f001 fc7a 	bl	80024ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd6:	f000 f90b 	bl	8000df0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  for(int k=0; k<3; k++){
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	e036      	b.n	8000c4e <main+0x82>
	  motors[k].prev_enc = enc_offset;
 8000be0:	4b71      	ldr	r3, [pc, #452]	; (8000da8 <main+0x1dc>)
 8000be2:	8818      	ldrh	r0, [r3, #0]
 8000be4:	4971      	ldr	r1, [pc, #452]	; (8000dac <main+0x1e0>)
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	4613      	mov	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	801a      	strh	r2, [r3, #0]
	  motors[k].speed = 0;
 8000bf6:	496d      	ldr	r1, [pc, #436]	; (8000dac <main+0x1e0>)
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	440b      	add	r3, r1
 8000c04:	3304      	adds	r3, #4
 8000c06:	f04f 0200 	mov.w	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
	  motors[k].direction = 0;
 8000c0c:	4967      	ldr	r1, [pc, #412]	; (8000dac <main+0x1e0>)
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	4613      	mov	r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4413      	add	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	440b      	add	r3, r1
 8000c1a:	330a      	adds	r3, #10
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
	  motors[k].prev_err = 0;
 8000c20:	4962      	ldr	r1, [pc, #392]	; (8000dac <main+0x1e0>)
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	4613      	mov	r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	4413      	add	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	3308      	adds	r3, #8
 8000c30:	2200      	movs	r2, #0
 8000c32:	801a      	strh	r2, [r3, #0]
	  motors[k].integration = 0;
 8000c34:	495d      	ldr	r1, [pc, #372]	; (8000dac <main+0x1e0>)
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	440b      	add	r3, r1
 8000c42:	330e      	adds	r3, #14
 8000c44:	2200      	movs	r2, #0
 8000c46:	801a      	strh	r2, [r3, #0]
  for(int k=0; k<3; k++){
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	ddc5      	ble.n	8000be0 <main+0x14>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c54:	f000 fc28 	bl	80014a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c58:	f000 fbfc 	bl	8001454 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c5c:	f000 f9e0 	bl	8001020 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c60:	f000 fa32 	bl	80010c8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c64:	f000 fa86 	bl	8001174 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000c68:	f000 f92a 	bl	8000ec0 <MX_TIM1_Init>
  MX_TIM15_Init();
 8000c6c:	f000 fb6c 	bl	8001348 <MX_TIM15_Init>
  MX_USB_Device_Init();
 8000c70:	f009 fe92 	bl	800a998 <MX_USB_Device_Init>
  MX_TIM8_Init();
 8000c74:	f000 fad4 	bl	8001220 <MX_TIM8_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
  /* USER CODE BEGIN 2 */


  __disable_irq();
  RCC->AHB1ENR |= 0x02;
 8000c7a:	4b4d      	ldr	r3, [pc, #308]	; (8000db0 <main+0x1e4>)
 8000c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c7e:	4a4c      	ldr	r2, [pc, #304]	; (8000db0 <main+0x1e4>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	6493      	str	r3, [r2, #72]	; 0x48

  // Wheel Motor Configuration
  // Motor DIR pins PA3=DIR1, PF1=DIR2, PF0=DIR3
  GPIOA->MODER &= ~(0x3 << 3);
 8000c86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c90:	f023 0318 	bic.w	r3, r3, #24
 8000c94:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= 0x1 << 3;
 8000c96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ca0:	f043 0308 	orr.w	r3, r3, #8
 8000ca4:	6013      	str	r3, [r2, #0]
  GPIOF->MODER &= ~0x0F;
 8000ca6:	4b43      	ldr	r3, [pc, #268]	; (8000db4 <main+0x1e8>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a42      	ldr	r2, [pc, #264]	; (8000db4 <main+0x1e8>)
 8000cac:	f023 030f 	bic.w	r3, r3, #15
 8000cb0:	6013      	str	r3, [r2, #0]
  GPIOF->MODER |= 0x05;
 8000cb2:	4b40      	ldr	r3, [pc, #256]	; (8000db4 <main+0x1e8>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a3f      	ldr	r2, [pc, #252]	; (8000db4 <main+0x1e8>)
 8000cb8:	f043 0305 	orr.w	r3, r3, #5
 8000cbc:	6013      	str	r3, [r2, #0]
  GPIOF->ODR = 0x00;
 8000cbe:	4b3d      	ldr	r3, [pc, #244]	; (8000db4 <main+0x1e8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	483c      	ldr	r0, [pc, #240]	; (8000db8 <main+0x1ec>)
 8000cc8:	f004 fcec 	bl	80056a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ccc:	2104      	movs	r1, #4
 8000cce:	483a      	ldr	r0, [pc, #232]	; (8000db8 <main+0x1ec>)
 8000cd0:	f004 fce8 	bl	80056a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000cd4:	2108      	movs	r1, #8
 8000cd6:	4838      	ldr	r0, [pc, #224]	; (8000db8 <main+0x1ec>)
 8000cd8:	f004 fce4 	bl	80056a4 <HAL_TIM_PWM_Start>
  // Set motor frequency to 20kHz, by changing Auto-Reload Register value to core_freq/20k
  TIM1->ARR = 8400; // PWM bandwidth 20kHz, Core frequency is 64MHz
 8000cdc:	4b37      	ldr	r3, [pc, #220]	; (8000dbc <main+0x1f0>)
 8000cde:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  //Set the duty cycle for each Motor channel
  TIM1->CCR1 = 0;		// CH1 is for M1
 8000ce4:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <main+0x1f0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;		// CH2 is for M2
 8000cea:	4b34      	ldr	r3, [pc, #208]	; (8000dbc <main+0x1f0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;		// CH3 is for M3
 8000cf0:	4b32      	ldr	r3, [pc, #200]	; (8000dbc <main+0x1f0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	63da      	str	r2, [r3, #60]	; 0x3c

  // Thrower Configuration
  DMA_buf_load(dma_buf, 0);
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4831      	ldr	r0, [pc, #196]	; (8000dc0 <main+0x1f4>)
 8000cfa:	f001 f925 	bl	8001f48 <DMA_buf_load>
  TIM15->ARR = 	1120;
 8000cfe:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <main+0x1f8>)
 8000d00:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8000d04:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_TIM_PWM_Start_DMA(&htim15, TIM_CHANNEL_1, dma_buf, 20);
 8000d06:	2314      	movs	r3, #20
 8000d08:	4a2d      	ldr	r2, [pc, #180]	; (8000dc0 <main+0x1f4>)
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	482e      	ldr	r0, [pc, #184]	; (8000dc8 <main+0x1fc>)
 8000d0e:	f004 fdc9 	bl	80058a4 <HAL_TIM_PWM_Start_DMA>




  //Encoder configuration
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000d12:	2104      	movs	r1, #4
 8000d14:	482d      	ldr	r0, [pc, #180]	; (8000dcc <main+0x200>)
 8000d16:	f005 f87d 	bl	8005e14 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000d1a:	2104      	movs	r1, #4
 8000d1c:	482c      	ldr	r0, [pc, #176]	; (8000dd0 <main+0x204>)
 8000d1e:	f005 f879 	bl	8005e14 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000d22:	2104      	movs	r1, #4
 8000d24:	482b      	ldr	r0, [pc, #172]	; (8000dd4 <main+0x208>)
 8000d26:	f005 f875 	bl	8005e14 <HAL_TIM_Encoder_Start>
  // Load Encoder counters with pre-determined values
  TIM2->CNT = enc_offset;			// TIM2 is for M2, setting it to offset value
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <main+0x1dc>)
 8000d2c:	881a      	ldrh	r2, [r3, #0]
 8000d2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d32:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->CNT = enc_offset;			// TIM3 is for M1, setting it to offset value
 8000d34:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <main+0x1dc>)
 8000d36:	881a      	ldrh	r2, [r3, #0]
 8000d38:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <main+0x20c>)
 8000d3a:	625a      	str	r2, [r3, #36]	; 0x24
  TIM4->CNT = enc_offset;			// TIM4 is for M3, setting it to offset value
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <main+0x1dc>)
 8000d3e:	881a      	ldrh	r2, [r3, #0]
 8000d40:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <main+0x210>)
 8000d42:	625a      	str	r2, [r3, #36]	; 0x24


  // Debug LED Configuration
  GPIOB->MODER &= ~(0x03 << 10);
 8000d44:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <main+0x214>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a25      	ldr	r2, [pc, #148]	; (8000de0 <main+0x214>)
 8000d4a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000d4e:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= 0x01<<10;			// Enable DBG2 as OUTPUT
 8000d50:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <main+0x214>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a22      	ldr	r2, [pc, #136]	; (8000de0 <main+0x214>)
 8000d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5a:	6013      	str	r3, [r2, #0]
//  GPIOB->BSRR = 0x1 << 5;			// Set HIGH
//  GPIOB->BSRR = 0x1 << 21;		// Set LOW

  // PID Timer Configuration
  RCC->APB1ENR1 |= 0x1 << 5;		// Enable TIM7
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <main+0x1e4>)
 8000d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d60:	4a13      	ldr	r2, [pc, #76]	; (8000db0 <main+0x1e4>)
 8000d62:	f043 0320 	orr.w	r3, r3, #32
 8000d66:	6593      	str	r3, [r2, #88]	; 0x58
  TIM7->PSC = (64000-1)*timer_s;
 8000d68:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <main+0x218>)
 8000d6a:	edd3 7a00 	vldr	s15, [r3]
 8000d6e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000de8 <main+0x21c>
 8000d72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d76:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <main+0x220>)
 8000d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d7c:	ee17 2a90 	vmov	r2, s15
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
  TIM7->ARR = 1000-1;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <main+0x220>)
 8000d84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d88:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM7->CR1 = 1;
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <main+0x220>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]
  TIM7->DIER |= 1;					// Update Interrupt Enable (UIE)
 8000d90:	4b16      	ldr	r3, [pc, #88]	; (8000dec <main+0x220>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	4a15      	ldr	r2, [pc, #84]	; (8000dec <main+0x220>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	60d3      	str	r3, [r2, #12]

  NVIC_EnableIRQ(TIM7_IRQn);		// Enable PID Interrupt routine
 8000d9c:	2037      	movs	r0, #55	; 0x37
 8000d9e:	f7ff fef7 	bl	8000b90 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000da2:	b662      	cpsie	i

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <main+0x1d8>
 8000da6:	bf00      	nop
 8000da8:	20000004 	.word	0x20000004
 8000dac:	200005c8 	.word	0x200005c8
 8000db0:	40021000 	.word	0x40021000
 8000db4:	48001400 	.word	0x48001400
 8000db8:	20000604 	.word	0x20000604
 8000dbc:	40012c00 	.word	0x40012c00
 8000dc0:	20000238 	.word	0x20000238
 8000dc4:	40014000 	.word	0x40014000
 8000dc8:	20000530 	.word	0x20000530
 8000dcc:	200006d0 	.word	0x200006d0
 8000dd0:	2000057c 	.word	0x2000057c
 8000dd4:	200004e4 	.word	0x200004e4
 8000dd8:	40000400 	.word	0x40000400
 8000ddc:	40000800 	.word	0x40000800
 8000de0:	48000400 	.word	0x48000400
 8000de4:	20000000 	.word	0x20000000
 8000de8:	4779ff00 	.word	0x4779ff00
 8000dec:	40001400 	.word	0x40001400

08000df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b0a4      	sub	sp, #144	; 0x90
 8000df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dfa:	2238      	movs	r2, #56	; 0x38
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f00a fac6 	bl	800b390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e14:	463b      	mov	r3, r7
 8000e16:	2244      	movs	r2, #68	; 0x44
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f00a fab8 	bl	800b390 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e20:	2000      	movs	r0, #0
 8000e22:	f003 fc47 	bl	80046b4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000e26:	2322      	movs	r3, #34	; 0x22
 8000e28:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e2e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e30:	2340      	movs	r3, #64	; 0x40
 8000e32:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e34:	2301      	movs	r3, #1
 8000e36:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000e40:	2301      	movs	r3, #1
 8000e42:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000e44:	2315      	movs	r3, #21
 8000e46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e56:	2302      	movs	r3, #2
 8000e58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e60:	4618      	mov	r0, r3
 8000e62:	f003 fcdb 	bl	800481c <HAL_RCC_OscConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000e6c:	f001 f8c8 	bl	8002000 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e70:	230f      	movs	r3, #15
 8000e72:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e74:	2303      	movs	r3, #3
 8000e76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e88:	2104      	movs	r1, #4
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 ffde 	bl	8004e4c <HAL_RCC_ClockConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e96:	f001 f8b3 	bl	8002000 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e9e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f004 f9b4 	bl	8005214 <HAL_RCCEx_PeriphCLKConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000eb2:	f001 f8a5 	bl	8002000 <Error_Handler>
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	3790      	adds	r7, #144	; 0x90
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b098      	sub	sp, #96	; 0x60
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]
 8000ee2:	615a      	str	r2, [r3, #20]
 8000ee4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2234      	movs	r2, #52	; 0x34
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f00a fa4f 	bl	800b390 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ef2:	4b49      	ldr	r3, [pc, #292]	; (8001018 <MX_TIM1_Init+0x158>)
 8000ef4:	4a49      	ldr	r2, [pc, #292]	; (800101c <MX_TIM1_Init+0x15c>)
 8000ef6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ef8:	4b47      	ldr	r3, [pc, #284]	; (8001018 <MX_TIM1_Init+0x158>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efe:	4b46      	ldr	r3, [pc, #280]	; (8001018 <MX_TIM1_Init+0x158>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f04:	4b44      	ldr	r3, [pc, #272]	; (8001018 <MX_TIM1_Init+0x158>)
 8000f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0c:	4b42      	ldr	r3, [pc, #264]	; (8001018 <MX_TIM1_Init+0x158>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f12:	4b41      	ldr	r3, [pc, #260]	; (8001018 <MX_TIM1_Init+0x158>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f18:	4b3f      	ldr	r3, [pc, #252]	; (8001018 <MX_TIM1_Init+0x158>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f1e:	483e      	ldr	r0, [pc, #248]	; (8001018 <MX_TIM1_Init+0x158>)
 8000f20:	f004 fb68 	bl	80055f4 <HAL_TIM_PWM_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000f2a:	f001 f869 	bl	8002000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4835      	ldr	r0, [pc, #212]	; (8001018 <MX_TIM1_Init+0x158>)
 8000f42:	f005 ff47 	bl	8006dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f4c:	f001 f858 	bl	8002000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f50:	2360      	movs	r3, #96	; 0x60
 8000f52:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f64:	2300      	movs	r3, #0
 8000f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f70:	2200      	movs	r2, #0
 8000f72:	4619      	mov	r1, r3
 8000f74:	4828      	ldr	r0, [pc, #160]	; (8001018 <MX_TIM1_Init+0x158>)
 8000f76:	f005 f959 	bl	800622c <HAL_TIM_PWM_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000f80:	f001 f83e 	bl	8002000 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4821      	ldr	r0, [pc, #132]	; (8001018 <MX_TIM1_Init+0x158>)
 8000f92:	f005 f94b 	bl	800622c <HAL_TIM_PWM_ConfigChannel>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8000f9c:	f001 f830 	bl	8002000 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fa4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fa8:	2208      	movs	r2, #8
 8000faa:	4619      	mov	r1, r3
 8000fac:	481a      	ldr	r0, [pc, #104]	; (8001018 <MX_TIM1_Init+0x158>)
 8000fae:	f005 f93d 	bl	800622c <HAL_TIM_PWM_ConfigChannel>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000fb8:	f001 f822 	bl	8002000 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4807      	ldr	r0, [pc, #28]	; (8001018 <MX_TIM1_Init+0x158>)
 8000ffa:	f005 ff6d 	bl	8006ed8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001004:	f000 fffc 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <MX_TIM1_Init+0x158>)
 800100a:	f001 f94d 	bl	80022a8 <HAL_TIM_MspPostInit>

}
 800100e:	bf00      	nop
 8001010:	3760      	adds	r7, #96	; 0x60
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000604 	.word	0x20000604
 800101c:	40012c00 	.word	0x40012c00

08001020 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	2224      	movs	r2, #36	; 0x24
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f00a f9ae 	bl	800b390 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001034:	463b      	mov	r3, r7
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <MX_TIM2_Init+0xa4>)
 8001040:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001044:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001046:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <MX_TIM2_Init+0xa4>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_TIM2_Init+0xa4>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MX_TIM2_Init+0xa4>)
 8001054:	f04f 32ff 	mov.w	r2, #4294967295
 8001058:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_TIM2_Init+0xa4>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_TIM2_Init+0xa4>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001066:	2301      	movs	r3, #1
 8001068:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800106e:	2301      	movs	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800107e:	2301      	movs	r3, #1
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	4619      	mov	r1, r3
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <MX_TIM2_Init+0xa4>)
 8001092:	f004 fe19 	bl	8005cc8 <HAL_TIM_Encoder_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800109c:	f000 ffb0 	bl	8002000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_TIM2_Init+0xa4>)
 80010ae:	f005 fe91 	bl	8006dd4 <HAL_TIMEx_MasterConfigSynchronization>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80010b8:	f000 ffa2 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	3730      	adds	r7, #48	; 0x30
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200006d0 	.word	0x200006d0

080010c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	2224      	movs	r2, #36	; 0x24
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f00a f95a 	bl	800b390 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010dc:	463b      	mov	r3, r7
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <MX_TIM3_Init+0xa4>)
 80010e8:	4a21      	ldr	r2, [pc, #132]	; (8001170 <MX_TIM3_Init+0xa8>)
 80010ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <MX_TIM3_Init+0xa4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <MX_TIM3_Init+0xa4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010f8:	4b1c      	ldr	r3, [pc, #112]	; (800116c <MX_TIM3_Init+0xa4>)
 80010fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <MX_TIM3_Init+0xa4>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <MX_TIM3_Init+0xa4>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800110c:	2301      	movs	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001114:	2301      	movs	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001120:	2300      	movs	r3, #0
 8001122:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001124:	2301      	movs	r3, #1
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	4619      	mov	r1, r3
 8001136:	480d      	ldr	r0, [pc, #52]	; (800116c <MX_TIM3_Init+0xa4>)
 8001138:	f004 fdc6 	bl	8005cc8 <HAL_TIM_Encoder_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001142:	f000 ff5d 	bl	8002000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800114e:	463b      	mov	r3, r7
 8001150:	4619      	mov	r1, r3
 8001152:	4806      	ldr	r0, [pc, #24]	; (800116c <MX_TIM3_Init+0xa4>)
 8001154:	f005 fe3e 	bl	8006dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800115e:	f000 ff4f 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	3730      	adds	r7, #48	; 0x30
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000057c 	.word	0x2000057c
 8001170:	40000400 	.word	0x40000400

08001174 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08c      	sub	sp, #48	; 0x30
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	2224      	movs	r2, #36	; 0x24
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f00a f904 	bl	800b390 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001188:	463b      	mov	r3, r7
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001192:	4b21      	ldr	r3, [pc, #132]	; (8001218 <MX_TIM4_Init+0xa4>)
 8001194:	4a21      	ldr	r2, [pc, #132]	; (800121c <MX_TIM4_Init+0xa8>)
 8001196:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <MX_TIM4_Init+0xa4>)
 800119a:	2200      	movs	r2, #0
 800119c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <MX_TIM4_Init+0xa4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <MX_TIM4_Init+0xa4>)
 80011a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_TIM4_Init+0xa4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <MX_TIM4_Init+0xa4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80011b8:	2301      	movs	r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011c0:	2301      	movs	r3, #1
 80011c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011cc:	2300      	movs	r3, #0
 80011ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011d0:	2301      	movs	r3, #1
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	4619      	mov	r1, r3
 80011e2:	480d      	ldr	r0, [pc, #52]	; (8001218 <MX_TIM4_Init+0xa4>)
 80011e4:	f004 fd70 	bl	8005cc8 <HAL_TIM_Encoder_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80011ee:	f000 ff07 	bl	8002000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_TIM4_Init+0xa4>)
 8001200:	f005 fde8 	bl	8006dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800120a:	f000 fef9 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	3730      	adds	r7, #48	; 0x30
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200004e4 	.word	0x200004e4
 800121c:	40000800 	.word	0x40000800

08001220 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b098      	sub	sp, #96	; 0x60
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001226:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001232:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]
 8001242:	615a      	str	r2, [r3, #20]
 8001244:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2234      	movs	r2, #52	; 0x34
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f00a f89f 	bl	800b390 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001252:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <MX_TIM8_Init+0x120>)
 8001254:	4a3b      	ldr	r2, [pc, #236]	; (8001344 <MX_TIM8_Init+0x124>)
 8001256:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001258:	4b39      	ldr	r3, [pc, #228]	; (8001340 <MX_TIM8_Init+0x120>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b38      	ldr	r3, [pc, #224]	; (8001340 <MX_TIM8_Init+0x120>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001264:	4b36      	ldr	r3, [pc, #216]	; (8001340 <MX_TIM8_Init+0x120>)
 8001266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800126a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126c:	4b34      	ldr	r3, [pc, #208]	; (8001340 <MX_TIM8_Init+0x120>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001272:	4b33      	ldr	r3, [pc, #204]	; (8001340 <MX_TIM8_Init+0x120>)
 8001274:	2200      	movs	r2, #0
 8001276:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001278:	4b31      	ldr	r3, [pc, #196]	; (8001340 <MX_TIM8_Init+0x120>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800127e:	4830      	ldr	r0, [pc, #192]	; (8001340 <MX_TIM8_Init+0x120>)
 8001280:	f004 f9b8 	bl	80055f4 <HAL_TIM_PWM_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800128a:	f000 feb9 	bl	8002000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800129a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800129e:	4619      	mov	r1, r3
 80012a0:	4827      	ldr	r0, [pc, #156]	; (8001340 <MX_TIM8_Init+0x120>)
 80012a2:	f005 fd97 	bl	8006dd4 <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80012ac:	f000 fea8 	bl	8002000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b0:	2360      	movs	r3, #96	; 0x60
 80012b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b8:	2300      	movs	r3, #0
 80012ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012bc:	2300      	movs	r3, #0
 80012be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012d0:	2200      	movs	r2, #0
 80012d2:	4619      	mov	r1, r3
 80012d4:	481a      	ldr	r0, [pc, #104]	; (8001340 <MX_TIM8_Init+0x120>)
 80012d6:	f004 ffa9 	bl	800622c <HAL_TIM_PWM_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80012e0:	f000 fe8e 	bl	8002000 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800130a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800130e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001314:	2300      	movs	r3, #0
 8001316:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4619      	mov	r1, r3
 8001320:	4807      	ldr	r0, [pc, #28]	; (8001340 <MX_TIM8_Init+0x120>)
 8001322:	f005 fdd9 	bl	8006ed8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800132c:	f000 fe68 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001330:	4803      	ldr	r0, [pc, #12]	; (8001340 <MX_TIM8_Init+0x120>)
 8001332:	f000 ffb9 	bl	80022a8 <HAL_TIM_MspPostInit>

}
 8001336:	bf00      	nop
 8001338:	3760      	adds	r7, #96	; 0x60
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000498 	.word	0x20000498
 8001344:	40013400 	.word	0x40013400

08001348 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b098      	sub	sp, #96	; 0x60
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800135a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]
 800136a:	615a      	str	r2, [r3, #20]
 800136c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2234      	movs	r2, #52	; 0x34
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f00a f80b 	bl	800b390 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <MX_TIM15_Init+0x104>)
 800137c:	4a34      	ldr	r2, [pc, #208]	; (8001450 <MX_TIM15_Init+0x108>)
 800137e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001380:	4b32      	ldr	r3, [pc, #200]	; (800144c <MX_TIM15_Init+0x104>)
 8001382:	2200      	movs	r2, #0
 8001384:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001386:	4b31      	ldr	r3, [pc, #196]	; (800144c <MX_TIM15_Init+0x104>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1120;
 800138c:	4b2f      	ldr	r3, [pc, #188]	; (800144c <MX_TIM15_Init+0x104>)
 800138e:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8001392:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001394:	4b2d      	ldr	r3, [pc, #180]	; (800144c <MX_TIM15_Init+0x104>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800139a:	4b2c      	ldr	r3, [pc, #176]	; (800144c <MX_TIM15_Init+0x104>)
 800139c:	2200      	movs	r2, #0
 800139e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a0:	4b2a      	ldr	r3, [pc, #168]	; (800144c <MX_TIM15_Init+0x104>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80013a6:	4829      	ldr	r0, [pc, #164]	; (800144c <MX_TIM15_Init+0x104>)
 80013a8:	f004 f924 	bl	80055f4 <HAL_TIM_PWM_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80013b2:	f000 fe25 	bl	8002000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80013be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013c2:	4619      	mov	r1, r3
 80013c4:	4821      	ldr	r0, [pc, #132]	; (800144c <MX_TIM15_Init+0x104>)
 80013c6:	f005 fd05 	bl	8006dd4 <HAL_TIMEx_MasterConfigSynchronization>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80013d0:	f000 fe16 	bl	8002000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d4:	2360      	movs	r3, #96	; 0x60
 80013d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013dc:	2300      	movs	r3, #0
 80013de:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013e0:	2300      	movs	r3, #0
 80013e2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013ec:	2300      	movs	r3, #0
 80013ee:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013f4:	2200      	movs	r2, #0
 80013f6:	4619      	mov	r1, r3
 80013f8:	4814      	ldr	r0, [pc, #80]	; (800144c <MX_TIM15_Init+0x104>)
 80013fa:	f004 ff17 	bl	800622c <HAL_TIM_PWM_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001404:	f000 fdfc 	bl	8002000 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800141c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001420:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	4619      	mov	r1, r3
 800142e:	4807      	ldr	r0, [pc, #28]	; (800144c <MX_TIM15_Init+0x104>)
 8001430:	f005 fd52 	bl	8006ed8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 800143a:	f000 fde1 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800143e:	4803      	ldr	r0, [pc, #12]	; (800144c <MX_TIM15_Init+0x104>)
 8001440:	f000 ff32 	bl	80022a8 <HAL_TIM_MspPostInit>

}
 8001444:	bf00      	nop
 8001446:	3760      	adds	r7, #96	; 0x60
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000530 	.word	0x20000530
 8001450:	40014000 	.word	0x40014000

08001454 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <MX_DMA_Init+0x50>)
 800145c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145e:	4a11      	ldr	r2, [pc, #68]	; (80014a4 <MX_DMA_Init+0x50>)
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	6493      	str	r3, [r2, #72]	; 0x48
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_DMA_Init+0x50>)
 8001468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_DMA_Init+0x50>)
 8001474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <MX_DMA_Init+0x50>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6493      	str	r3, [r2, #72]	; 0x48
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_DMA_Init+0x50>)
 8001480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	200b      	movs	r0, #11
 8001490:	f001 f967 	bl	8002762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001494:	200b      	movs	r0, #11
 8001496:	f001 f97e 	bl	8002796 <HAL_NVIC_EnableIRQ>

}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000

080014a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <MX_GPIO_Init+0xdc>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	4a30      	ldr	r2, [pc, #192]	; (8001584 <MX_GPIO_Init+0xdc>)
 80014c4:	f043 0320 	orr.w	r3, r3, #32
 80014c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ca:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <MX_GPIO_Init+0xdc>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	f003 0320 	and.w	r3, r3, #32
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <MX_GPIO_Init+0xdc>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	4a2a      	ldr	r2, [pc, #168]	; (8001584 <MX_GPIO_Init+0xdc>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <MX_GPIO_Init+0xdc>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	4b25      	ldr	r3, [pc, #148]	; (8001584 <MX_GPIO_Init+0xdc>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	4a24      	ldr	r2, [pc, #144]	; (8001584 <MX_GPIO_Init+0xdc>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <MX_GPIO_Init+0xdc>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, M3_DIR_Pin|M2_DIR_Pin, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	2103      	movs	r1, #3
 800150a:	481f      	ldr	r0, [pc, #124]	; (8001588 <MX_GPIO_Init+0xe0>)
 800150c:	f001 fd52 	bl	8002fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	2108      	movs	r1, #8
 8001514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001518:	f001 fd4c 	bl	8002fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG_1_Pin|DBG_2_Pin, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	2130      	movs	r1, #48	; 0x30
 8001520:	481a      	ldr	r0, [pc, #104]	; (800158c <MX_GPIO_Init+0xe4>)
 8001522:	f001 fd47 	bl	8002fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M3_DIR_Pin M2_DIR_Pin */
  GPIO_InitStruct.Pin = M3_DIR_Pin|M2_DIR_Pin;
 8001526:	2303      	movs	r3, #3
 8001528:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	4619      	mov	r1, r3
 800153c:	4812      	ldr	r0, [pc, #72]	; (8001588 <MX_GPIO_Init+0xe0>)
 800153e:	f001 fbb7 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_DIR_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin;
 8001542:	2308      	movs	r3, #8
 8001544:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001546:	2301      	movs	r3, #1
 8001548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(M1_DIR_GPIO_Port, &GPIO_InitStruct);
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4619      	mov	r1, r3
 8001558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155c:	f001 fba8 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DBG_1_Pin DBG_2_Pin */
  GPIO_InitStruct.Pin = DBG_1_Pin|DBG_2_Pin;
 8001560:	2330      	movs	r3, #48	; 0x30
 8001562:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	4619      	mov	r1, r3
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_GPIO_Init+0xe4>)
 8001578:	f001 fb9a 	bl	8002cb0 <HAL_GPIO_Init>

}
 800157c:	bf00      	nop
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000
 8001588:	48001400 	.word	0x48001400
 800158c:	48000400 	.word	0x48000400

08001590 <CDC_On_Receive>:

/* USER CODE BEGIN 4 */
void CDC_On_Receive(uint8_t* buffer, uint32_t* length){
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]

	uint8_t motor_state = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	75fb      	strb	r3, [r7, #23]
	int8_t direction[3] = {0};
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	2100      	movs	r1, #0
 80015a4:	460a      	mov	r2, r1
 80015a6:	801a      	strh	r2, [r3, #0]
 80015a8:	460a      	mov	r2, r1
 80015aa:	709a      	strb	r2, [r3, #2]
	uint16_t temp[3] = {0};
 80015ac:	f107 0308 	add.w	r3, r7, #8
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	809a      	strh	r2, [r3, #4]
	int8_t count = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	75bb      	strb	r3, [r7, #22]
	uint8_t decimal_loc = 100;
 80015ba:	2364      	movs	r3, #100	; 0x64
 80015bc:	757b      	strb	r3, [r7, #21]
	memcpy(&receive, buffer, sizeof(receive)/sizeof(uint8_t));
 80015be:	4b8a      	ldr	r3, [pc, #552]	; (80017e8 <CDC_On_Receive+0x258>)
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6815      	ldr	r5, [r2, #0]
 80015c4:	6854      	ldr	r4, [r2, #4]
 80015c6:	6890      	ldr	r0, [r2, #8]
 80015c8:	68d1      	ldr	r1, [r2, #12]
 80015ca:	601d      	str	r5, [r3, #0]
 80015cc:	605c      	str	r4, [r3, #4]
 80015ce:	6098      	str	r0, [r3, #8]
 80015d0:	60d9      	str	r1, [r3, #12]
 80015d2:	7c12      	ldrb	r2, [r2, #16]
 80015d4:	741a      	strb	r2, [r3, #16]
	uint8_t command = receive[0] + receive[1];
 80015d6:	4b84      	ldr	r3, [pc, #528]	; (80017e8 <CDC_On_Receive+0x258>)
 80015d8:	781a      	ldrb	r2, [r3, #0]
 80015da:	4b83      	ldr	r3, [pc, #524]	; (80017e8 <CDC_On_Receive+0x258>)
 80015dc:	785b      	ldrb	r3, [r3, #1]
 80015de:	4413      	add	r3, r2
 80015e0:	753b      	strb	r3, [r7, #20]

	switch(command){
 80015e2:	7d3b      	ldrb	r3, [r7, #20]
 80015e4:	2baf      	cmp	r3, #175	; 0xaf
 80015e6:	d006      	beq.n	80015f6 <CDC_On_Receive+0x66>
 80015e8:	2bb0      	cmp	r3, #176	; 0xb0
 80015ea:	f000 80a1 	beq.w	8001730 <CDC_On_Receive+0x1a0>
 80015ee:	2ba7      	cmp	r3, #167	; 0xa7
 80015f0:	f000 80ca 	beq.w	8001788 <CDC_On_Receive+0x1f8>
		Ki = *pointing/100.0;
		pointing++;
		Kd = *pointing/100.0;
		break;
	}
}
 80015f4:	e0f4      	b.n	80017e0 <CDC_On_Receive+0x250>
		pointing = USB_command_translate(*length, 3);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2103      	movs	r1, #3
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 fb33 	bl	8001c68 <USB_command_translate>
 8001602:	61f8      	str	r0, [r7, #28]
		for(int k=0; k<3; k++){
 8001604:	2300      	movs	r3, #0
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	e08d      	b.n	8001726 <CDC_On_Receive+0x196>
			if(*pointing == 0){
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001618:	d111      	bne.n	800163e <CDC_On_Receive+0xae>
				motors[k].USB_value = *pointing/100.0;
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	ed93 7a00 	vldr	s14, [r3]
 8001620:	eddf 6a72 	vldr	s13, [pc, #456]	; 80017ec <CDC_On_Receive+0x25c>
 8001624:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001628:	4971      	ldr	r1, [pc, #452]	; (80017f0 <CDC_On_Receive+0x260>)
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	3310      	adds	r3, #16
 8001638:	edc3 7a00 	vstr	s15, [r3]
 800163c:	e040      	b.n	80016c0 <CDC_On_Receive+0x130>
			else if(*pointing < 0){
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	edd3 7a00 	vldr	s15, [r3]
 8001644:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164c:	d51d      	bpl.n	800168a <CDC_On_Receive+0xfa>
				motors[k].USB_value = -*pointing/100.0;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	edd3 7a00 	vldr	s15, [r3]
 8001654:	eeb1 7a67 	vneg.f32	s14, s15
 8001658:	eddf 6a64 	vldr	s13, [pc, #400]	; 80017ec <CDC_On_Receive+0x25c>
 800165c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001660:	4963      	ldr	r1, [pc, #396]	; (80017f0 <CDC_On_Receive+0x260>)
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	3310      	adds	r3, #16
 8001670:	edc3 7a00 	vstr	s15, [r3]
				motors[k].direction = 1;
 8001674:	495e      	ldr	r1, [pc, #376]	; (80017f0 <CDC_On_Receive+0x260>)
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	330a      	adds	r3, #10
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	e01a      	b.n	80016c0 <CDC_On_Receive+0x130>
				motors[k].USB_value = *pointing/100.0;
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	ed93 7a00 	vldr	s14, [r3]
 8001690:	eddf 6a56 	vldr	s13, [pc, #344]	; 80017ec <CDC_On_Receive+0x25c>
 8001694:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001698:	4955      	ldr	r1, [pc, #340]	; (80017f0 <CDC_On_Receive+0x260>)
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	3310      	adds	r3, #16
 80016a8:	edc3 7a00 	vstr	s15, [r3]
				motors[k].direction = 0;
 80016ac:	4950      	ldr	r1, [pc, #320]	; (80017f0 <CDC_On_Receive+0x260>)
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	330a      	adds	r3, #10
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
			GPIOA->ODR &= ~(BIT3);
 80016c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016ca:	f023 0308 	bic.w	r3, r3, #8
 80016ce:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= motors[0].direction << 3;
 80016d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	4a46      	ldr	r2, [pc, #280]	; (80017f0 <CDC_On_Receive+0x260>)
 80016d8:	f992 200a 	ldrsb.w	r2, [r2, #10]
 80016dc:	00d2      	lsls	r2, r2, #3
 80016de:	4611      	mov	r1, r2
 80016e0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016e4:	430b      	orrs	r3, r1
 80016e6:	6153      	str	r3, [r2, #20]
			GPIOF->ODR &= ~(BIT0 | BIT1);
 80016e8:	4b42      	ldr	r3, [pc, #264]	; (80017f4 <CDC_On_Receive+0x264>)
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	4a41      	ldr	r2, [pc, #260]	; (80017f4 <CDC_On_Receive+0x264>)
 80016ee:	f023 0303 	bic.w	r3, r3, #3
 80016f2:	6153      	str	r3, [r2, #20]
			GPIOF->ODR |= motors[1].direction << 1;
 80016f4:	4b3f      	ldr	r3, [pc, #252]	; (80017f4 <CDC_On_Receive+0x264>)
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	4a3d      	ldr	r2, [pc, #244]	; (80017f0 <CDC_On_Receive+0x260>)
 80016fa:	f992 201e 	ldrsb.w	r2, [r2, #30]
 80016fe:	0052      	lsls	r2, r2, #1
 8001700:	4611      	mov	r1, r2
 8001702:	4a3c      	ldr	r2, [pc, #240]	; (80017f4 <CDC_On_Receive+0x264>)
 8001704:	430b      	orrs	r3, r1
 8001706:	6153      	str	r3, [r2, #20]
			GPIOF->ODR |= motors[2].direction;
 8001708:	4b3a      	ldr	r3, [pc, #232]	; (80017f4 <CDC_On_Receive+0x264>)
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	4a38      	ldr	r2, [pc, #224]	; (80017f0 <CDC_On_Receive+0x260>)
 800170e:	f992 2032 	ldrsb.w	r2, [r2, #50]	; 0x32
 8001712:	4611      	mov	r1, r2
 8001714:	4a37      	ldr	r2, [pc, #220]	; (80017f4 <CDC_On_Receive+0x264>)
 8001716:	430b      	orrs	r3, r1
 8001718:	6153      	str	r3, [r2, #20]
			pointing++;
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3304      	adds	r3, #4
 800171e:	61fb      	str	r3, [r7, #28]
		for(int k=0; k<3; k++){
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	3301      	adds	r3, #1
 8001724:	61bb      	str	r3, [r7, #24]
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	2b02      	cmp	r3, #2
 800172a:	f77f af6e 	ble.w	800160a <CDC_On_Receive+0x7a>
		break;
 800172e:	e057      	b.n	80017e0 <CDC_On_Receive+0x250>
		pointing = USB_command_translate(*length,1);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2101      	movs	r1, #1
 8001736:	4618      	mov	r0, r3
 8001738:	f000 fa96 	bl	8001c68 <USB_command_translate>
 800173c:	61f8      	str	r0, [r7, #28]
		thrower_data[0] = *pointing;
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	edd3 7a00 	vldr	s15, [r3]
 8001744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001748:	ee17 2a90 	vmov	r2, s15
 800174c:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <CDC_On_Receive+0x268>)
 800174e:	601a      	str	r2, [r3, #0]
		switch(thrower_data[0]){
 8001750:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <CDC_On_Receive+0x268>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00a      	beq.n	800176e <CDC_On_Receive+0x1de>
			thrower_data[0] = (47+thrower_data[0]*20) << 1;
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <CDC_On_Receive+0x268>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	332f      	adds	r3, #47	; 0x2f
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4a23      	ldr	r2, [pc, #140]	; (80017f8 <CDC_On_Receive+0x268>)
 800176a:	6013      	str	r3, [r2, #0]
			break;
 800176c:	e000      	b.n	8001770 <CDC_On_Receive+0x1e0>
			break;
 800176e:	bf00      	nop
		DMA_buf_load(&dma_buf[0],CheckSum(thrower_data[0]));
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <CDC_On_Receive+0x268>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f000 fc1b 	bl	8001fb0 <CheckSum>
 800177a:	4603      	mov	r3, r0
 800177c:	b29b      	uxth	r3, r3
 800177e:	4619      	mov	r1, r3
 8001780:	481e      	ldr	r0, [pc, #120]	; (80017fc <CDC_On_Receive+0x26c>)
 8001782:	f000 fbe1 	bl	8001f48 <DMA_buf_load>
		break;
 8001786:	e02b      	b.n	80017e0 <CDC_On_Receive+0x250>
		pointing = USB_command_translate(*length,3);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2103      	movs	r1, #3
 800178e:	4618      	mov	r0, r3
 8001790:	f000 fa6a 	bl	8001c68 <USB_command_translate>
 8001794:	61f8      	str	r0, [r7, #28]
		Kp = *pointing / 100.0;
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	ed93 7a00 	vldr	s14, [r3]
 800179c:	eddf 6a13 	vldr	s13, [pc, #76]	; 80017ec <CDC_On_Receive+0x25c>
 80017a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <CDC_On_Receive+0x270>)
 80017a6:	edc3 7a00 	vstr	s15, [r3]
		pointing++;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3304      	adds	r3, #4
 80017ae:	61fb      	str	r3, [r7, #28]
		Ki = *pointing/100.0;
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	ed93 7a00 	vldr	s14, [r3]
 80017b6:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80017ec <CDC_On_Receive+0x25c>
 80017ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <CDC_On_Receive+0x274>)
 80017c0:	edc3 7a00 	vstr	s15, [r3]
		pointing++;
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	3304      	adds	r3, #4
 80017c8:	61fb      	str	r3, [r7, #28]
		Kd = *pointing/100.0;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	ed93 7a00 	vldr	s14, [r3]
 80017d0:	eddf 6a06 	vldr	s13, [pc, #24]	; 80017ec <CDC_On_Receive+0x25c>
 80017d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <CDC_On_Receive+0x278>)
 80017da:	edc3 7a00 	vstr	s15, [r3]
		break;
 80017de:	bf00      	nop
}
 80017e0:	bf00      	nop
 80017e2:	3720      	adds	r7, #32
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bdb0      	pop	{r4, r5, r7, pc}
 80017e8:	200006b8 	.word	0x200006b8
 80017ec:	42c80000 	.word	0x42c80000
 80017f0:	200005c8 	.word	0x200005c8
 80017f4:	48001400 	.word	0x48001400
 80017f8:	20000008 	.word	0x20000008
 80017fc:	20000238 	.word	0x20000238
 8001800:	20000018 	.word	0x20000018
 8001804:	2000001c 	.word	0x2000001c
 8001808:	20000020 	.word	0x20000020

0800180c <TIM7_IRQHandler>:

void DMA1_Channel1_IRQnHandler(void){

}

void TIM7_IRQHandler(void){
 800180c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0

	// PID Main Handler
	max_enc = 3000;
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <TIM7_IRQHandler+0x50>)
 8001816:	4a12      	ldr	r2, [pc, #72]	; (8001860 <TIM7_IRQHandler+0x54>)
 8001818:	601a      	str	r2, [r3, #0]
	//int16_t enc_delta;

//	char transmit[10] = {0};

	// Load the motor encoder variables with the latest Encoder values
	motors[0].enc_val = TIM3->CNT;
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <TIM7_IRQHandler+0x58>)
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	b29a      	uxth	r2, r3
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <TIM7_IRQHandler+0x5c>)
 8001822:	819a      	strh	r2, [r3, #12]
	motors[1].enc_val = TIM2->CNT;
 8001824:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	b29a      	uxth	r2, r3
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <TIM7_IRQHandler+0x5c>)
 800182e:	841a      	strh	r2, [r3, #32]
	motors[2].enc_val = TIM4->CNT;
 8001830:	4b0e      	ldr	r3, [pc, #56]	; (800186c <TIM7_IRQHandler+0x60>)
 8001832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001834:	b29a      	uxth	r2, r3
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <TIM7_IRQHandler+0x5c>)
 8001838:	869a      	strh	r2, [r3, #52]	; 0x34

	TIM3->CNT = enc_offset;
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <TIM7_IRQHandler+0x64>)
 800183c:	881a      	ldrh	r2, [r3, #0]
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <TIM7_IRQHandler+0x58>)
 8001840:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT = enc_offset;
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <TIM7_IRQHandler+0x64>)
 8001844:	881a      	ldrh	r2, [r3, #0]
 8001846:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800184a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = enc_offset;
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <TIM7_IRQHandler+0x64>)
 800184e:	881a      	ldrh	r2, [r3, #0]
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <TIM7_IRQHandler+0x60>)
 8001852:	625a      	str	r2, [r3, #36]	; 0x24

	for(int k=0; k<3; k++){
 8001854:	2300      	movs	r3, #0
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	e1b9      	b.n	8001bce <TIM7_IRQHandler+0x3c2>
 800185a:	bf00      	nop
 800185c:	20000494 	.word	0x20000494
 8001860:	453b8000 	.word	0x453b8000
 8001864:	40000400 	.word	0x40000400
 8001868:	200005c8 	.word	0x200005c8
 800186c:	40000800 	.word	0x40000800
 8001870:	20000004 	.word	0x20000004
		if(k==0){
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d124      	bne.n	80018c4 <TIM7_IRQHandler+0xb8>
			enc_delta = enc_offset - motors[k].enc_val;
 800187a:	4bbd      	ldr	r3, [pc, #756]	; (8001b70 <TIM7_IRQHandler+0x364>)
 800187c:	8819      	ldrh	r1, [r3, #0]
 800187e:	48bd      	ldr	r0, [pc, #756]	; (8001b74 <TIM7_IRQHandler+0x368>)
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4403      	add	r3, r0
 800188c:	330c      	adds	r3, #12
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	1acb      	subs	r3, r1, r3
 8001892:	b29b      	uxth	r3, r3
 8001894:	b21a      	sxth	r2, r3
 8001896:	4bb8      	ldr	r3, [pc, #736]	; (8001b78 <TIM7_IRQHandler+0x36c>)
 8001898:	801a      	strh	r2, [r3, #0]
			if(motors[k].direction == 1){
 800189a:	49b6      	ldr	r1, [pc, #728]	; (8001b74 <TIM7_IRQHandler+0x368>)
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	330a      	adds	r3, #10
 80018aa:	f993 3000 	ldrsb.w	r3, [r3]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d108      	bne.n	80018c4 <TIM7_IRQHandler+0xb8>
				enc_delta = -enc_delta;
 80018b2:	4bb1      	ldr	r3, [pc, #708]	; (8001b78 <TIM7_IRQHandler+0x36c>)
 80018b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	425b      	negs	r3, r3
 80018bc:	b29b      	uxth	r3, r3
 80018be:	b21a      	sxth	r2, r3
 80018c0:	4bad      	ldr	r3, [pc, #692]	; (8001b78 <TIM7_IRQHandler+0x36c>)
 80018c2:	801a      	strh	r2, [r3, #0]
			}
		}
		if(k==1 || k==2){
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d002      	beq.n	80018d0 <TIM7_IRQHandler+0xc4>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d124      	bne.n	800191a <TIM7_IRQHandler+0x10e>
			enc_delta = enc_offset - motors[k].enc_val;
 80018d0:	4ba7      	ldr	r3, [pc, #668]	; (8001b70 <TIM7_IRQHandler+0x364>)
 80018d2:	8819      	ldrh	r1, [r3, #0]
 80018d4:	48a7      	ldr	r0, [pc, #668]	; (8001b74 <TIM7_IRQHandler+0x368>)
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4403      	add	r3, r0
 80018e2:	330c      	adds	r3, #12
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	1acb      	subs	r3, r1, r3
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	4ba2      	ldr	r3, [pc, #648]	; (8001b78 <TIM7_IRQHandler+0x36c>)
 80018ee:	801a      	strh	r2, [r3, #0]
			if(motors[k].direction == 0){
 80018f0:	49a0      	ldr	r1, [pc, #640]	; (8001b74 <TIM7_IRQHandler+0x368>)
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	330a      	adds	r3, #10
 8001900:	f993 3000 	ldrsb.w	r3, [r3]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d108      	bne.n	800191a <TIM7_IRQHandler+0x10e>
				enc_delta = -enc_delta;
 8001908:	4b9b      	ldr	r3, [pc, #620]	; (8001b78 <TIM7_IRQHandler+0x36c>)
 800190a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190e:	b29b      	uxth	r3, r3
 8001910:	425b      	negs	r3, r3
 8001912:	b29b      	uxth	r3, r3
 8001914:	b21a      	sxth	r2, r3
 8001916:	4b98      	ldr	r3, [pc, #608]	; (8001b78 <TIM7_IRQHandler+0x36c>)
 8001918:	801a      	strh	r2, [r3, #0]
			}
		}

//		error = the_speed*timer_s*0.5 - enc_delta;
		error = max_enc*timer_s*motors[k].USB_value - enc_delta;
 800191a:	4b98      	ldr	r3, [pc, #608]	; (8001b7c <TIM7_IRQHandler+0x370>)
 800191c:	ed93 7a00 	vldr	s14, [r3]
 8001920:	4b97      	ldr	r3, [pc, #604]	; (8001b80 <TIM7_IRQHandler+0x374>)
 8001922:	edd3 7a00 	vldr	s15, [r3]
 8001926:	ee27 7a27 	vmul.f32	s14, s14, s15
 800192a:	4992      	ldr	r1, [pc, #584]	; (8001b74 <TIM7_IRQHandler+0x368>)
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	3310      	adds	r3, #16
 800193a:	edd3 7a00 	vldr	s15, [r3]
 800193e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001942:	4b8d      	ldr	r3, [pc, #564]	; (8001b78 <TIM7_IRQHandler+0x36c>)
 8001944:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001954:	4b8b      	ldr	r3, [pc, #556]	; (8001b84 <TIM7_IRQHandler+0x378>)
 8001956:	edc3 7a00 	vstr	s15, [r3]

		if(error > 5 || error < -5){
 800195a:	4b8a      	ldr	r3, [pc, #552]	; (8001b84 <TIM7_IRQHandler+0x378>)
 800195c:	edd3 7a00 	vldr	s15, [r3]
 8001960:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196c:	dc0a      	bgt.n	8001984 <TIM7_IRQHandler+0x178>
 800196e:	4b85      	ldr	r3, [pc, #532]	; (8001b84 <TIM7_IRQHandler+0x378>)
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8001978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800197c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001980:	f140 8110 	bpl.w	8001ba4 <TIM7_IRQHandler+0x398>
			P = Kp*error;
 8001984:	4b80      	ldr	r3, [pc, #512]	; (8001b88 <TIM7_IRQHandler+0x37c>)
 8001986:	ed93 7a00 	vldr	s14, [r3]
 800198a:	4b7e      	ldr	r3, [pc, #504]	; (8001b84 <TIM7_IRQHandler+0x378>)
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001994:	4b7d      	ldr	r3, [pc, #500]	; (8001b8c <TIM7_IRQHandler+0x380>)
 8001996:	edc3 7a00 	vstr	s15, [r3]

			I = (motors[k].integration + error)*Ki;
 800199a:	4976      	ldr	r1, [pc, #472]	; (8001b74 <TIM7_IRQHandler+0x368>)
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	330e      	adds	r3, #14
 80019aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b6:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <TIM7_IRQHandler+0x378>)
 80019b8:	edd3 7a00 	vldr	s15, [r3]
 80019bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019c0:	4b73      	ldr	r3, [pc, #460]	; (8001b90 <TIM7_IRQHandler+0x384>)
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ca:	4b72      	ldr	r3, [pc, #456]	; (8001b94 <TIM7_IRQHandler+0x388>)
 80019cc:	edc3 7a00 	vstr	s15, [r3]
			motors[k].integration = motors[k].integration + error;
 80019d0:	4968      	ldr	r1, [pc, #416]	; (8001b74 <TIM7_IRQHandler+0x368>)
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	330e      	adds	r3, #14
 80019e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ec:	4b65      	ldr	r3, [pc, #404]	; (8001b84 <TIM7_IRQHandler+0x378>)
 80019ee:	edd3 7a00 	vldr	s15, [r3]
 80019f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019fa:	ee17 3a90 	vmov	r3, s15
 80019fe:	b218      	sxth	r0, r3
 8001a00:	495c      	ldr	r1, [pc, #368]	; (8001b74 <TIM7_IRQHandler+0x368>)
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	330e      	adds	r3, #14
 8001a10:	4602      	mov	r2, r0
 8001a12:	801a      	strh	r2, [r3, #0]

			D = (error-motors[k].prev_err)*timer_s*Kd;
 8001a14:	4b5b      	ldr	r3, [pc, #364]	; (8001b84 <TIM7_IRQHandler+0x378>)
 8001a16:	ed93 7a00 	vldr	s14, [r3]
 8001a1a:	4956      	ldr	r1, [pc, #344]	; (8001b74 <TIM7_IRQHandler+0x368>)
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	3308      	adds	r3, #8
 8001a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a3a:	4b51      	ldr	r3, [pc, #324]	; (8001b80 <TIM7_IRQHandler+0x374>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a44:	4b54      	ldr	r3, [pc, #336]	; (8001b98 <TIM7_IRQHandler+0x38c>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4e:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <TIM7_IRQHandler+0x390>)
 8001a50:	edc3 7a00 	vstr	s15, [r3]
			motors[k].prev_err = error;
 8001a54:	4b4b      	ldr	r3, [pc, #300]	; (8001b84 <TIM7_IRQHandler+0x378>)
 8001a56:	edd3 7a00 	vldr	s15, [r3]
 8001a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a5e:	ee17 3a90 	vmov	r3, s15
 8001a62:	b218      	sxth	r0, r3
 8001a64:	4943      	ldr	r1, [pc, #268]	; (8001b74 <TIM7_IRQHandler+0x368>)
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	3308      	adds	r3, #8
 8001a74:	4602      	mov	r2, r0
 8001a76:	801a      	strh	r2, [r3, #0]

			motors[k].speed = motors[k].speed + (D+I+P)/(max_enc*timer_s/0.5);
 8001a78:	493e      	ldr	r1, [pc, #248]	; (8001b74 <TIM7_IRQHandler+0x368>)
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	3304      	adds	r3, #4
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd28 	bl	80004e0 <__aeabi_f2d>
 8001a90:	4604      	mov	r4, r0
 8001a92:	460d      	mov	r5, r1
 8001a94:	4b41      	ldr	r3, [pc, #260]	; (8001b9c <TIM7_IRQHandler+0x390>)
 8001a96:	ed93 7a00 	vldr	s14, [r3]
 8001a9a:	4b3e      	ldr	r3, [pc, #248]	; (8001b94 <TIM7_IRQHandler+0x388>)
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aa4:	4b39      	ldr	r3, [pc, #228]	; (8001b8c <TIM7_IRQHandler+0x380>)
 8001aa6:	edd3 7a00 	vldr	s15, [r3]
 8001aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aae:	ee17 0a90 	vmov	r0, s15
 8001ab2:	f7fe fd15 	bl	80004e0 <__aeabi_f2d>
 8001ab6:	4680      	mov	r8, r0
 8001ab8:	4689      	mov	r9, r1
 8001aba:	4b30      	ldr	r3, [pc, #192]	; (8001b7c <TIM7_IRQHandler+0x370>)
 8001abc:	ed93 7a00 	vldr	s14, [r3]
 8001ac0:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <TIM7_IRQHandler+0x374>)
 8001ac2:	edd3 7a00 	vldr	s15, [r3]
 8001ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aca:	ee17 0a90 	vmov	r0, s15
 8001ace:	f7fe fd07 	bl	80004e0 <__aeabi_f2d>
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <TIM7_IRQHandler+0x394>)
 8001ad8:	f7fe fe84 	bl	80007e4 <__aeabi_ddiv>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4640      	mov	r0, r8
 8001ae2:	4649      	mov	r1, r9
 8001ae4:	f7fe fe7e 	bl	80007e4 <__aeabi_ddiv>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4620      	mov	r0, r4
 8001aee:	4629      	mov	r1, r5
 8001af0:	f7fe fb98 	bl	8000224 <__adddf3>
 8001af4:	4603      	mov	r3, r0
 8001af6:	460c      	mov	r4, r1
 8001af8:	4618      	mov	r0, r3
 8001afa:	4621      	mov	r1, r4
 8001afc:	f7fe fff8 	bl	8000af0 <__aeabi_d2f>
 8001b00:	491c      	ldr	r1, [pc, #112]	; (8001b74 <TIM7_IRQHandler+0x368>)
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	3304      	adds	r3, #4
 8001b10:	6018      	str	r0, [r3, #0]
			//motors[k].speed = (D+I+P)/(max_enc*timer_s/0.5);	// TEST
			if(motors[k].speed>1){
 8001b12:	4918      	ldr	r1, [pc, #96]	; (8001b74 <TIM7_IRQHandler+0x368>)
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	440b      	add	r3, r1
 8001b20:	3304      	adds	r3, #4
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b32:	dd0a      	ble.n	8001b4a <TIM7_IRQHandler+0x33e>
				motors[k].speed = 1;
 8001b34:	490f      	ldr	r1, [pc, #60]	; (8001b74 <TIM7_IRQHandler+0x368>)
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	3304      	adds	r3, #4
 8001b44:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b48:	601a      	str	r2, [r3, #0]
			}
			motors[k].prev_enc = motors[k].enc_val;
 8001b4a:	490a      	ldr	r1, [pc, #40]	; (8001b74 <TIM7_IRQHandler+0x368>)
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	440b      	add	r3, r1
 8001b58:	330c      	adds	r3, #12
 8001b5a:	8818      	ldrh	r0, [r3, #0]
 8001b5c:	4905      	ldr	r1, [pc, #20]	; (8001b74 <TIM7_IRQHandler+0x368>)
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	801a      	strh	r2, [r3, #0]
 8001b6e:	e02b      	b.n	8001bc8 <TIM7_IRQHandler+0x3bc>
 8001b70:	20000004 	.word	0x20000004
 8001b74:	200005c8 	.word	0x200005c8
 8001b78:	200006b0 	.word	0x200006b0
 8001b7c:	20000494 	.word	0x20000494
 8001b80:	20000000 	.word	0x20000000
 8001b84:	200006b4 	.word	0x200006b4
 8001b88:	20000018 	.word	0x20000018
 8001b8c:	2000071c 	.word	0x2000071c
 8001b90:	2000001c 	.word	0x2000001c
 8001b94:	200006cc 	.word	0x200006cc
 8001b98:	20000020 	.word	0x20000020
 8001b9c:	20000490 	.word	0x20000490
 8001ba0:	3fe00000 	.word	0x3fe00000
		}
		else{
			motors[k].prev_enc = motors[k].enc_val;
 8001ba4:	492c      	ldr	r1, [pc, #176]	; (8001c58 <TIM7_IRQHandler+0x44c>)
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	330c      	adds	r3, #12
 8001bb4:	8818      	ldrh	r0, [r3, #0]
 8001bb6:	4928      	ldr	r1, [pc, #160]	; (8001c58 <TIM7_IRQHandler+0x44c>)
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	801a      	strh	r2, [r3, #0]
	for(int k=0; k<3; k++){
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	f77f ae4f 	ble.w	8001874 <TIM7_IRQHandler+0x68>
		}
	}
	TIM1->CCR1 = TIM1->ARR * motors[0].speed;	// Load the motor PWM register with the value
 8001bd6:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <TIM7_IRQHandler+0x450>)
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	ee07 3a90 	vmov	s15, r3
 8001bde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <TIM7_IRQHandler+0x44c>)
 8001be4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <TIM7_IRQHandler+0x450>)
 8001bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bf2:	ee17 2a90 	vmov	r2, s15
 8001bf6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = TIM1->ARR * motors[1].speed;	// Load the motor PWM register with the value
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <TIM7_IRQHandler+0x450>)
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	ee07 3a90 	vmov	s15, r3
 8001c00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <TIM7_IRQHandler+0x44c>)
 8001c06:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c0e:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <TIM7_IRQHandler+0x450>)
 8001c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c14:	ee17 2a90 	vmov	r2, s15
 8001c18:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = TIM1->ARR * motors[2].speed;	// Load the motor PWM register with the value
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <TIM7_IRQHandler+0x450>)
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	ee07 3a90 	vmov	s15, r3
 8001c22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <TIM7_IRQHandler+0x44c>)
 8001c28:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <TIM7_IRQHandler+0x450>)
 8001c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c36:	ee17 2a90 	vmov	r2, s15
 8001c3a:	63da      	str	r2, [r3, #60]	; 0x3c

	GPIOB->ODR ^= BIT4;
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <TIM7_IRQHandler+0x454>)
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <TIM7_IRQHandler+0x454>)
 8001c42:	f083 0310 	eor.w	r3, r3, #16
 8001c46:	6153      	str	r3, [r2, #20]
	TIM7->SR = 0;
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <TIM7_IRQHandler+0x458>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c58:	200005c8 	.word	0x200005c8
 8001c5c:	40012c00 	.word	0x40012c00
 8001c60:	48000400 	.word	0x48000400
 8001c64:	40001400 	.word	0x40001400

08001c68 <USB_command_translate>:


float* USB_command_translate(uint32_t message_length, uint8_t num_of_vals){
 8001c68:	b5b0      	push	{r4, r5, r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	70fb      	strb	r3, [r7, #3]
	int8_t sign = 1;
 8001c74:	2301      	movs	r3, #1
 8001c76:	75fb      	strb	r3, [r7, #23]
	uint8_t count = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	75bb      	strb	r3, [r7, #22]
	uint8_t num_count = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	757b      	strb	r3, [r7, #21]
	uint8_t decimal_loc = 100;
 8001c80:	2364      	movs	r3, #100	; 0x64
 8001c82:	753b      	strb	r3, [r7, #20]
	uint8_t error = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	74fb      	strb	r3, [r7, #19]
	temp[0] = 0;
 8001c88:	4ba9      	ldr	r3, [pc, #676]	; (8001f30 <USB_command_translate+0x2c8>)
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
	temp[1] = 0;
 8001c90:	4ba7      	ldr	r3, [pc, #668]	; (8001f30 <USB_command_translate+0x2c8>)
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	605a      	str	r2, [r3, #4]
	temp[2] = 0;
 8001c98:	4ba5      	ldr	r3, [pc, #660]	; (8001f30 <USB_command_translate+0x2c8>)
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]

	for(int k=2; k<message_length; k++){
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	e110      	b.n	8001ec8 <USB_command_translate+0x260>

		// Set the sign of the number
		if(receive[k] == 45){
 8001ca6:	4aa3      	ldr	r2, [pc, #652]	; (8001f34 <USB_command_translate+0x2cc>)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b2d      	cmp	r3, #45	; 0x2d
 8001cb0:	d102      	bne.n	8001cb8 <USB_command_translate+0x50>
			sign = -1;
 8001cb2:	23ff      	movs	r3, #255	; 0xff
 8001cb4:	75fb      	strb	r3, [r7, #23]
 8001cb6:	e104      	b.n	8001ec2 <USB_command_translate+0x25a>
		}
		// break, if there are four digits in any number
		else if(count == 4){
 8001cb8:	7dbb      	ldrb	r3, [r7, #22]
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d10c      	bne.n	8001cd8 <USB_command_translate+0x70>
			temp[0] = 0;
 8001cbe:	4b9c      	ldr	r3, [pc, #624]	; (8001f30 <USB_command_translate+0x2c8>)
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
			temp[1] = 0;
 8001cc6:	4b9a      	ldr	r3, [pc, #616]	; (8001f30 <USB_command_translate+0x2c8>)
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	605a      	str	r2, [r3, #4]
			temp[2] = 0;
 8001cce:	4b98      	ldr	r3, [pc, #608]	; (8001f30 <USB_command_translate+0x2c8>)
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	e0f4      	b.n	8001ec2 <USB_command_translate+0x25a>
		}

		else if(receive[k] == 58){	// If symbol is ":"
 8001cd8:	4a96      	ldr	r2, [pc, #600]	; (8001f34 <USB_command_translate+0x2cc>)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4413      	add	r3, r2
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b3a      	cmp	r3, #58	; 0x3a
 8001ce2:	d165      	bne.n	8001db0 <USB_command_translate+0x148>
			temp[num_count] = sign*temp[num_count]/pow(10,3-count);	//Finish up the previous number
 8001ce4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ce8:	ee07 3a90 	vmov	s15, r3
 8001cec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cf0:	7d7b      	ldrb	r3, [r7, #21]
 8001cf2:	4a8f      	ldr	r2, [pc, #572]	; (8001f30 <USB_command_translate+0x2c8>)
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d00:	ee17 0a90 	vmov	r0, s15
 8001d04:	f7fe fbec 	bl	80004e0 <__aeabi_f2d>
 8001d08:	4604      	mov	r4, r0
 8001d0a:	460d      	mov	r5, r1
 8001d0c:	7dbb      	ldrb	r3, [r7, #22]
 8001d0e:	f1c3 0303 	rsb	r3, r3, #3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fbd2 	bl	80004bc <__aeabi_i2d>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	ec43 2b11 	vmov	d1, r2, r3
 8001d20:	ed9f 0b81 	vldr	d0, [pc, #516]	; 8001f28 <USB_command_translate+0x2c0>
 8001d24:	f009 fb3c 	bl	800b3a0 <pow>
 8001d28:	ec53 2b10 	vmov	r2, r3, d0
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	4629      	mov	r1, r5
 8001d30:	f7fe fd58 	bl	80007e4 <__aeabi_ddiv>
 8001d34:	4603      	mov	r3, r0
 8001d36:	460c      	mov	r4, r1
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4623      	mov	r3, r4
 8001d3c:	7d7c      	ldrb	r4, [r7, #21]
 8001d3e:	4610      	mov	r0, r2
 8001d40:	4619      	mov	r1, r3
 8001d42:	f7fe fed5 	bl	8000af0 <__aeabi_d2f>
 8001d46:	4601      	mov	r1, r0
 8001d48:	4a79      	ldr	r2, [pc, #484]	; (8001f30 <USB_command_translate+0x2c8>)
 8001d4a:	00a3      	lsls	r3, r4, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	6019      	str	r1, [r3, #0]
			if(temp[num_count] > 100 || temp[num_count] < -100) error = 1; // Check if the number is in boundaries
 8001d50:	7d7b      	ldrb	r3, [r7, #21]
 8001d52:	4a77      	ldr	r2, [pc, #476]	; (8001f30 <USB_command_translate+0x2c8>)
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001f38 <USB_command_translate+0x2d0>
 8001d60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d68:	dc0c      	bgt.n	8001d84 <USB_command_translate+0x11c>
 8001d6a:	7d7b      	ldrb	r3, [r7, #21]
 8001d6c:	4a70      	ldr	r2, [pc, #448]	; (8001f30 <USB_command_translate+0x2c8>)
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	edd3 7a00 	vldr	s15, [r3]
 8001d76:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001f3c <USB_command_translate+0x2d4>
 8001d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d82:	d501      	bpl.n	8001d88 <USB_command_translate+0x120>
 8001d84:	2301      	movs	r3, #1
 8001d86:	74fb      	strb	r3, [r7, #19]
			USB_test_fun[num_count] = temp[num_count];
 8001d88:	7d7a      	ldrb	r2, [r7, #21]
 8001d8a:	7d7b      	ldrb	r3, [r7, #21]
 8001d8c:	4968      	ldr	r1, [pc, #416]	; (8001f30 <USB_command_translate+0x2c8>)
 8001d8e:	0092      	lsls	r2, r2, #2
 8001d90:	440a      	add	r2, r1
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	496a      	ldr	r1, [pc, #424]	; (8001f40 <USB_command_translate+0x2d8>)
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	601a      	str	r2, [r3, #0]
			count=0;				// Set digit count to 0
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	75bb      	strb	r3, [r7, #22]
			decimal_loc = 100;		// Set the decimal point location
 8001da0:	2364      	movs	r3, #100	; 0x64
 8001da2:	753b      	strb	r3, [r7, #20]
			num_count++;			// Increment the number count
 8001da4:	7d7b      	ldrb	r3, [r7, #21]
 8001da6:	3301      	adds	r3, #1
 8001da8:	757b      	strb	r3, [r7, #21]
			sign=1;					// Reset the sign for the next number
 8001daa:	2301      	movs	r3, #1
 8001dac:	75fb      	strb	r3, [r7, #23]
 8001dae:	e088      	b.n	8001ec2 <USB_command_translate+0x25a>
		}
		else if(receive[k] == 62){	// If symbol is ">" (terminate)
 8001db0:	4a60      	ldr	r2, [pc, #384]	; (8001f34 <USB_command_translate+0x2cc>)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4413      	add	r3, r2
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b3e      	cmp	r3, #62	; 0x3e
 8001dba:	d15f      	bne.n	8001e7c <USB_command_translate+0x214>
			temp[num_count] = sign*temp[num_count]/pow(10,3-count); // Finsih up the previous number
 8001dbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dc8:	7d7b      	ldrb	r3, [r7, #21]
 8001dca:	4a59      	ldr	r2, [pc, #356]	; (8001f30 <USB_command_translate+0x2c8>)
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd8:	ee17 0a90 	vmov	r0, s15
 8001ddc:	f7fe fb80 	bl	80004e0 <__aeabi_f2d>
 8001de0:	4604      	mov	r4, r0
 8001de2:	460d      	mov	r5, r1
 8001de4:	7dbb      	ldrb	r3, [r7, #22]
 8001de6:	f1c3 0303 	rsb	r3, r3, #3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fb66 	bl	80004bc <__aeabi_i2d>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	ec43 2b11 	vmov	d1, r2, r3
 8001df8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8001f28 <USB_command_translate+0x2c0>
 8001dfc:	f009 fad0 	bl	800b3a0 <pow>
 8001e00:	ec53 2b10 	vmov	r2, r3, d0
 8001e04:	4620      	mov	r0, r4
 8001e06:	4629      	mov	r1, r5
 8001e08:	f7fe fcec 	bl	80007e4 <__aeabi_ddiv>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	460c      	mov	r4, r1
 8001e10:	461a      	mov	r2, r3
 8001e12:	4623      	mov	r3, r4
 8001e14:	7d7c      	ldrb	r4, [r7, #21]
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f7fe fe69 	bl	8000af0 <__aeabi_d2f>
 8001e1e:	4601      	mov	r1, r0
 8001e20:	4a43      	ldr	r2, [pc, #268]	; (8001f30 <USB_command_translate+0x2c8>)
 8001e22:	00a3      	lsls	r3, r4, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	6019      	str	r1, [r3, #0]
			if(temp[num_count] > 100 || temp[num_count] < -100) error = 1; // Check if the number is in boundaries
 8001e28:	7d7b      	ldrb	r3, [r7, #21]
 8001e2a:	4a41      	ldr	r2, [pc, #260]	; (8001f30 <USB_command_translate+0x2c8>)
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	edd3 7a00 	vldr	s15, [r3]
 8001e34:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001f38 <USB_command_translate+0x2d0>
 8001e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e40:	dc0c      	bgt.n	8001e5c <USB_command_translate+0x1f4>
 8001e42:	7d7b      	ldrb	r3, [r7, #21]
 8001e44:	4a3a      	ldr	r2, [pc, #232]	; (8001f30 <USB_command_translate+0x2c8>)
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001f3c <USB_command_translate+0x2d4>
 8001e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5a:	d501      	bpl.n	8001e60 <USB_command_translate+0x1f8>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	74fb      	strb	r3, [r7, #19]
			USB_test_fun[num_count] = temp[num_count];
 8001e60:	7d7a      	ldrb	r2, [r7, #21]
 8001e62:	7d7b      	ldrb	r3, [r7, #21]
 8001e64:	4932      	ldr	r1, [pc, #200]	; (8001f30 <USB_command_translate+0x2c8>)
 8001e66:	0092      	lsls	r2, r2, #2
 8001e68:	440a      	add	r2, r1
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	4934      	ldr	r1, [pc, #208]	; (8001f40 <USB_command_translate+0x2d8>)
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	601a      	str	r2, [r3, #0]
			num_count++;
 8001e74:	7d7b      	ldrb	r3, [r7, #21]
 8001e76:	3301      	adds	r3, #1
 8001e78:	757b      	strb	r3, [r7, #21]
			break;
 8001e7a:	e02a      	b.n	8001ed2 <USB_command_translate+0x26a>
		}
		// Number manipulation
		else{
			temp[num_count] = temp[num_count] + (receive[k]-48)*decimal_loc;
 8001e7c:	7d7b      	ldrb	r3, [r7, #21]
 8001e7e:	4a2c      	ldr	r2, [pc, #176]	; (8001f30 <USB_command_translate+0x2c8>)
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	ed93 7a00 	vldr	s14, [r3]
 8001e88:	4a2a      	ldr	r2, [pc, #168]	; (8001f34 <USB_command_translate+0x2cc>)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	3b30      	subs	r3, #48	; 0x30
 8001e92:	7d3a      	ldrb	r2, [r7, #20]
 8001e94:	fb02 f303 	mul.w	r3, r2, r3
 8001e98:	ee07 3a90 	vmov	s15, r3
 8001e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea0:	7d7b      	ldrb	r3, [r7, #21]
 8001ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea6:	4a22      	ldr	r2, [pc, #136]	; (8001f30 <USB_command_translate+0x2c8>)
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	edc3 7a00 	vstr	s15, [r3]
			decimal_loc = decimal_loc/10;
 8001eb0:	7d3b      	ldrb	r3, [r7, #20]
 8001eb2:	4a24      	ldr	r2, [pc, #144]	; (8001f44 <USB_command_translate+0x2dc>)
 8001eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb8:	08db      	lsrs	r3, r3, #3
 8001eba:	753b      	strb	r3, [r7, #20]
			count++;
 8001ebc:	7dbb      	ldrb	r3, [r7, #22]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	75bb      	strb	r3, [r7, #22]
	for(int k=2; k<message_length; k++){
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	f63f aeea 	bhi.w	8001ca6 <USB_command_translate+0x3e>
		}
	}
	// Amount of counted numbers must mathc the input parameter
	if(num_count != num_of_vals){
 8001ed2:	7d7a      	ldrb	r2, [r7, #21]
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d00d      	beq.n	8001ef6 <USB_command_translate+0x28e>
		// Send that message was not successfully read
		temp[0] = 0;
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <USB_command_translate+0x2c8>)
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
		temp[1] = 0;
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <USB_command_translate+0x2c8>)
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	605a      	str	r2, [r3, #4]
		temp[2] = 0;
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <USB_command_translate+0x2c8>)
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
		return temp;
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <USB_command_translate+0x2c8>)
 8001ef4:	e011      	b.n	8001f1a <USB_command_translate+0x2b2>
	}
	else if(error == 1){
 8001ef6:	7cfb      	ldrb	r3, [r7, #19]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d10d      	bne.n	8001f18 <USB_command_translate+0x2b0>
		temp[0] = 0;
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <USB_command_translate+0x2c8>)
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
		temp[1] = 0;
 8001f04:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <USB_command_translate+0x2c8>)
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	605a      	str	r2, [r3, #4]
		temp[2] = 0;
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <USB_command_translate+0x2c8>)
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
		return temp;
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <USB_command_translate+0x2c8>)
 8001f16:	e000      	b.n	8001f1a <USB_command_translate+0x2b2>
	}
	else{
		return temp;
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <USB_command_translate+0x2c8>)

	}
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bdb0      	pop	{r4, r5, r7, pc}
 8001f22:	bf00      	nop
 8001f24:	f3af 8000 	nop.w
 8001f28:	00000000 	.word	0x00000000
 8001f2c:	40240000 	.word	0x40240000
 8001f30:	20000260 	.word	0x20000260
 8001f34:	200006b8 	.word	0x200006b8
 8001f38:	42c80000 	.word	0x42c80000
 8001f3c:	c2c80000 	.word	0xc2c80000
 8001f40:	20000024 	.word	0x20000024
 8001f44:	cccccccd 	.word	0xcccccccd

08001f48 <DMA_buf_load>:

void* DMA_buf_load(uint16_t *buf, uint16_t val){
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
	uint32_t pos = BIT15;
 8001f54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f58:	60fb      	str	r3, [r7, #12]
	for(int k=0; k<30; k++){
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	e01d      	b.n	8001f9c <DMA_buf_load+0x54>
		if(k<16){
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b0f      	cmp	r3, #15
 8001f64:	dc11      	bgt.n	8001f8a <DMA_buf_load+0x42>
			if(val&pos){
 8001f66:	887a      	ldrh	r2, [r7, #2]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d004      	beq.n	8001f7a <DMA_buf_load+0x32>
				*buf = 838;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f240 3246 	movw	r2, #838	; 0x346
 8001f76:	801a      	strh	r2, [r3, #0]
 8001f78:	e003      	b.n	8001f82 <DMA_buf_load+0x3a>
			}
			else{
				*buf = 419;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f240 12a3 	movw	r2, #419	; 0x1a3
 8001f80:	801a      	strh	r2, [r3, #0]
			}
			pos = pos >> 1;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	085b      	lsrs	r3, r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	e002      	b.n	8001f90 <DMA_buf_load+0x48>
		}
		else{
			*buf = 0;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	801a      	strh	r2, [r3, #0]
		}
		buf++;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3302      	adds	r3, #2
 8001f94:	607b      	str	r3, [r7, #4]
	for(int k=0; k<30; k++){
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b1d      	cmp	r3, #29
 8001fa0:	ddde      	ble.n	8001f60 <DMA_buf_load+0x18>
	}
}
 8001fa2:	bf00      	nop
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <CheckSum>:

int CheckSum(int packet){
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	int csum = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
	int csum_data = packet;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 3; i++) {
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	e009      	b.n	8001fda <CheckSum+0x2a>
	 csum ^= csum_data; // xor data by nibbles
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4053      	eors	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]
	 csum_data >>= 4;
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	111b      	asrs	r3, r3, #4
 8001fd2:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 3; i++) {
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	ddf2      	ble.n	8001fc6 <CheckSum+0x16>
	}
	csum &= 0xf;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	617b      	str	r3, [r7, #20]
	// append checksum
	packet = (packet << 4) | csum;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	607b      	str	r3, [r7, #4]
}
 8001ff2:	bf00      	nop
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	371c      	adds	r7, #28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <HAL_MspInit+0x44>)
 8002018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800201a:	4a0e      	ldr	r2, [pc, #56]	; (8002054 <HAL_MspInit+0x44>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6613      	str	r3, [r2, #96]	; 0x60
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <HAL_MspInit+0x44>)
 8002024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_MspInit+0x44>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	4a08      	ldr	r2, [pc, #32]	; (8002054 <HAL_MspInit+0x44>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002038:	6593      	str	r3, [r2, #88]	; 0x58
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_MspInit+0x44>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002046:	f002 fbd9 	bl	80047fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000

08002058 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a38      	ldr	r2, [pc, #224]	; (8002148 <HAL_TIM_PWM_MspInit+0xf0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d114      	bne.n	8002094 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800206a:	4b38      	ldr	r3, [pc, #224]	; (800214c <HAL_TIM_PWM_MspInit+0xf4>)
 800206c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206e:	4a37      	ldr	r2, [pc, #220]	; (800214c <HAL_TIM_PWM_MspInit+0xf4>)
 8002070:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002074:	6613      	str	r3, [r2, #96]	; 0x60
 8002076:	4b35      	ldr	r3, [pc, #212]	; (800214c <HAL_TIM_PWM_MspInit+0xf4>)
 8002078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	2018      	movs	r0, #24
 8002088:	f000 fb6b 	bl	8002762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800208c:	2018      	movs	r0, #24
 800208e:	f000 fb82 	bl	8002796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002092:	e055      	b.n	8002140 <HAL_TIM_PWM_MspInit+0xe8>
  else if(htim_pwm->Instance==TIM8)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a2d      	ldr	r2, [pc, #180]	; (8002150 <HAL_TIM_PWM_MspInit+0xf8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d10c      	bne.n	80020b8 <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800209e:	4b2b      	ldr	r3, [pc, #172]	; (800214c <HAL_TIM_PWM_MspInit+0xf4>)
 80020a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a2:	4a2a      	ldr	r2, [pc, #168]	; (800214c <HAL_TIM_PWM_MspInit+0xf4>)
 80020a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020a8:	6613      	str	r3, [r2, #96]	; 0x60
 80020aa:	4b28      	ldr	r3, [pc, #160]	; (800214c <HAL_TIM_PWM_MspInit+0xf4>)
 80020ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
}
 80020b6:	e043      	b.n	8002140 <HAL_TIM_PWM_MspInit+0xe8>
  else if(htim_pwm->Instance==TIM15)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a25      	ldr	r2, [pc, #148]	; (8002154 <HAL_TIM_PWM_MspInit+0xfc>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d13e      	bne.n	8002140 <HAL_TIM_PWM_MspInit+0xe8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80020c2:	4b22      	ldr	r3, [pc, #136]	; (800214c <HAL_TIM_PWM_MspInit+0xf4>)
 80020c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c6:	4a21      	ldr	r2, [pc, #132]	; (800214c <HAL_TIM_PWM_MspInit+0xf4>)
 80020c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020cc:	6613      	str	r3, [r2, #96]	; 0x60
 80020ce:	4b1f      	ldr	r3, [pc, #124]	; (800214c <HAL_TIM_PWM_MspInit+0xf4>)
 80020d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
    hdma_tim15_ch1.Instance = DMA1_Channel1;
 80020da:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <HAL_TIM_PWM_MspInit+0x100>)
 80020dc:	4a1f      	ldr	r2, [pc, #124]	; (800215c <HAL_TIM_PWM_MspInit+0x104>)
 80020de:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1.Init.Request = DMA_REQUEST_TIM15_CH1;
 80020e0:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <HAL_TIM_PWM_MspInit+0x100>)
 80020e2:	224e      	movs	r2, #78	; 0x4e
 80020e4:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <HAL_TIM_PWM_MspInit+0x100>)
 80020e8:	2210      	movs	r2, #16
 80020ea:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <HAL_TIM_PWM_MspInit+0x100>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80020f2:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_TIM_PWM_MspInit+0x100>)
 80020f4:	2280      	movs	r2, #128	; 0x80
 80020f6:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020f8:	4b17      	ldr	r3, [pc, #92]	; (8002158 <HAL_TIM_PWM_MspInit+0x100>)
 80020fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020fe:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002100:	4b15      	ldr	r3, [pc, #84]	; (8002158 <HAL_TIM_PWM_MspInit+0x100>)
 8002102:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002106:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1.Init.Mode = DMA_CIRCULAR;
 8002108:	4b13      	ldr	r3, [pc, #76]	; (8002158 <HAL_TIM_PWM_MspInit+0x100>)
 800210a:	2220      	movs	r2, #32
 800210c:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800210e:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_TIM_PWM_MspInit+0x100>)
 8002110:	2200      	movs	r2, #0
 8002112:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1) != HAL_OK)
 8002114:	4810      	ldr	r0, [pc, #64]	; (8002158 <HAL_TIM_PWM_MspInit+0x100>)
 8002116:	f000 fb59 	bl	80027cc <HAL_DMA_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_TIM_PWM_MspInit+0xcc>
      Error_Handler();
 8002120:	f7ff ff6e 	bl	8002000 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a0c      	ldr	r2, [pc, #48]	; (8002158 <HAL_TIM_PWM_MspInit+0x100>)
 8002128:	625a      	str	r2, [r3, #36]	; 0x24
 800212a:	4a0b      	ldr	r2, [pc, #44]	; (8002158 <HAL_TIM_PWM_MspInit+0x100>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002130:	2200      	movs	r2, #0
 8002132:	2100      	movs	r1, #0
 8002134:	2018      	movs	r0, #24
 8002136:	f000 fb14 	bl	8002762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800213a:	2018      	movs	r0, #24
 800213c:	f000 fb2b 	bl	8002796 <HAL_NVIC_EnableIRQ>
}
 8002140:	bf00      	nop
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40012c00 	.word	0x40012c00
 800214c:	40021000 	.word	0x40021000
 8002150:	40013400 	.word	0x40013400
 8002154:	40014000 	.word	0x40014000
 8002158:	20000650 	.word	0x20000650
 800215c:	40020008 	.word	0x40020008

08002160 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08e      	sub	sp, #56	; 0x38
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002180:	d129      	bne.n	80021d6 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002182:	4b45      	ldr	r3, [pc, #276]	; (8002298 <HAL_TIM_Encoder_MspInit+0x138>)
 8002184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002186:	4a44      	ldr	r2, [pc, #272]	; (8002298 <HAL_TIM_Encoder_MspInit+0x138>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6593      	str	r3, [r2, #88]	; 0x58
 800218e:	4b42      	ldr	r3, [pc, #264]	; (8002298 <HAL_TIM_Encoder_MspInit+0x138>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	623b      	str	r3, [r7, #32]
 8002198:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	4b3f      	ldr	r3, [pc, #252]	; (8002298 <HAL_TIM_Encoder_MspInit+0x138>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219e:	4a3e      	ldr	r2, [pc, #248]	; (8002298 <HAL_TIM_Encoder_MspInit+0x138>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a6:	4b3c      	ldr	r3, [pc, #240]	; (8002298 <HAL_TIM_Encoder_MspInit+0x138>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M2_ENC_A_Pin|M2_ENC_B_Pin;
 80021b2:	2303      	movs	r3, #3
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021c2:	2301      	movs	r3, #1
 80021c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ca:	4619      	mov	r1, r3
 80021cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d0:	f000 fd6e 	bl	8002cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021d4:	e05b      	b.n	800228e <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a30      	ldr	r2, [pc, #192]	; (800229c <HAL_TIM_Encoder_MspInit+0x13c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d129      	bne.n	8002234 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021e0:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <HAL_TIM_Encoder_MspInit+0x138>)
 80021e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e4:	4a2c      	ldr	r2, [pc, #176]	; (8002298 <HAL_TIM_Encoder_MspInit+0x138>)
 80021e6:	f043 0302 	orr.w	r3, r3, #2
 80021ea:	6593      	str	r3, [r2, #88]	; 0x58
 80021ec:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <HAL_TIM_Encoder_MspInit+0x138>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HAL_TIM_Encoder_MspInit+0x138>)
 80021fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fc:	4a26      	ldr	r2, [pc, #152]	; (8002298 <HAL_TIM_Encoder_MspInit+0x138>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002204:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_TIM_Encoder_MspInit+0x138>)
 8002206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M1_ENC_A_Pin|M1_ENC_B_Pin;
 8002210:	2350      	movs	r3, #80	; 0x50
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002220:	2302      	movs	r3, #2
 8002222:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002228:	4619      	mov	r1, r3
 800222a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800222e:	f000 fd3f 	bl	8002cb0 <HAL_GPIO_Init>
}
 8002232:	e02c      	b.n	800228e <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a19      	ldr	r2, [pc, #100]	; (80022a0 <HAL_TIM_Encoder_MspInit+0x140>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d127      	bne.n	800228e <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800223e:	4b16      	ldr	r3, [pc, #88]	; (8002298 <HAL_TIM_Encoder_MspInit+0x138>)
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	4a15      	ldr	r2, [pc, #84]	; (8002298 <HAL_TIM_Encoder_MspInit+0x138>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	6593      	str	r3, [r2, #88]	; 0x58
 800224a:	4b13      	ldr	r3, [pc, #76]	; (8002298 <HAL_TIM_Encoder_MspInit+0x138>)
 800224c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002256:	4b10      	ldr	r3, [pc, #64]	; (8002298 <HAL_TIM_Encoder_MspInit+0x138>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225a:	4a0f      	ldr	r2, [pc, #60]	; (8002298 <HAL_TIM_Encoder_MspInit+0x138>)
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002262:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <HAL_TIM_Encoder_MspInit+0x138>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3_ENC_A_Pin|M3_ENC_B_Pin;
 800226e:	23c0      	movs	r3, #192	; 0xc0
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	2300      	movs	r3, #0
 800227c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800227e:	2302      	movs	r3, #2
 8002280:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002286:	4619      	mov	r1, r3
 8002288:	4806      	ldr	r0, [pc, #24]	; (80022a4 <HAL_TIM_Encoder_MspInit+0x144>)
 800228a:	f000 fd11 	bl	8002cb0 <HAL_GPIO_Init>
}
 800228e:	bf00      	nop
 8002290:	3738      	adds	r7, #56	; 0x38
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	40000400 	.word	0x40000400
 80022a0:	40000800 	.word	0x40000800
 80022a4:	48000400 	.word	0x48000400

080022a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	; 0x28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a35      	ldr	r2, [pc, #212]	; (800239c <HAL_TIM_MspPostInit+0xf4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d11e      	bne.n	8002308 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ca:	4b35      	ldr	r3, [pc, #212]	; (80023a0 <HAL_TIM_MspPostInit+0xf8>)
 80022cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ce:	4a34      	ldr	r2, [pc, #208]	; (80023a0 <HAL_TIM_MspPostInit+0xf8>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022d6:	4b32      	ldr	r3, [pc, #200]	; (80023a0 <HAL_TIM_MspPostInit+0xf8>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin|M3_PWM_Pin;
 80022e2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80022e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80022f4:	2306      	movs	r3, #6
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4619      	mov	r1, r3
 80022fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002302:	f000 fcd5 	bl	8002cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002306:	e045      	b.n	8002394 <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM8)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a25      	ldr	r2, [pc, #148]	; (80023a4 <HAL_TIM_MspPostInit+0xfc>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d11e      	bne.n	8002350 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002312:	4b23      	ldr	r3, [pc, #140]	; (80023a0 <HAL_TIM_MspPostInit+0xf8>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002316:	4a22      	ldr	r2, [pc, #136]	; (80023a0 <HAL_TIM_MspPostInit+0xf8>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800231e:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <HAL_TIM_MspPostInit+0xf8>)
 8002320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800232a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800232e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	2300      	movs	r3, #0
 800233a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800233c:	2302      	movs	r3, #2
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	4619      	mov	r1, r3
 8002346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800234a:	f000 fcb1 	bl	8002cb0 <HAL_GPIO_Init>
}
 800234e:	e021      	b.n	8002394 <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM15)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <HAL_TIM_MspPostInit+0x100>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d11c      	bne.n	8002394 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235a:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <HAL_TIM_MspPostInit+0xf8>)
 800235c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235e:	4a10      	ldr	r2, [pc, #64]	; (80023a0 <HAL_TIM_MspPostInit+0xf8>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <HAL_TIM_MspPostInit+0xf8>)
 8002368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERV_PWM_Pin;
 8002372:	2304      	movs	r3, #4
 8002374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2300      	movs	r3, #0
 8002380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002382:	2309      	movs	r3, #9
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERV_PWM_GPIO_Port, &GPIO_InitStruct);
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	4619      	mov	r1, r3
 800238c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002390:	f000 fc8e 	bl	8002cb0 <HAL_GPIO_Init>
}
 8002394:	bf00      	nop
 8002396:	3728      	adds	r7, #40	; 0x28
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40012c00 	.word	0x40012c00
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40013400 	.word	0x40013400
 80023a8:	40014000 	.word	0x40014000

080023ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023be:	e7fe      	b.n	80023be <HardFault_Handler+0x4>

080023c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c4:	e7fe      	b.n	80023c4 <MemManage_Handler+0x4>

080023c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ca:	e7fe      	b.n	80023ca <BusFault_Handler+0x4>

080023cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <UsageFault_Handler+0x4>

080023d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002400:	f000 f8b6 	bl	8002570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002404:	bf00      	nop
 8002406:	bd80      	pop	{r7, pc}

08002408 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <DMA1_Channel1_IRQHandler+0x10>)
 800240e:	f000 fb00 	bl	8002a12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000650 	.word	0x20000650

0800241c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002420:	4802      	ldr	r0, [pc, #8]	; (800242c <USB_LP_IRQHandler+0x10>)
 8002422:	f000 fee6 	bl	80031f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	200013c4 	.word	0x200013c4

08002430 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002434:	4803      	ldr	r0, [pc, #12]	; (8002444 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002436:	f003 fd7a 	bl	8005f2e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800243a:	4803      	ldr	r0, [pc, #12]	; (8002448 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800243c:	f003 fd77 	bl	8005f2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000604 	.word	0x20000604
 8002448:	20000530 	.word	0x20000530

0800244c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <SystemInit+0x28>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	4a07      	ldr	r2, [pc, #28]	; (8002474 <SystemInit+0x28>)
 8002458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800245c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002460:	4b04      	ldr	r3, [pc, #16]	; (8002474 <SystemInit+0x28>)
 8002462:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002466:	609a      	str	r2, [r3, #8]
#endif
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002478:	480d      	ldr	r0, [pc, #52]	; (80024b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800247a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800247c:	480d      	ldr	r0, [pc, #52]	; (80024b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800247e:	490e      	ldr	r1, [pc, #56]	; (80024b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002480:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <LoopForever+0xe>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002484:	e002      	b.n	800248c <LoopCopyDataInit>

08002486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248a:	3304      	adds	r3, #4

0800248c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800248c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002490:	d3f9      	bcc.n	8002486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002492:	4a0b      	ldr	r2, [pc, #44]	; (80024c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002494:	4c0b      	ldr	r4, [pc, #44]	; (80024c4 <LoopForever+0x16>)
  movs r3, #0
 8002496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002498:	e001      	b.n	800249e <LoopFillZerobss>

0800249a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800249c:	3204      	adds	r2, #4

0800249e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a0:	d3fb      	bcc.n	800249a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024a2:	f7ff ffd3 	bl	800244c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024a6:	f008 ff4f 	bl	800b348 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024aa:	f7fe fb8f 	bl	8000bcc <main>

080024ae <LoopForever>:

LoopForever:
    b LoopForever
 80024ae:	e7fe      	b.n	80024ae <LoopForever>
  ldr   r0, =_estack
 80024b0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80024b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b8:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 80024bc:	0800c510 	.word	0x0800c510
  ldr r2, =_sbss
 80024c0:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 80024c4:	200016b8 	.word	0x200016b8

080024c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024c8:	e7fe      	b.n	80024c8 <ADC1_2_IRQHandler>

080024ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d4:	2003      	movs	r0, #3
 80024d6:	f000 f939 	bl	800274c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024da:	2000      	movs	r0, #0
 80024dc:	f000 f80e 	bl	80024fc <HAL_InitTick>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	71fb      	strb	r3, [r7, #7]
 80024ea:	e001      	b.n	80024f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024ec:	f7ff fd90 	bl	8002010 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024f0:	79fb      	ldrb	r3, [r7, #7]

}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002508:	4b16      	ldr	r3, [pc, #88]	; (8002564 <HAL_InitTick+0x68>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d022      	beq.n	8002556 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002510:	4b15      	ldr	r3, [pc, #84]	; (8002568 <HAL_InitTick+0x6c>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b13      	ldr	r3, [pc, #76]	; (8002564 <HAL_InitTick+0x68>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800251c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002520:	fbb2 f3f3 	udiv	r3, r2, r3
 8002524:	4618      	mov	r0, r3
 8002526:	f000 f944 	bl	80027b2 <HAL_SYSTICK_Config>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10f      	bne.n	8002550 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b0f      	cmp	r3, #15
 8002534:	d809      	bhi.n	800254a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002536:	2200      	movs	r2, #0
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	f04f 30ff 	mov.w	r0, #4294967295
 800253e:	f000 f910 	bl	8002762 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002542:	4a0a      	ldr	r2, [pc, #40]	; (800256c <HAL_InitTick+0x70>)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	e007      	b.n	800255a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	e004      	b.n	800255a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
 8002554:	e001      	b.n	800255a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800255a:	7bfb      	ldrb	r3, [r7, #15]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000038 	.word	0x20000038
 8002568:	20000030 	.word	0x20000030
 800256c:	20000034 	.word	0x20000034

08002570 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_IncTick+0x1c>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <HAL_IncTick+0x20>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4413      	add	r3, r2
 800257e:	4a03      	ldr	r2, [pc, #12]	; (800258c <HAL_IncTick+0x1c>)
 8002580:	6013      	str	r3, [r2, #0]
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	20000720 	.word	0x20000720
 8002590:	20000038 	.word	0x20000038

08002594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return uwTick;
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <HAL_GetTick+0x14>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000720 	.word	0x20000720

080025ac <__NVIC_SetPriorityGrouping>:
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c8:	4013      	ands	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025de:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	60d3      	str	r3, [r2, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_GetPriorityGrouping>:
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <__NVIC_GetPriorityGrouping+0x18>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	f003 0307 	and.w	r3, r3, #7
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_EnableIRQ>:
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	2b00      	cmp	r3, #0
 8002620:	db0b      	blt.n	800263a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	f003 021f 	and.w	r2, r3, #31
 8002628:	4907      	ldr	r1, [pc, #28]	; (8002648 <__NVIC_EnableIRQ+0x38>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	2001      	movs	r0, #1
 8002632:	fa00 f202 	lsl.w	r2, r0, r2
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000e100 	.word	0xe000e100

0800264c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	6039      	str	r1, [r7, #0]
 8002656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265c:	2b00      	cmp	r3, #0
 800265e:	db0a      	blt.n	8002676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	b2da      	uxtb	r2, r3
 8002664:	490c      	ldr	r1, [pc, #48]	; (8002698 <__NVIC_SetPriority+0x4c>)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	0112      	lsls	r2, r2, #4
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	440b      	add	r3, r1
 8002670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002674:	e00a      	b.n	800268c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	b2da      	uxtb	r2, r3
 800267a:	4908      	ldr	r1, [pc, #32]	; (800269c <__NVIC_SetPriority+0x50>)
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	3b04      	subs	r3, #4
 8002684:	0112      	lsls	r2, r2, #4
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	440b      	add	r3, r1
 800268a:	761a      	strb	r2, [r3, #24]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000e100 	.word	0xe000e100
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b089      	sub	sp, #36	; 0x24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f1c3 0307 	rsb	r3, r3, #7
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	bf28      	it	cs
 80026be:	2304      	movcs	r3, #4
 80026c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3304      	adds	r3, #4
 80026c6:	2b06      	cmp	r3, #6
 80026c8:	d902      	bls.n	80026d0 <NVIC_EncodePriority+0x30>
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3b03      	subs	r3, #3
 80026ce:	e000      	b.n	80026d2 <NVIC_EncodePriority+0x32>
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d4:	f04f 32ff 	mov.w	r2, #4294967295
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43da      	mvns	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	401a      	ands	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	43d9      	mvns	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	4313      	orrs	r3, r2
         );
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3724      	adds	r7, #36	; 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002718:	d301      	bcc.n	800271e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800271a:	2301      	movs	r3, #1
 800271c:	e00f      	b.n	800273e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800271e:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <SysTick_Config+0x40>)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002726:	210f      	movs	r1, #15
 8002728:	f04f 30ff 	mov.w	r0, #4294967295
 800272c:	f7ff ff8e 	bl	800264c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <SysTick_Config+0x40>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002736:	4b04      	ldr	r3, [pc, #16]	; (8002748 <SysTick_Config+0x40>)
 8002738:	2207      	movs	r2, #7
 800273a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	e000e010 	.word	0xe000e010

0800274c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff ff29 	bl	80025ac <__NVIC_SetPriorityGrouping>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b086      	sub	sp, #24
 8002766:	af00      	add	r7, sp, #0
 8002768:	4603      	mov	r3, r0
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
 800276e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002770:	f7ff ff40 	bl	80025f4 <__NVIC_GetPriorityGrouping>
 8002774:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	6978      	ldr	r0, [r7, #20]
 800277c:	f7ff ff90 	bl	80026a0 <NVIC_EncodePriority>
 8002780:	4602      	mov	r2, r0
 8002782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff5f 	bl	800264c <__NVIC_SetPriority>
}
 800278e:	bf00      	nop
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff33 	bl	8002610 <__NVIC_EnableIRQ>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff ffa4 	bl	8002708 <SysTick_Config>
 80027c0:	4603      	mov	r3, r0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e08d      	b.n	80028fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	4b47      	ldr	r3, [pc, #284]	; (8002904 <HAL_DMA_Init+0x138>)
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d80f      	bhi.n	800280a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	4b45      	ldr	r3, [pc, #276]	; (8002908 <HAL_DMA_Init+0x13c>)
 80027f2:	4413      	add	r3, r2
 80027f4:	4a45      	ldr	r2, [pc, #276]	; (800290c <HAL_DMA_Init+0x140>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	009a      	lsls	r2, r3, #2
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a42      	ldr	r2, [pc, #264]	; (8002910 <HAL_DMA_Init+0x144>)
 8002806:	641a      	str	r2, [r3, #64]	; 0x40
 8002808:	e00e      	b.n	8002828 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	4b40      	ldr	r3, [pc, #256]	; (8002914 <HAL_DMA_Init+0x148>)
 8002812:	4413      	add	r3, r2
 8002814:	4a3d      	ldr	r2, [pc, #244]	; (800290c <HAL_DMA_Init+0x140>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	009a      	lsls	r2, r3, #2
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a3c      	ldr	r2, [pc, #240]	; (8002918 <HAL_DMA_Init+0x14c>)
 8002826:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800283e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002842:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800284c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002858:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002864:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f9b6 	bl	8002bec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002888:	d102      	bne.n	8002890 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028a4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d010      	beq.n	80028d0 <HAL_DMA_Init+0x104>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d80c      	bhi.n	80028d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f9d6 	bl	8002c68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	e008      	b.n	80028e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40020407 	.word	0x40020407
 8002908:	bffdfff8 	.word	0xbffdfff8
 800290c:	cccccccd 	.word	0xcccccccd
 8002910:	40020000 	.word	0x40020000
 8002914:	bffdfbf8 	.word	0xbffdfbf8
 8002918:	40020400 	.word	0x40020400

0800291c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_DMA_Start_IT+0x20>
 8002938:	2302      	movs	r3, #2
 800293a:	e066      	b.n	8002a0a <HAL_DMA_Start_IT+0xee>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b01      	cmp	r3, #1
 800294e:	d155      	bne.n	80029fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f8fb 	bl	8002b70 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	2b00      	cmp	r3, #0
 8002980:	d008      	beq.n	8002994 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f042 020e 	orr.w	r2, r2, #14
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e00f      	b.n	80029b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0204 	bic.w	r2, r2, #4
 80029a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 020a 	orr.w	r2, r2, #10
 80029b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d007      	beq.n	80029d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d007      	beq.n	80029ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0201 	orr.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	e005      	b.n	8002a08 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a04:	2302      	movs	r3, #2
 8002a06:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b084      	sub	sp, #16
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	2204      	movs	r2, #4
 8002a34:	409a      	lsls	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d026      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x7a>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d021      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d107      	bne.n	8002a66 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0204 	bic.w	r2, r2, #4
 8002a64:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	f003 021f 	and.w	r2, r3, #31
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	2104      	movs	r1, #4
 8002a74:	fa01 f202 	lsl.w	r2, r1, r2
 8002a78:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d071      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a8a:	e06c      	b.n	8002b66 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	2202      	movs	r2, #2
 8002a96:	409a      	lsls	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d02e      	beq.n	8002afe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d029      	beq.n	8002afe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10b      	bne.n	8002ad0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 020a 	bic.w	r2, r2, #10
 8002ac6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	f003 021f 	and.w	r2, r3, #31
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	2102      	movs	r1, #2
 8002ade:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d038      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002afc:	e033      	b.n	8002b66 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	f003 031f 	and.w	r3, r3, #31
 8002b06:	2208      	movs	r2, #8
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d02a      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d025      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 020e 	bic.w	r2, r2, #14
 8002b2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b30:	f003 021f 	and.w	r2, r3, #31
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	2101      	movs	r1, #1
 8002b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d004      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b66:	bf00      	nop
 8002b68:	bf00      	nop
}
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b86:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d004      	beq.n	8002b9a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b98:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	f003 021f 	and.w	r2, r3, #31
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b10      	cmp	r3, #16
 8002bbc:	d108      	bne.n	8002bd0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bce:	e007      	b.n	8002be0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	60da      	str	r2, [r3, #12]
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4b16      	ldr	r3, [pc, #88]	; (8002c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d802      	bhi.n	8002c06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002c00:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	e001      	b.n	8002c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002c08:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	3b08      	subs	r3, #8
 8002c16:	4a12      	ldr	r2, [pc, #72]	; (8002c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002c18:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	089b      	lsrs	r3, r3, #2
 8002c26:	009a      	lsls	r2, r3, #2
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a0b      	ldr	r2, [pc, #44]	; (8002c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002c36:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 031f 	and.w	r3, r3, #31
 8002c3e:	2201      	movs	r2, #1
 8002c40:	409a      	lsls	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c46:	bf00      	nop
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	40020407 	.word	0x40020407
 8002c58:	40020800 	.word	0x40020800
 8002c5c:	40020820 	.word	0x40020820
 8002c60:	cccccccd 	.word	0xcccccccd
 8002c64:	40020880 	.word	0x40020880

08002c68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	461a      	mov	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a08      	ldr	r2, [pc, #32]	; (8002cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c8a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	2201      	movs	r2, #1
 8002c96:	409a      	lsls	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	1000823f 	.word	0x1000823f
 8002cac:	40020940 	.word	0x40020940

08002cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002cbe:	e15a      	b.n	8002f76 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ccc:	4013      	ands	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 814c 	beq.w	8002f70 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d00b      	beq.n	8002cf8 <HAL_GPIO_Init+0x48>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d007      	beq.n	8002cf8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cec:	2b11      	cmp	r3, #17
 8002cee:	d003      	beq.n	8002cf8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b12      	cmp	r3, #18
 8002cf6:	d130      	bne.n	8002d5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	2203      	movs	r2, #3
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d2e:	2201      	movs	r2, #1
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	091b      	lsrs	r3, r3, #4
 8002d44:	f003 0201 	and.w	r2, r3, #1
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	2203      	movs	r2, #3
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_Init+0xea>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b12      	cmp	r3, #18
 8002d98:	d123      	bne.n	8002de2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	08da      	lsrs	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3208      	adds	r2, #8
 8002da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	220f      	movs	r2, #15
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	691a      	ldr	r2, [r3, #16]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	08da      	lsrs	r2, r3, #3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3208      	adds	r2, #8
 8002ddc:	6939      	ldr	r1, [r7, #16]
 8002dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	2203      	movs	r2, #3
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43db      	mvns	r3, r3
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4013      	ands	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 0203 	and.w	r2, r3, #3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80a6 	beq.w	8002f70 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e24:	4b5b      	ldr	r3, [pc, #364]	; (8002f94 <HAL_GPIO_Init+0x2e4>)
 8002e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e28:	4a5a      	ldr	r2, [pc, #360]	; (8002f94 <HAL_GPIO_Init+0x2e4>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6613      	str	r3, [r2, #96]	; 0x60
 8002e30:	4b58      	ldr	r3, [pc, #352]	; (8002f94 <HAL_GPIO_Init+0x2e4>)
 8002e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e3c:	4a56      	ldr	r2, [pc, #344]	; (8002f98 <HAL_GPIO_Init+0x2e8>)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	089b      	lsrs	r3, r3, #2
 8002e42:	3302      	adds	r3, #2
 8002e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	220f      	movs	r2, #15
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e66:	d01f      	beq.n	8002ea8 <HAL_GPIO_Init+0x1f8>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a4c      	ldr	r2, [pc, #304]	; (8002f9c <HAL_GPIO_Init+0x2ec>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d019      	beq.n	8002ea4 <HAL_GPIO_Init+0x1f4>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a4b      	ldr	r2, [pc, #300]	; (8002fa0 <HAL_GPIO_Init+0x2f0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d013      	beq.n	8002ea0 <HAL_GPIO_Init+0x1f0>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a4a      	ldr	r2, [pc, #296]	; (8002fa4 <HAL_GPIO_Init+0x2f4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00d      	beq.n	8002e9c <HAL_GPIO_Init+0x1ec>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a49      	ldr	r2, [pc, #292]	; (8002fa8 <HAL_GPIO_Init+0x2f8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d007      	beq.n	8002e98 <HAL_GPIO_Init+0x1e8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a48      	ldr	r2, [pc, #288]	; (8002fac <HAL_GPIO_Init+0x2fc>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d101      	bne.n	8002e94 <HAL_GPIO_Init+0x1e4>
 8002e90:	2305      	movs	r3, #5
 8002e92:	e00a      	b.n	8002eaa <HAL_GPIO_Init+0x1fa>
 8002e94:	2306      	movs	r3, #6
 8002e96:	e008      	b.n	8002eaa <HAL_GPIO_Init+0x1fa>
 8002e98:	2304      	movs	r3, #4
 8002e9a:	e006      	b.n	8002eaa <HAL_GPIO_Init+0x1fa>
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e004      	b.n	8002eaa <HAL_GPIO_Init+0x1fa>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e002      	b.n	8002eaa <HAL_GPIO_Init+0x1fa>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <HAL_GPIO_Init+0x1fa>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	f002 0203 	and.w	r2, r2, #3
 8002eb0:	0092      	lsls	r2, r2, #2
 8002eb2:	4093      	lsls	r3, r2
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eba:	4937      	ldr	r1, [pc, #220]	; (8002f98 <HAL_GPIO_Init+0x2e8>)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	089b      	lsrs	r3, r3, #2
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ec8:	4b39      	ldr	r3, [pc, #228]	; (8002fb0 <HAL_GPIO_Init+0x300>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002eec:	4a30      	ldr	r2, [pc, #192]	; (8002fb0 <HAL_GPIO_Init+0x300>)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002ef2:	4b2f      	ldr	r3, [pc, #188]	; (8002fb0 <HAL_GPIO_Init+0x300>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4013      	ands	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f16:	4a26      	ldr	r2, [pc, #152]	; (8002fb0 <HAL_GPIO_Init+0x300>)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f1c:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <HAL_GPIO_Init+0x300>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f40:	4a1b      	ldr	r2, [pc, #108]	; (8002fb0 <HAL_GPIO_Init+0x300>)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f46:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <HAL_GPIO_Init+0x300>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4013      	ands	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f6a:	4a11      	ldr	r2, [pc, #68]	; (8002fb0 <HAL_GPIO_Init+0x300>)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	3301      	adds	r3, #1
 8002f74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f47f ae9d 	bne.w	8002cc0 <HAL_GPIO_Init+0x10>
  }
}
 8002f86:	bf00      	nop
 8002f88:	371c      	adds	r7, #28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40010000 	.word	0x40010000
 8002f9c:	48000400 	.word	0x48000400
 8002fa0:	48000800 	.word	0x48000800
 8002fa4:	48000c00 	.word	0x48000c00
 8002fa8:	48001000 	.word	0x48001000
 8002fac:	48001400 	.word	0x48001400
 8002fb0:	40010400 	.word	0x40010400

08002fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	807b      	strh	r3, [r7, #2]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fc4:	787b      	ldrb	r3, [r7, #1]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fca:	887a      	ldrh	r2, [r7, #2]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fd0:	e002      	b.n	8002fd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fd2:	887a      	ldrh	r2, [r7, #2]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fe6:	b08b      	sub	sp, #44	; 0x2c
 8002fe8:	af06      	add	r7, sp, #24
 8002fea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e0d7      	b.n	80031a6 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f007 fea6 	bl	800ad5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2203      	movs	r2, #3
 8003014:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f004 f858 	bl	80070d2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003022:	2300      	movs	r3, #0
 8003024:	73fb      	strb	r3, [r7, #15]
 8003026:	e04c      	b.n	80030c2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003028:	7bfb      	ldrb	r3, [r7, #15]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	440b      	add	r3, r1
 8003038:	3301      	adds	r3, #1
 800303a:	2201      	movs	r2, #1
 800303c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	440b      	add	r3, r1
 800304e:	7bfa      	ldrb	r2, [r7, #15]
 8003050:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003052:	7bfa      	ldrb	r2, [r7, #15]
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	b298      	uxth	r0, r3
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	440b      	add	r3, r1
 8003064:	3336      	adds	r3, #54	; 0x36
 8003066:	4602      	mov	r2, r0
 8003068:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	440b      	add	r3, r1
 800307a:	3303      	adds	r3, #3
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003080:	7bfa      	ldrb	r2, [r7, #15]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	3338      	adds	r3, #56	; 0x38
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003094:	7bfa      	ldrb	r2, [r7, #15]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	440b      	add	r3, r1
 80030a2:	333c      	adds	r3, #60	; 0x3c
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030a8:	7bfa      	ldrb	r2, [r7, #15]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	440b      	add	r3, r1
 80030b6:	3340      	adds	r3, #64	; 0x40
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	3301      	adds	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
 80030c2:	7bfa      	ldrb	r2, [r7, #15]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d3ad      	bcc.n	8003028 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030cc:	2300      	movs	r3, #0
 80030ce:	73fb      	strb	r3, [r7, #15]
 80030d0:	e044      	b.n	800315c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030d2:	7bfa      	ldrb	r2, [r7, #15]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	440b      	add	r3, r1
 80030e0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030e8:	7bfa      	ldrb	r2, [r7, #15]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	440b      	add	r3, r1
 80030f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030fa:	7bfa      	ldrb	r2, [r7, #15]
 80030fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030fe:	7bfa      	ldrb	r2, [r7, #15]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	440b      	add	r3, r1
 800310c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003114:	7bfa      	ldrb	r2, [r7, #15]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	440b      	add	r3, r1
 8003122:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800312a:	7bfa      	ldrb	r2, [r7, #15]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	440b      	add	r3, r1
 8003138:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003140:	7bfa      	ldrb	r2, [r7, #15]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	440b      	add	r3, r1
 800314e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	3301      	adds	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
 800315c:	7bfa      	ldrb	r2, [r7, #15]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	429a      	cmp	r2, r3
 8003164:	d3b5      	bcc.n	80030d2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	687e      	ldr	r6, [r7, #4]
 800316e:	466d      	mov	r5, sp
 8003170:	f106 0410 	add.w	r4, r6, #16
 8003174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003178:	6823      	ldr	r3, [r4, #0]
 800317a:	602b      	str	r3, [r5, #0]
 800317c:	1d33      	adds	r3, r6, #4
 800317e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003180:	6838      	ldr	r0, [r7, #0]
 8003182:	f003 ffc1 	bl	8007108 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d102      	bne.n	80031a4 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f001 fa5e 	bl	8004660 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_PCD_Start+0x16>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e012      	b.n	80031ea <HAL_PCD_Start+0x3c>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f003 ff67 	bl	80070a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f005 ff53 	bl	8009086 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f005 ff58 	bl	80090b4 <USB_ReadInterrupts>
 8003204:	4603      	mov	r3, r0
 8003206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800320a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800320e:	d102      	bne.n	8003216 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fb5b 	bl	80038cc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f005 ff4a 	bl	80090b4 <USB_ReadInterrupts>
 8003220:	4603      	mov	r3, r0
 8003222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322a:	d112      	bne.n	8003252 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003234:	b29a      	uxth	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800323e:	b292      	uxth	r2, r2
 8003240:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f007 fe04 	bl	800ae52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800324a:	2100      	movs	r1, #0
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f91e 	bl	800348e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f005 ff2c 	bl	80090b4 <USB_ReadInterrupts>
 800325c:	4603      	mov	r3, r0
 800325e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003266:	d10b      	bne.n	8003280 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003270:	b29a      	uxth	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800327a:	b292      	uxth	r2, r2
 800327c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f005 ff15 	bl	80090b4 <USB_ReadInterrupts>
 800328a:	4603      	mov	r3, r0
 800328c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003294:	d10b      	bne.n	80032ae <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800329e:	b29a      	uxth	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032a8:	b292      	uxth	r2, r2
 80032aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f005 fefe 	bl	80090b4 <USB_ReadInterrupts>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c2:	d133      	bne.n	800332c <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0204 	bic.w	r2, r2, #4
 80032d6:	b292      	uxth	r2, r2
 80032d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0208 	bic.w	r2, r2, #8
 80032ee:	b292      	uxth	r2, r2
 80032f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d107      	bne.n	800330e <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003306:	2100      	movs	r1, #0
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f007 ff97 	bl	800b23c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f007 fdd8 	bl	800aec4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800331c:	b29a      	uxth	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003326:	b292      	uxth	r2, r2
 8003328:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f005 febf 	bl	80090b4 <USB_ReadInterrupts>
 8003336:	4603      	mov	r3, r0
 8003338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800333c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003340:	d126      	bne.n	8003390 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800334a:	b29a      	uxth	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0208 	orr.w	r2, r2, #8
 8003354:	b292      	uxth	r2, r2
 8003356:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003362:	b29a      	uxth	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800336c:	b292      	uxth	r2, r2
 800336e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800337a:	b29a      	uxth	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0204 	orr.w	r2, r2, #4
 8003384:	b292      	uxth	r2, r2
 8003386:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f007 fd80 	bl	800ae90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f005 fe8d 	bl	80090b4 <USB_ReadInterrupts>
 800339a:	4603      	mov	r3, r0
 800339c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a0:	2b80      	cmp	r3, #128	; 0x80
 80033a2:	d13f      	bne.n	8003424 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033b6:	b292      	uxth	r2, r2
 80033b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d12b      	bne.n	800341e <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0204 	orr.w	r2, r2, #4
 80033d8:	b292      	uxth	r2, r2
 80033da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f042 0208 	orr.w	r2, r2, #8
 80033f0:	b292      	uxth	r2, r2
 80033f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003406:	b29b      	uxth	r3, r3
 8003408:	089b      	lsrs	r3, r3, #2
 800340a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003414:	2101      	movs	r1, #1
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f007 ff10 	bl	800b23c <HAL_PCDEx_LPM_Callback>
 800341c:	e002      	b.n	8003424 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f007 fd36 	bl	800ae90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f005 fe43 	bl	80090b4 <USB_ReadInterrupts>
 800342e:	4603      	mov	r3, r0
 8003430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003438:	d10e      	bne.n	8003458 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003442:	b29a      	uxth	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800344c:	b292      	uxth	r2, r2
 800344e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f007 fcef 	bl	800ae36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f005 fe29 	bl	80090b4 <USB_ReadInterrupts>
 8003462:	4603      	mov	r3, r0
 8003464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800346c:	d10b      	bne.n	8003486 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003476:	b29a      	uxth	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003480:	b292      	uxth	r2, r2
 8003482:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	460b      	mov	r3, r1
 8003498:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_PCD_SetAddress+0x1a>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e013      	b.n	80034d0 <HAL_PCD_SetAddress+0x42>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	78fa      	ldrb	r2, [r7, #3]
 80034b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	4611      	mov	r1, r2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f005 fdcc 	bl	800905e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	4608      	mov	r0, r1
 80034e2:	4611      	mov	r1, r2
 80034e4:	461a      	mov	r2, r3
 80034e6:	4603      	mov	r3, r0
 80034e8:	70fb      	strb	r3, [r7, #3]
 80034ea:	460b      	mov	r3, r1
 80034ec:	803b      	strh	r3, [r7, #0]
 80034ee:	4613      	mov	r3, r2
 80034f0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	da0e      	bge.n	800351c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	4413      	add	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	705a      	strb	r2, [r3, #1]
 800351a:	e00e      	b.n	800353a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	f003 0207 	and.w	r2, r3, #7
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800353a:	78fb      	ldrb	r3, [r7, #3]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	b2da      	uxtb	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003546:	883a      	ldrh	r2, [r7, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	78ba      	ldrb	r2, [r7, #2]
 8003550:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	785b      	ldrb	r3, [r3, #1]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d004      	beq.n	8003564 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003564:	78bb      	ldrb	r3, [r7, #2]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d102      	bne.n	8003570 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_PCD_EP_Open+0xa6>
 800357a:	2302      	movs	r3, #2
 800357c:	e00e      	b.n	800359c <HAL_PCD_EP_Open+0xc4>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68f9      	ldr	r1, [r7, #12]
 800358c:	4618      	mov	r0, r3
 800358e:	f003 fddd 	bl	800714c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800359a:	7afb      	ldrb	r3, [r7, #11]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	da0e      	bge.n	80035d6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	4413      	add	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	705a      	strb	r2, [r3, #1]
 80035d4:	e00e      	b.n	80035f4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035d6:	78fb      	ldrb	r3, [r7, #3]
 80035d8:	f003 0207 	and.w	r2, r3, #7
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	4413      	add	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_PCD_EP_Close+0x6a>
 800360a:	2302      	movs	r3, #2
 800360c:	e00e      	b.n	800362c <HAL_PCD_EP_Close+0x88>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68f9      	ldr	r1, [r7, #12]
 800361c:	4618      	mov	r0, r3
 800361e:	f004 f903 	bl	8007828 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	607a      	str	r2, [r7, #4]
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	460b      	mov	r3, r1
 8003642:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003644:	7afb      	ldrb	r3, [r7, #11]
 8003646:	f003 0207 	and.w	r2, r3, #7
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4413      	add	r3, r2
 800365a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	2200      	movs	r2, #0
 800366c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2200      	movs	r2, #0
 8003672:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003674:	7afb      	ldrb	r3, [r7, #11]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	b2da      	uxtb	r2, r3
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003680:	7afb      	ldrb	r3, [r7, #11]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6979      	ldr	r1, [r7, #20]
 8003690:	4618      	mov	r0, r3
 8003692:	f004 fab6 	bl	8007c02 <USB_EPStartXfer>
 8003696:	e005      	b.n	80036a4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6979      	ldr	r1, [r7, #20]
 800369e:	4618      	mov	r0, r3
 80036a0:	f004 faaf 	bl	8007c02 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	460b      	mov	r3, r1
 80036b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	f003 0207 	and.w	r2, r3, #7
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	440b      	add	r3, r1
 80036cc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80036d0:	681b      	ldr	r3, [r3, #0]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b086      	sub	sp, #24
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]
 80036ea:	460b      	mov	r3, r1
 80036ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ee:	7afb      	ldrb	r3, [r7, #11]
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4413      	add	r3, r2
 8003702:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2200      	movs	r2, #0
 8003722:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2201      	movs	r2, #1
 8003728:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800372a:	7afb      	ldrb	r3, [r7, #11]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	b2da      	uxtb	r2, r3
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003736:	7afb      	ldrb	r3, [r7, #11]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	2b00      	cmp	r3, #0
 800373e:	d106      	bne.n	800374e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6979      	ldr	r1, [r7, #20]
 8003746:	4618      	mov	r0, r3
 8003748:	f004 fa5b 	bl	8007c02 <USB_EPStartXfer>
 800374c:	e005      	b.n	800375a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6979      	ldr	r1, [r7, #20]
 8003754:	4618      	mov	r0, r3
 8003756:	f004 fa54 	bl	8007c02 <USB_EPStartXfer>
  }

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	f003 0207 	and.w	r2, r3, #7
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	429a      	cmp	r2, r3
 800377c:	d901      	bls.n	8003782 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e04c      	b.n	800381c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003782:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003786:	2b00      	cmp	r3, #0
 8003788:	da0e      	bge.n	80037a8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800378a:	78fb      	ldrb	r3, [r7, #3]
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	4413      	add	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2201      	movs	r2, #1
 80037a4:	705a      	strb	r2, [r3, #1]
 80037a6:	e00c      	b.n	80037c2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	4413      	add	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_PCD_EP_SetStall+0x7e>
 80037de:	2302      	movs	r3, #2
 80037e0:	e01c      	b.n	800381c <HAL_PCD_EP_SetStall+0xb8>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68f9      	ldr	r1, [r7, #12]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f005 fb35 	bl	8008e60 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d108      	bne.n	8003812 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800380a:	4619      	mov	r1, r3
 800380c:	4610      	mov	r0, r2
 800380e:	f005 fc61 	bl	80090d4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	f003 020f 	and.w	r2, r3, #15
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	429a      	cmp	r2, r3
 800383c:	d901      	bls.n	8003842 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e040      	b.n	80038c4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003842:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003846:	2b00      	cmp	r3, #0
 8003848:	da0e      	bge.n	8003868 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800384a:	78fb      	ldrb	r3, [r7, #3]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	4413      	add	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2201      	movs	r2, #1
 8003864:	705a      	strb	r2, [r3, #1]
 8003866:	e00e      	b.n	8003886 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003868:	78fb      	ldrb	r3, [r7, #3]
 800386a:	f003 0207 	and.w	r2, r3, #7
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	b2da      	uxtb	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_PCD_EP_ClrStall+0x82>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e00e      	b.n	80038c4 <HAL_PCD_EP_ClrStall+0xa0>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68f9      	ldr	r1, [r7, #12]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f005 fb24 	bl	8008f02 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08e      	sub	sp, #56	; 0x38
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80038d4:	e2d1      	b.n	8003e7a <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038de:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80038e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80038ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f040 8152 	bne.w	8003b9a <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80038f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d150      	bne.n	80039a2 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	b29b      	uxth	r3, r3
 8003908:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800390c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003910:	81fb      	strh	r3, [r7, #14]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	89fb      	ldrh	r3, [r7, #14]
 8003918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800391c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003920:	b29b      	uxth	r3, r3
 8003922:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3328      	adds	r3, #40	; 0x28
 8003928:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003932:	b29b      	uxth	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4413      	add	r3, r2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	4413      	add	r3, r2
 8003944:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	441a      	add	r2, r3
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003960:	2100      	movs	r1, #0
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f007 fa4d 	bl	800ae02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 8282 	beq.w	8003e7a <PCD_EP_ISR_Handler+0x5ae>
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b00      	cmp	r3, #0
 800397c:	f040 827d 	bne.w	8003e7a <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003986:	b2db      	uxtb	r3, r3
 8003988:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800398c:	b2da      	uxtb	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	b292      	uxth	r2, r2
 8003994:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80039a0:	e26b      	b.n	8003e7a <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80039b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80039b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d032      	beq.n	8003a22 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4413      	add	r3, r2
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	4413      	add	r3, r2
 80039d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	f005 fbb9 	bl	800916e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a08:	4013      	ands	r3, r2
 8003a0a:	823b      	strh	r3, [r7, #16]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	8a3a      	ldrh	r2, [r7, #16]
 8003a12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a16:	b292      	uxth	r2, r2
 8003a18:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f007 f9c4 	bl	800ada8 <HAL_PCD_SetupStageCallback>
 8003a20:	e22b      	b.n	8003e7a <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a22:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f280 8227 	bge.w	8003e7a <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a38:	4013      	ands	r3, r2
 8003a3a:	83bb      	strh	r3, [r7, #28]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	8bba      	ldrh	r2, [r7, #28]
 8003a42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a46:	b292      	uxth	r2, r2
 8003a48:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6812      	ldr	r2, [r2, #0]
 8003a62:	4413      	add	r3, r2
 8003a64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d019      	beq.n	8003aae <PCD_EP_ISR_Handler+0x1e2>
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d015      	beq.n	8003aae <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	6959      	ldr	r1, [r3, #20]
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	f005 fb6b 	bl	800916e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	695a      	ldr	r2, [r3, #20]
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	441a      	add	r2, r3
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f007 f98f 	bl	800adcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d112      	bne.n	8003afc <PCD_EP_ISR_Handler+0x230>
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	801a      	strh	r2, [r3, #0]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003af0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	e02f      	b.n	8003b5c <PCD_EP_ISR_Handler+0x290>
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b3e      	cmp	r3, #62	; 0x3e
 8003b02:	d813      	bhi.n	8003b2c <PCD_EP_ISR_Handler+0x260>
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	085b      	lsrs	r3, r3, #1
 8003b0a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <PCD_EP_ISR_Handler+0x252>
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	029b      	lsls	r3, r3, #10
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	801a      	strh	r2, [r3, #0]
 8003b2a:	e017      	b.n	8003b5c <PCD_EP_ISR_Handler+0x290>
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	095b      	lsrs	r3, r3, #5
 8003b32:	633b      	str	r3, [r7, #48]	; 0x30
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d102      	bne.n	8003b46 <PCD_EP_ISR_Handler+0x27a>
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	3b01      	subs	r3, #1
 8003b44:	633b      	str	r3, [r7, #48]	; 0x30
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	029b      	lsls	r3, r3, #10
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6c:	827b      	strh	r3, [r7, #18]
 8003b6e:	8a7b      	ldrh	r3, [r7, #18]
 8003b70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003b74:	827b      	strh	r3, [r7, #18]
 8003b76:	8a7b      	ldrh	r3, [r7, #18]
 8003b78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b7c:	827b      	strh	r3, [r7, #18]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	8a7b      	ldrh	r3, [r7, #18]
 8003b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	8013      	strh	r3, [r2, #0]
 8003b98:	e16f      	b.n	8003e7a <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003bac:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f280 80e4 	bge.w	8003d7e <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003bcc:	4013      	ands	r3, r2
 8003bce:	853b      	strh	r3, [r7, #40]	; 0x28
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003be0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003be4:	b292      	uxth	r2, r2
 8003be6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003be8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	7b1b      	ldrb	r3, [r3, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d120      	bne.n	8003c48 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	461a      	mov	r2, r3
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4413      	add	r3, r2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6812      	ldr	r2, [r2, #0]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c2a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003c2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8083 	beq.w	8003d3a <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	6959      	ldr	r1, [r3, #20]
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	88da      	ldrh	r2, [r3, #6]
 8003c40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c42:	f005 fa94 	bl	800916e <USB_ReadPMA>
 8003c46:	e078      	b.n	8003d3a <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	78db      	ldrb	r3, [r3, #3]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d108      	bne.n	8003c62 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003c50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c52:	461a      	mov	r2, r3
 8003c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f91d 	bl	8003e96 <HAL_PCD_EP_DB_Receive>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003c60:	e06b      	b.n	8003d3a <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7c:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	441a      	add	r2, r3
 8003c8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d01f      	beq.n	8003cfc <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4413      	add	r3, r2
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003ce2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d028      	beq.n	8003d3a <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6818      	ldr	r0, [r3, #0]
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	6959      	ldr	r1, [r3, #20]
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	891a      	ldrh	r2, [r3, #8]
 8003cf4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cf6:	f005 fa3a 	bl	800916e <USB_ReadPMA>
 8003cfa:	e01e      	b.n	8003d3a <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	4413      	add	r3, r2
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	4413      	add	r3, r2
 8003d16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d20:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003d22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	6959      	ldr	r1, [r3, #20]
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	895a      	ldrh	r2, [r3, #10]
 8003d34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d36:	f005 fa1a 	bl	800916e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	69da      	ldr	r2, [r3, #28]
 8003d3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d40:	441a      	add	r2, r3
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	695a      	ldr	r2, [r3, #20]
 8003d4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d4c:	441a      	add	r2, r3
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d004      	beq.n	8003d64 <PCD_EP_ISR_Handler+0x498>
 8003d5a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d206      	bcs.n	8003d72 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f007 f82e 	bl	800adcc <HAL_PCD_DataOutStageCallback>
 8003d70:	e005      	b.n	8003d7e <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f003 ff42 	bl	8007c02 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003d7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d078      	beq.n	8003e7a <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8003d88:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	4413      	add	r3, r2
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	461a      	mov	r2, r3
 8003da2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db6:	843b      	strh	r3, [r7, #32]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	441a      	add	r2, r3
 8003dc6:	8c3b      	ldrh	r3, [r7, #32]
 8003dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	78db      	ldrb	r3, [r3, #3]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d108      	bne.n	8003dee <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d144      	bne.n	8003e6e <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003de4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d13f      	bne.n	8003e6e <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6812      	ldr	r2, [r2, #0]
 8003e06:	4413      	add	r3, r2
 8003e08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e12:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	699a      	ldr	r2, [r3, #24]
 8003e18:	8bfb      	ldrh	r3, [r7, #30]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d906      	bls.n	8003e2c <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	699a      	ldr	r2, [r3, #24]
 8003e22:	8bfb      	ldrh	r3, [r7, #30]
 8003e24:	1ad2      	subs	r2, r2, r3
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	619a      	str	r2, [r3, #24]
 8003e2a:	e002      	b.n	8003e32 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	2200      	movs	r2, #0
 8003e30:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	4619      	mov	r1, r3
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f006 ffde 	bl	800ae02 <HAL_PCD_DataInStageCallback>
 8003e46:	e018      	b.n	8003e7a <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	695a      	ldr	r2, [r3, #20]
 8003e4c:	8bfb      	ldrh	r3, [r7, #30]
 8003e4e:	441a      	add	r2, r3
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	8bfb      	ldrh	r3, [r7, #30]
 8003e5a:	441a      	add	r2, r3
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e66:	4618      	mov	r0, r3
 8003e68:	f003 fecb 	bl	8007c02 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003e6c:	e005      	b.n	8003e7a <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003e6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e70:	461a      	mov	r2, r3
 8003e72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f917 	bl	80040a8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	b21b      	sxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f6ff ad25 	blt.w	80038d6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3738      	adds	r7, #56	; 0x38
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b088      	sub	sp, #32
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d07c      	beq.n	8003fa8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	461a      	mov	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	6812      	ldr	r2, [r2, #0]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ed2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	699a      	ldr	r2, [r3, #24]
 8003ed8:	8b7b      	ldrh	r3, [r7, #26]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d306      	bcc.n	8003eec <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	8b7b      	ldrh	r3, [r7, #26]
 8003ee4:	1ad2      	subs	r2, r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	619a      	str	r2, [r3, #24]
 8003eea:	e002      	b.n	8003ef2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d123      	bne.n	8003f42 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f14:	833b      	strh	r3, [r7, #24]
 8003f16:	8b3b      	ldrh	r3, [r7, #24]
 8003f18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f1c:	833b      	strh	r3, [r7, #24]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	441a      	add	r2, r3
 8003f2c:	8b3b      	ldrh	r3, [r7, #24]
 8003f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f42:	88fb      	ldrh	r3, [r7, #6]
 8003f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01f      	beq.n	8003f8c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	82fb      	strh	r3, [r7, #22]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	441a      	add	r2, r3
 8003f76:	8afb      	ldrh	r3, [r7, #22]
 8003f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003f8c:	8b7b      	ldrh	r3, [r7, #26]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 8085 	beq.w	800409e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6818      	ldr	r0, [r3, #0]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	6959      	ldr	r1, [r3, #20]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	891a      	ldrh	r2, [r3, #8]
 8003fa0:	8b7b      	ldrh	r3, [r7, #26]
 8003fa2:	f005 f8e4 	bl	800916e <USB_ReadPMA>
 8003fa6:	e07a      	b.n	800409e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	4413      	add	r3, r2
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fcc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	8b7b      	ldrh	r3, [r7, #26]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d306      	bcc.n	8003fe6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	699a      	ldr	r2, [r3, #24]
 8003fdc:	8b7b      	ldrh	r3, [r7, #26]
 8003fde:	1ad2      	subs	r2, r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	619a      	str	r2, [r3, #24]
 8003fe4:	e002      	b.n	8003fec <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d123      	bne.n	800403c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	b29b      	uxth	r3, r3
 8004006:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800400a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400e:	83fb      	strh	r3, [r7, #30]
 8004010:	8bfb      	ldrh	r3, [r7, #30]
 8004012:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004016:	83fb      	strh	r3, [r7, #30]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	441a      	add	r2, r3
 8004026:	8bfb      	ldrh	r3, [r7, #30]
 8004028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800402c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004038:	b29b      	uxth	r3, r3
 800403a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800403c:	88fb      	ldrh	r3, [r7, #6]
 800403e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d11f      	bne.n	8004086 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	b29b      	uxth	r3, r3
 8004058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004060:	83bb      	strh	r3, [r7, #28]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	441a      	add	r2, r3
 8004070:	8bbb      	ldrh	r3, [r7, #28]
 8004072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800407a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800407e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004082:	b29b      	uxth	r3, r3
 8004084:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004086:	8b7b      	ldrh	r3, [r7, #26]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d008      	beq.n	800409e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	6959      	ldr	r1, [r3, #20]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	895a      	ldrh	r2, [r3, #10]
 8004098:	8b7b      	ldrh	r3, [r7, #26]
 800409a:	f005 f868 	bl	800916e <USB_ReadPMA>
    }
  }

  return count;
 800409e:	8b7b      	ldrh	r3, [r7, #26]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3720      	adds	r7, #32
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b092      	sub	sp, #72	; 0x48
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	4613      	mov	r3, r2
 80040b4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 8130 	beq.w	8004322 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	4413      	add	r3, r2
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	6812      	ldr	r2, [r2, #0]
 80040da:	4413      	add	r3, r2
 80040dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040e6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	699a      	ldr	r2, [r3, #24]
 80040ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d906      	bls.n	8004100 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	699a      	ldr	r2, [r3, #24]
 80040f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80040f8:	1ad2      	subs	r2, r2, r3
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	619a      	str	r2, [r3, #24]
 80040fe:	e002      	b.n	8004106 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2200      	movs	r2, #0
 8004104:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d12c      	bne.n	8004168 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	4619      	mov	r1, r3
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f006 fe74 	bl	800ae02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 822d 	beq.w	8004580 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	b29b      	uxth	r3, r3
 8004138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800413c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004140:	827b      	strh	r3, [r7, #18]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	441a      	add	r2, r3
 8004150:	8a7b      	ldrh	r3, [r7, #18]
 8004152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800415a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800415e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004162:	b29b      	uxth	r3, r3
 8004164:	8013      	strh	r3, [r2, #0]
 8004166:	e20b      	b.n	8004580 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004168:	88fb      	ldrh	r3, [r7, #6]
 800416a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d01f      	beq.n	80041b2 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	b29b      	uxth	r3, r3
 8004184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	441a      	add	r2, r3
 800419c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800419e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	f040 81e1 	bne.w	8004580 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80041c4:	441a      	add	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	69da      	ldr	r2, [r3, #28]
 80041ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80041d0:	441a      	add	r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	6a1a      	ldr	r2, [r3, #32]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d309      	bcc.n	80041f6 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	6a1a      	ldr	r2, [r3, #32]
 80041ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ee:	1ad2      	subs	r2, r2, r3
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	621a      	str	r2, [r3, #32]
 80041f4:	e014      	b.n	8004220 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 80041fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004200:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800420a:	e009      	b.n	8004220 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2200      	movs	r2, #0
 800421e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	785b      	ldrb	r3, [r3, #1]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d155      	bne.n	80042d4 <HAL_PCD_EP_DB_Transmit+0x22c>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	61bb      	str	r3, [r7, #24]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004236:	b29b      	uxth	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	4413      	add	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	00da      	lsls	r2, r3, #3
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	4413      	add	r3, r2
 800424a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004252:	2b00      	cmp	r3, #0
 8004254:	d112      	bne.n	800427c <HAL_PCD_EP_DB_Transmit+0x1d4>
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	b29b      	uxth	r3, r3
 800425c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004260:	b29a      	uxth	r2, r3
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	801a      	strh	r2, [r3, #0]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	b29b      	uxth	r3, r3
 800426c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004274:	b29a      	uxth	r2, r3
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	801a      	strh	r2, [r3, #0]
 800427a:	e047      	b.n	800430c <HAL_PCD_EP_DB_Transmit+0x264>
 800427c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427e:	2b3e      	cmp	r3, #62	; 0x3e
 8004280:	d811      	bhi.n	80042a6 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8004282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004284:	085b      	lsrs	r3, r3, #1
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28
 8004288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	3301      	adds	r3, #1
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	b29b      	uxth	r3, r3
 800429c:	029b      	lsls	r3, r3, #10
 800429e:	b29a      	uxth	r2, r3
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	801a      	strh	r2, [r3, #0]
 80042a4:	e032      	b.n	800430c <HAL_PCD_EP_DB_Transmit+0x264>
 80042a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d102      	bne.n	80042bc <HAL_PCD_EP_DB_Transmit+0x214>
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	3b01      	subs	r3, #1
 80042ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80042bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042be:	b29b      	uxth	r3, r3
 80042c0:	029b      	lsls	r3, r3, #10
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	801a      	strh	r2, [r3, #0]
 80042d2:	e01b      	b.n	800430c <HAL_PCD_EP_DB_Transmit+0x264>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	785b      	ldrb	r3, [r3, #1]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d117      	bne.n	800430c <HAL_PCD_EP_DB_Transmit+0x264>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	623b      	str	r3, [r7, #32]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	461a      	mov	r2, r3
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	4413      	add	r3, r2
 80042f2:	623b      	str	r3, [r7, #32]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	00da      	lsls	r2, r3, #3
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	4413      	add	r3, r2
 80042fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004302:	61fb      	str	r3, [r7, #28]
 8004304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004306:	b29a      	uxth	r2, r3
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	6959      	ldr	r1, [r3, #20]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	891a      	ldrh	r2, [r3, #8]
 8004318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431a:	b29b      	uxth	r3, r3
 800431c:	f004 fee6 	bl	80090ec <USB_WritePMA>
 8004320:	e12e      	b.n	8004580 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800432a:	b29b      	uxth	r3, r3
 800432c:	461a      	mov	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	4413      	add	r3, r2
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	4413      	add	r3, r2
 800433c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004346:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	699a      	ldr	r2, [r3, #24]
 800434c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800434e:	429a      	cmp	r2, r3
 8004350:	d306      	bcc.n	8004360 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	699a      	ldr	r2, [r3, #24]
 8004356:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004358:	1ad2      	subs	r2, r2, r3
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	619a      	str	r2, [r3, #24]
 800435e:	e002      	b.n	8004366 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2200      	movs	r2, #0
 8004364:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d12c      	bne.n	80043c8 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	4619      	mov	r1, r3
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f006 fd44 	bl	800ae02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004380:	2b00      	cmp	r3, #0
 8004382:	f040 80fd 	bne.w	8004580 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	b29b      	uxth	r3, r3
 8004398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	441a      	add	r2, r3
 80043b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	8013      	strh	r3, [r2, #0]
 80043c6:	e0db      	b.n	8004580 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80043c8:	88fb      	ldrh	r3, [r7, #6]
 80043ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d11f      	bne.n	8004412 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	461a      	mov	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ec:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	441a      	add	r2, r3
 80043fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80043fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004406:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800440a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800440e:	b29b      	uxth	r3, r3
 8004410:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004418:	2b01      	cmp	r3, #1
 800441a:	f040 80b1 	bne.w	8004580 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	695a      	ldr	r2, [r3, #20]
 8004422:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004424:	441a      	add	r2, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	69da      	ldr	r2, [r3, #28]
 800442e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004430:	441a      	add	r2, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	6a1a      	ldr	r2, [r3, #32]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	429a      	cmp	r2, r3
 8004440:	d309      	bcc.n	8004456 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	6a1a      	ldr	r2, [r3, #32]
 800444c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444e:	1ad2      	subs	r2, r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	621a      	str	r2, [r3, #32]
 8004454:	e014      	b.n	8004480 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 800445e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004460:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800446a:	e009      	b.n	8004480 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2200      	movs	r2, #0
 8004476:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	637b      	str	r3, [r7, #52]	; 0x34
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	785b      	ldrb	r3, [r3, #1]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d155      	bne.n	800453a <HAL_PCD_EP_DB_Transmit+0x492>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	647b      	str	r3, [r7, #68]	; 0x44
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800449c:	b29b      	uxth	r3, r3
 800449e:	461a      	mov	r2, r3
 80044a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a2:	4413      	add	r3, r2
 80044a4:	647b      	str	r3, [r7, #68]	; 0x44
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	00da      	lsls	r2, r3, #3
 80044ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ae:	4413      	add	r3, r2
 80044b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80044b4:	643b      	str	r3, [r7, #64]	; 0x40
 80044b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d112      	bne.n	80044e2 <HAL_PCD_EP_DB_Transmit+0x43a>
 80044bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ca:	801a      	strh	r2, [r3, #0]
 80044cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044da:	b29a      	uxth	r2, r3
 80044dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044de:	801a      	strh	r2, [r3, #0]
 80044e0:	e044      	b.n	800456c <HAL_PCD_EP_DB_Transmit+0x4c4>
 80044e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e4:	2b3e      	cmp	r3, #62	; 0x3e
 80044e6:	d811      	bhi.n	800450c <HAL_PCD_EP_DB_Transmit+0x464>
 80044e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ea:	085b      	lsrs	r3, r3, #1
 80044ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <HAL_PCD_EP_DB_Transmit+0x456>
 80044f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044fa:	3301      	adds	r3, #1
 80044fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004500:	b29b      	uxth	r3, r3
 8004502:	029b      	lsls	r3, r3, #10
 8004504:	b29a      	uxth	r2, r3
 8004506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004508:	801a      	strh	r2, [r3, #0]
 800450a:	e02f      	b.n	800456c <HAL_PCD_EP_DB_Transmit+0x4c4>
 800450c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004514:	f003 031f 	and.w	r3, r3, #31
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <HAL_PCD_EP_DB_Transmit+0x47a>
 800451c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800451e:	3b01      	subs	r3, #1
 8004520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004524:	b29b      	uxth	r3, r3
 8004526:	029b      	lsls	r3, r3, #10
 8004528:	b29b      	uxth	r3, r3
 800452a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800452e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004532:	b29a      	uxth	r2, r3
 8004534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004536:	801a      	strh	r2, [r3, #0]
 8004538:	e018      	b.n	800456c <HAL_PCD_EP_DB_Transmit+0x4c4>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	785b      	ldrb	r3, [r3, #1]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d114      	bne.n	800456c <HAL_PCD_EP_DB_Transmit+0x4c4>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800454a:	b29b      	uxth	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004550:	4413      	add	r3, r2
 8004552:	637b      	str	r3, [r7, #52]	; 0x34
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	00da      	lsls	r2, r3, #3
 800455a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455c:	4413      	add	r3, r2
 800455e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004562:	633b      	str	r3, [r7, #48]	; 0x30
 8004564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004566:	b29a      	uxth	r2, r3
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	6959      	ldr	r1, [r3, #20]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	895a      	ldrh	r2, [r3, #10]
 8004578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457a:	b29b      	uxth	r3, r3
 800457c:	f004 fdb6 	bl	80090ec <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	b29b      	uxth	r3, r3
 8004592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800459a:	823b      	strh	r3, [r7, #16]
 800459c:	8a3b      	ldrh	r3, [r7, #16]
 800459e:	f083 0310 	eor.w	r3, r3, #16
 80045a2:	823b      	strh	r3, [r7, #16]
 80045a4:	8a3b      	ldrh	r3, [r7, #16]
 80045a6:	f083 0320 	eor.w	r3, r3, #32
 80045aa:	823b      	strh	r3, [r7, #16]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	441a      	add	r2, r3
 80045ba:	8a3b      	ldrh	r3, [r7, #16]
 80045bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3748      	adds	r7, #72	; 0x48
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80045da:	b480      	push	{r7}
 80045dc:	b087      	sub	sp, #28
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	607b      	str	r3, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	817b      	strh	r3, [r7, #10]
 80045e8:	4613      	mov	r3, r2
 80045ea:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80045ec:	897b      	ldrh	r3, [r7, #10]
 80045ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00b      	beq.n	8004610 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045f8:	897b      	ldrh	r3, [r7, #10]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	4413      	add	r3, r2
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	e009      	b.n	8004624 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004610:	897a      	ldrh	r2, [r7, #10]
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4413      	add	r3, r2
 8004622:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004624:	893b      	ldrh	r3, [r7, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d107      	bne.n	800463a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2200      	movs	r2, #0
 800462e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	b29a      	uxth	r2, r3
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	80da      	strh	r2, [r3, #6]
 8004638:	e00b      	b.n	8004652 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2201      	movs	r2, #1
 800463e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	b29a      	uxth	r2, r3
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	0c1b      	lsrs	r3, r3, #16
 800464c:	b29a      	uxth	r2, r3
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	371c      	adds	r7, #28
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004684:	b29b      	uxth	r3, r3
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	b29a      	uxth	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004698:	b29b      	uxth	r3, r3
 800469a:	f043 0302 	orr.w	r3, r3, #2
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d141      	bne.n	8004746 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046c2:	4b4b      	ldr	r3, [pc, #300]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ce:	d131      	bne.n	8004734 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046d0:	4b47      	ldr	r3, [pc, #284]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046d6:	4a46      	ldr	r2, [pc, #280]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046e0:	4b43      	ldr	r3, [pc, #268]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046e8:	4a41      	ldr	r2, [pc, #260]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046f0:	4b40      	ldr	r3, [pc, #256]	; (80047f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2232      	movs	r2, #50	; 0x32
 80046f6:	fb02 f303 	mul.w	r3, r2, r3
 80046fa:	4a3f      	ldr	r2, [pc, #252]	; (80047f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004700:	0c9b      	lsrs	r3, r3, #18
 8004702:	3301      	adds	r3, #1
 8004704:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004706:	e002      	b.n	800470e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	3b01      	subs	r3, #1
 800470c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800470e:	4b38      	ldr	r3, [pc, #224]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800471a:	d102      	bne.n	8004722 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f2      	bne.n	8004708 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004722:	4b33      	ldr	r3, [pc, #204]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800472a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800472e:	d158      	bne.n	80047e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e057      	b.n	80047e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004734:	4b2e      	ldr	r3, [pc, #184]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800473a:	4a2d      	ldr	r2, [pc, #180]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800473c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004740:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004744:	e04d      	b.n	80047e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800474c:	d141      	bne.n	80047d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800474e:	4b28      	ldr	r3, [pc, #160]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475a:	d131      	bne.n	80047c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800475c:	4b24      	ldr	r3, [pc, #144]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800475e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004762:	4a23      	ldr	r2, [pc, #140]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004768:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800476c:	4b20      	ldr	r3, [pc, #128]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004774:	4a1e      	ldr	r2, [pc, #120]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800477a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800477c:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2232      	movs	r2, #50	; 0x32
 8004782:	fb02 f303 	mul.w	r3, r2, r3
 8004786:	4a1c      	ldr	r2, [pc, #112]	; (80047f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004788:	fba2 2303 	umull	r2, r3, r2, r3
 800478c:	0c9b      	lsrs	r3, r3, #18
 800478e:	3301      	adds	r3, #1
 8004790:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004792:	e002      	b.n	800479a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3b01      	subs	r3, #1
 8004798:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800479a:	4b15      	ldr	r3, [pc, #84]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a6:	d102      	bne.n	80047ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f2      	bne.n	8004794 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047ae:	4b10      	ldr	r3, [pc, #64]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ba:	d112      	bne.n	80047e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e011      	b.n	80047e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047c0:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047c6:	4a0a      	ldr	r2, [pc, #40]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80047d0:	e007      	b.n	80047e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047d2:	4b07      	ldr	r3, [pc, #28]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047da:	4a05      	ldr	r2, [pc, #20]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	40007000 	.word	0x40007000
 80047f4:	20000030 	.word	0x20000030
 80047f8:	431bde83 	.word	0x431bde83

080047fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	4a04      	ldr	r2, [pc, #16]	; (8004818 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800480a:	6093      	str	r3, [r2, #8]
}
 800480c:	bf00      	nop
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40007000 	.word	0x40007000

0800481c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e308      	b.n	8004e40 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d075      	beq.n	8004926 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800483a:	4ba3      	ldr	r3, [pc, #652]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 030c 	and.w	r3, r3, #12
 8004842:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004844:	4ba0      	ldr	r3, [pc, #640]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	2b0c      	cmp	r3, #12
 8004852:	d102      	bne.n	800485a <HAL_RCC_OscConfig+0x3e>
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	2b03      	cmp	r3, #3
 8004858:	d002      	beq.n	8004860 <HAL_RCC_OscConfig+0x44>
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2b08      	cmp	r3, #8
 800485e:	d10b      	bne.n	8004878 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004860:	4b99      	ldr	r3, [pc, #612]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d05b      	beq.n	8004924 <HAL_RCC_OscConfig+0x108>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d157      	bne.n	8004924 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e2e3      	b.n	8004e40 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004880:	d106      	bne.n	8004890 <HAL_RCC_OscConfig+0x74>
 8004882:	4b91      	ldr	r3, [pc, #580]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a90      	ldr	r2, [pc, #576]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	e01d      	b.n	80048cc <HAL_RCC_OscConfig+0xb0>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004898:	d10c      	bne.n	80048b4 <HAL_RCC_OscConfig+0x98>
 800489a:	4b8b      	ldr	r3, [pc, #556]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a8a      	ldr	r2, [pc, #552]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	4b88      	ldr	r3, [pc, #544]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a87      	ldr	r2, [pc, #540]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	e00b      	b.n	80048cc <HAL_RCC_OscConfig+0xb0>
 80048b4:	4b84      	ldr	r3, [pc, #528]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a83      	ldr	r2, [pc, #524]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	4b81      	ldr	r3, [pc, #516]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a80      	ldr	r2, [pc, #512]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d013      	beq.n	80048fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7fd fe5e 	bl	8002594 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048dc:	f7fd fe5a 	bl	8002594 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	; 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e2a8      	b.n	8004e40 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ee:	4b76      	ldr	r3, [pc, #472]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0xc0>
 80048fa:	e014      	b.n	8004926 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fc:	f7fd fe4a 	bl	8002594 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004904:	f7fd fe46 	bl	8002594 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b64      	cmp	r3, #100	; 0x64
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e294      	b.n	8004e40 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004916:	4b6c      	ldr	r3, [pc, #432]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0xe8>
 8004922:	e000      	b.n	8004926 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d075      	beq.n	8004a1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004932:	4b65      	ldr	r3, [pc, #404]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 030c 	and.w	r3, r3, #12
 800493a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800493c:	4b62      	ldr	r3, [pc, #392]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	2b0c      	cmp	r3, #12
 800494a:	d102      	bne.n	8004952 <HAL_RCC_OscConfig+0x136>
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2b02      	cmp	r3, #2
 8004950:	d002      	beq.n	8004958 <HAL_RCC_OscConfig+0x13c>
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	2b04      	cmp	r3, #4
 8004956:	d11f      	bne.n	8004998 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004958:	4b5b      	ldr	r3, [pc, #364]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <HAL_RCC_OscConfig+0x154>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e267      	b.n	8004e40 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004970:	4b55      	ldr	r3, [pc, #340]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	061b      	lsls	r3, r3, #24
 800497e:	4952      	ldr	r1, [pc, #328]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004980:	4313      	orrs	r3, r2
 8004982:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004984:	4b51      	ldr	r3, [pc, #324]	; (8004acc <HAL_RCC_OscConfig+0x2b0>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4618      	mov	r0, r3
 800498a:	f7fd fdb7 	bl	80024fc <HAL_InitTick>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d043      	beq.n	8004a1c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e253      	b.n	8004e40 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d023      	beq.n	80049e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049a0:	4b49      	ldr	r3, [pc, #292]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a48      	ldr	r2, [pc, #288]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80049a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7fd fdf2 	bl	8002594 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049b4:	f7fd fdee 	bl	8002594 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e23c      	b.n	8004e40 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049c6:	4b40      	ldr	r3, [pc, #256]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0f0      	beq.n	80049b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d2:	4b3d      	ldr	r3, [pc, #244]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	061b      	lsls	r3, r3, #24
 80049e0:	4939      	ldr	r1, [pc, #228]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	604b      	str	r3, [r1, #4]
 80049e6:	e01a      	b.n	8004a1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049e8:	4b37      	ldr	r3, [pc, #220]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a36      	ldr	r2, [pc, #216]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 80049ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f4:	f7fd fdce 	bl	8002594 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049fc:	f7fd fdca 	bl	8002594 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e218      	b.n	8004e40 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a0e:	4b2e      	ldr	r3, [pc, #184]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f0      	bne.n	80049fc <HAL_RCC_OscConfig+0x1e0>
 8004a1a:	e000      	b.n	8004a1e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d03c      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d01c      	beq.n	8004a6c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a32:	4b25      	ldr	r3, [pc, #148]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a38:	4a23      	ldr	r2, [pc, #140]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a42:	f7fd fda7 	bl	8002594 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a4a:	f7fd fda3 	bl	8002594 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e1f1      	b.n	8004e40 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a5c:	4b1a      	ldr	r3, [pc, #104]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0ef      	beq.n	8004a4a <HAL_RCC_OscConfig+0x22e>
 8004a6a:	e01b      	b.n	8004aa4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a6c:	4b16      	ldr	r3, [pc, #88]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a72:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004a74:	f023 0301 	bic.w	r3, r3, #1
 8004a78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7c:	f7fd fd8a 	bl	8002594 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a84:	f7fd fd86 	bl	8002594 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e1d4      	b.n	8004e40 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a96:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1ef      	bne.n	8004a84 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 80ab 	beq.w	8004c08 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ab6:	4b04      	ldr	r3, [pc, #16]	; (8004ac8 <HAL_RCC_OscConfig+0x2ac>)
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d106      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x2b4>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e005      	b.n	8004ad2 <HAL_RCC_OscConfig+0x2b6>
 8004ac6:	bf00      	nop
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	20000034 	.word	0x20000034
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00d      	beq.n	8004af2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad6:	4baf      	ldr	r3, [pc, #700]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ada:	4aae      	ldr	r2, [pc, #696]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ae2:	4bac      	ldr	r3, [pc, #688]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004aee:	2301      	movs	r3, #1
 8004af0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004af2:	4ba9      	ldr	r3, [pc, #676]	; (8004d98 <HAL_RCC_OscConfig+0x57c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d118      	bne.n	8004b30 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004afe:	4ba6      	ldr	r3, [pc, #664]	; (8004d98 <HAL_RCC_OscConfig+0x57c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4aa5      	ldr	r2, [pc, #660]	; (8004d98 <HAL_RCC_OscConfig+0x57c>)
 8004b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b0a:	f7fd fd43 	bl	8002594 <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b12:	f7fd fd3f 	bl	8002594 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e18d      	b.n	8004e40 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b24:	4b9c      	ldr	r3, [pc, #624]	; (8004d98 <HAL_RCC_OscConfig+0x57c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f0      	beq.n	8004b12 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d108      	bne.n	8004b4a <HAL_RCC_OscConfig+0x32e>
 8004b38:	4b96      	ldr	r3, [pc, #600]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3e:	4a95      	ldr	r2, [pc, #596]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b48:	e024      	b.n	8004b94 <HAL_RCC_OscConfig+0x378>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	2b05      	cmp	r3, #5
 8004b50:	d110      	bne.n	8004b74 <HAL_RCC_OscConfig+0x358>
 8004b52:	4b90      	ldr	r3, [pc, #576]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b58:	4a8e      	ldr	r2, [pc, #568]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004b5a:	f043 0304 	orr.w	r3, r3, #4
 8004b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b62:	4b8c      	ldr	r3, [pc, #560]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	4a8a      	ldr	r2, [pc, #552]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004b6a:	f043 0301 	orr.w	r3, r3, #1
 8004b6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b72:	e00f      	b.n	8004b94 <HAL_RCC_OscConfig+0x378>
 8004b74:	4b87      	ldr	r3, [pc, #540]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7a:	4a86      	ldr	r2, [pc, #536]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004b7c:	f023 0301 	bic.w	r3, r3, #1
 8004b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b84:	4b83      	ldr	r3, [pc, #524]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8a:	4a82      	ldr	r2, [pc, #520]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004b8c:	f023 0304 	bic.w	r3, r3, #4
 8004b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d016      	beq.n	8004bca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9c:	f7fd fcfa 	bl	8002594 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ba2:	e00a      	b.n	8004bba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba4:	f7fd fcf6 	bl	8002594 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e142      	b.n	8004e40 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bba:	4b76      	ldr	r3, [pc, #472]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0ed      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x388>
 8004bc8:	e015      	b.n	8004bf6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bca:	f7fd fce3 	bl	8002594 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bd0:	e00a      	b.n	8004be8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd2:	f7fd fcdf 	bl	8002594 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e12b      	b.n	8004e40 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004be8:	4b6a      	ldr	r3, [pc, #424]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1ed      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bf6:	7ffb      	ldrb	r3, [r7, #31]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d105      	bne.n	8004c08 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bfc:	4b65      	ldr	r3, [pc, #404]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c00:	4a64      	ldr	r2, [pc, #400]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c06:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d03c      	beq.n	8004c8e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01c      	beq.n	8004c56 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c1c:	4b5d      	ldr	r3, [pc, #372]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c22:	4a5c      	ldr	r2, [pc, #368]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2c:	f7fd fcb2 	bl	8002594 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c34:	f7fd fcae 	bl	8002594 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e0fc      	b.n	8004e40 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c46:	4b53      	ldr	r3, [pc, #332]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004c48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0ef      	beq.n	8004c34 <HAL_RCC_OscConfig+0x418>
 8004c54:	e01b      	b.n	8004c8e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c56:	4b4f      	ldr	r3, [pc, #316]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c5c:	4a4d      	ldr	r2, [pc, #308]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c66:	f7fd fc95 	bl	8002594 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c6e:	f7fd fc91 	bl	8002594 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e0df      	b.n	8004e40 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c80:	4b44      	ldr	r3, [pc, #272]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004c82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1ef      	bne.n	8004c6e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80d3 	beq.w	8004e3e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c98:	4b3e      	ldr	r3, [pc, #248]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 030c 	and.w	r3, r3, #12
 8004ca0:	2b0c      	cmp	r3, #12
 8004ca2:	f000 808d 	beq.w	8004dc0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d15a      	bne.n	8004d64 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cae:	4b39      	ldr	r3, [pc, #228]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a38      	ldr	r2, [pc, #224]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004cb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cba:	f7fd fc6b 	bl	8002594 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc2:	f7fd fc67 	bl	8002594 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e0b5      	b.n	8004e40 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cd4:	4b2f      	ldr	r3, [pc, #188]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1f0      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ce0:	4b2c      	ldr	r3, [pc, #176]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004ce2:	68da      	ldr	r2, [r3, #12]
 8004ce4:	4b2d      	ldr	r3, [pc, #180]	; (8004d9c <HAL_RCC_OscConfig+0x580>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6a11      	ldr	r1, [r2, #32]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cf0:	3a01      	subs	r2, #1
 8004cf2:	0112      	lsls	r2, r2, #4
 8004cf4:	4311      	orrs	r1, r2
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004cfa:	0212      	lsls	r2, r2, #8
 8004cfc:	4311      	orrs	r1, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d02:	0852      	lsrs	r2, r2, #1
 8004d04:	3a01      	subs	r2, #1
 8004d06:	0552      	lsls	r2, r2, #21
 8004d08:	4311      	orrs	r1, r2
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d0e:	0852      	lsrs	r2, r2, #1
 8004d10:	3a01      	subs	r2, #1
 8004d12:	0652      	lsls	r2, r2, #25
 8004d14:	4311      	orrs	r1, r2
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d1a:	06d2      	lsls	r2, r2, #27
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	491d      	ldr	r1, [pc, #116]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d24:	4b1b      	ldr	r3, [pc, #108]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a1a      	ldr	r2, [pc, #104]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d2e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d30:	4b18      	ldr	r3, [pc, #96]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	4a17      	ldr	r2, [pc, #92]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d3a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3c:	f7fd fc2a 	bl	8002594 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d44:	f7fd fc26 	bl	8002594 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e074      	b.n	8004e40 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d56:	4b0f      	ldr	r3, [pc, #60]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0x528>
 8004d62:	e06c      	b.n	8004e3e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d64:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a0a      	ldr	r2, [pc, #40]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d6e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004d70:	4b08      	ldr	r3, [pc, #32]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	4a07      	ldr	r2, [pc, #28]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004d76:	f023 0303 	bic.w	r3, r3, #3
 8004d7a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d7c:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	4a04      	ldr	r2, [pc, #16]	; (8004d94 <HAL_RCC_OscConfig+0x578>)
 8004d82:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8c:	f7fd fc02 	bl	8002594 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d92:	e00e      	b.n	8004db2 <HAL_RCC_OscConfig+0x596>
 8004d94:	40021000 	.word	0x40021000
 8004d98:	40007000 	.word	0x40007000
 8004d9c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da0:	f7fd fbf8 	bl	8002594 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e046      	b.n	8004e40 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004db2:	4b25      	ldr	r3, [pc, #148]	; (8004e48 <HAL_RCC_OscConfig+0x62c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1f0      	bne.n	8004da0 <HAL_RCC_OscConfig+0x584>
 8004dbe:	e03e      	b.n	8004e3e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e039      	b.n	8004e40 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004dcc:	4b1e      	ldr	r3, [pc, #120]	; (8004e48 <HAL_RCC_OscConfig+0x62c>)
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f003 0203 	and.w	r2, r3, #3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d12c      	bne.n	8004e3a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	3b01      	subs	r3, #1
 8004dec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d123      	bne.n	8004e3a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d11b      	bne.n	8004e3a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d113      	bne.n	8004e3a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	085b      	lsrs	r3, r3, #1
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d109      	bne.n	8004e3a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e30:	085b      	lsrs	r3, r3, #1
 8004e32:	3b01      	subs	r3, #1
 8004e34:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d001      	beq.n	8004e3e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3720      	adds	r7, #32
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40021000 	.word	0x40021000

08004e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e56:	2300      	movs	r3, #0
 8004e58:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e11e      	b.n	80050a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e64:	4b91      	ldr	r3, [pc, #580]	; (80050ac <HAL_RCC_ClockConfig+0x260>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d910      	bls.n	8004e94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e72:	4b8e      	ldr	r3, [pc, #568]	; (80050ac <HAL_RCC_ClockConfig+0x260>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f023 020f 	bic.w	r2, r3, #15
 8004e7a:	498c      	ldr	r1, [pc, #560]	; (80050ac <HAL_RCC_ClockConfig+0x260>)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e82:	4b8a      	ldr	r3, [pc, #552]	; (80050ac <HAL_RCC_ClockConfig+0x260>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d001      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e106      	b.n	80050a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d073      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d129      	bne.n	8004efc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ea8:	4b81      	ldr	r3, [pc, #516]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e0f4      	b.n	80050a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004eb8:	f000 f966 	bl	8005188 <RCC_GetSysClockFreqFromPLLSource>
 8004ebc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4a7c      	ldr	r2, [pc, #496]	; (80050b4 <HAL_RCC_ClockConfig+0x268>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d93f      	bls.n	8004f46 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ec6:	4b7a      	ldr	r3, [pc, #488]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d009      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d033      	beq.n	8004f46 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d12f      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ee6:	4b72      	ldr	r3, [pc, #456]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eee:	4a70      	ldr	r2, [pc, #448]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8004ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ef6:	2380      	movs	r3, #128	; 0x80
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	e024      	b.n	8004f46 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d107      	bne.n	8004f14 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f04:	4b6a      	ldr	r3, [pc, #424]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d109      	bne.n	8004f24 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e0c6      	b.n	80050a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f14:	4b66      	ldr	r3, [pc, #408]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e0be      	b.n	80050a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004f24:	f000 f8ce 	bl	80050c4 <HAL_RCC_GetSysClockFreq>
 8004f28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4a61      	ldr	r2, [pc, #388]	; (80050b4 <HAL_RCC_ClockConfig+0x268>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d909      	bls.n	8004f46 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f32:	4b5f      	ldr	r3, [pc, #380]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f3a:	4a5d      	ldr	r2, [pc, #372]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8004f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f40:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f46:	4b5a      	ldr	r3, [pc, #360]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f023 0203 	bic.w	r2, r3, #3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	4957      	ldr	r1, [pc, #348]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f58:	f7fd fb1c 	bl	8002594 <HAL_GetTick>
 8004f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5e:	e00a      	b.n	8004f76 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f60:	f7fd fb18 	bl	8002594 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e095      	b.n	80050a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f76:	4b4e      	ldr	r3, [pc, #312]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 020c 	and.w	r2, r3, #12
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d1eb      	bne.n	8004f60 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d023      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fa0:	4b43      	ldr	r3, [pc, #268]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	4a42      	ldr	r2, [pc, #264]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8004fa6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004faa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d007      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004fb8:	4b3d      	ldr	r3, [pc, #244]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004fc0:	4a3b      	ldr	r2, [pc, #236]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8004fc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004fc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fc8:	4b39      	ldr	r3, [pc, #228]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	4936      	ldr	r1, [pc, #216]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	608b      	str	r3, [r1, #8]
 8004fda:	e008      	b.n	8004fee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2b80      	cmp	r3, #128	; 0x80
 8004fe0:	d105      	bne.n	8004fee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004fe2:	4b33      	ldr	r3, [pc, #204]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	4a32      	ldr	r2, [pc, #200]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8004fe8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fee:	4b2f      	ldr	r3, [pc, #188]	; (80050ac <HAL_RCC_ClockConfig+0x260>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d21d      	bcs.n	8005038 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffc:	4b2b      	ldr	r3, [pc, #172]	; (80050ac <HAL_RCC_ClockConfig+0x260>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f023 020f 	bic.w	r2, r3, #15
 8005004:	4929      	ldr	r1, [pc, #164]	; (80050ac <HAL_RCC_ClockConfig+0x260>)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	4313      	orrs	r3, r2
 800500a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800500c:	f7fd fac2 	bl	8002594 <HAL_GetTick>
 8005010:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005012:	e00a      	b.n	800502a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005014:	f7fd fabe 	bl	8002594 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005022:	4293      	cmp	r3, r2
 8005024:	d901      	bls.n	800502a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e03b      	b.n	80050a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800502a:	4b20      	ldr	r3, [pc, #128]	; (80050ac <HAL_RCC_ClockConfig+0x260>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d1ed      	bne.n	8005014 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	d008      	beq.n	8005056 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005044:	4b1a      	ldr	r3, [pc, #104]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	4917      	ldr	r1, [pc, #92]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8005052:	4313      	orrs	r3, r2
 8005054:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b00      	cmp	r3, #0
 8005060:	d009      	beq.n	8005076 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005062:	4b13      	ldr	r3, [pc, #76]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	490f      	ldr	r1, [pc, #60]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 8005072:	4313      	orrs	r3, r2
 8005074:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005076:	f000 f825 	bl	80050c4 <HAL_RCC_GetSysClockFreq>
 800507a:	4601      	mov	r1, r0
 800507c:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <HAL_RCC_ClockConfig+0x264>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	091b      	lsrs	r3, r3, #4
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	4a0c      	ldr	r2, [pc, #48]	; (80050b8 <HAL_RCC_ClockConfig+0x26c>)
 8005088:	5cd3      	ldrb	r3, [r2, r3]
 800508a:	f003 031f 	and.w	r3, r3, #31
 800508e:	fa21 f303 	lsr.w	r3, r1, r3
 8005092:	4a0a      	ldr	r2, [pc, #40]	; (80050bc <HAL_RCC_ClockConfig+0x270>)
 8005094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005096:	4b0a      	ldr	r3, [pc, #40]	; (80050c0 <HAL_RCC_ClockConfig+0x274>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f7fd fa2e 	bl	80024fc <HAL_InitTick>
 80050a0:	4603      	mov	r3, r0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	40022000 	.word	0x40022000
 80050b0:	40021000 	.word	0x40021000
 80050b4:	04c4b400 	.word	0x04c4b400
 80050b8:	0800c4b0 	.word	0x0800c4b0
 80050bc:	20000030 	.word	0x20000030
 80050c0:	20000034 	.word	0x20000034

080050c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80050ca:	4b2c      	ldr	r3, [pc, #176]	; (800517c <HAL_RCC_GetSysClockFreq+0xb8>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 030c 	and.w	r3, r3, #12
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d102      	bne.n	80050dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050d6:	4b2a      	ldr	r3, [pc, #168]	; (8005180 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	e047      	b.n	800516c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80050dc:	4b27      	ldr	r3, [pc, #156]	; (800517c <HAL_RCC_GetSysClockFreq+0xb8>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 030c 	and.w	r3, r3, #12
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d102      	bne.n	80050ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050e8:	4b26      	ldr	r3, [pc, #152]	; (8005184 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	e03e      	b.n	800516c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80050ee:	4b23      	ldr	r3, [pc, #140]	; (800517c <HAL_RCC_GetSysClockFreq+0xb8>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 030c 	and.w	r3, r3, #12
 80050f6:	2b0c      	cmp	r3, #12
 80050f8:	d136      	bne.n	8005168 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050fa:	4b20      	ldr	r3, [pc, #128]	; (800517c <HAL_RCC_GetSysClockFreq+0xb8>)
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005104:	4b1d      	ldr	r3, [pc, #116]	; (800517c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	091b      	lsrs	r3, r3, #4
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	3301      	adds	r3, #1
 8005110:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b03      	cmp	r3, #3
 8005116:	d10c      	bne.n	8005132 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005118:	4a1a      	ldr	r2, [pc, #104]	; (8005184 <HAL_RCC_GetSysClockFreq+0xc0>)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005120:	4a16      	ldr	r2, [pc, #88]	; (800517c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005122:	68d2      	ldr	r2, [r2, #12]
 8005124:	0a12      	lsrs	r2, r2, #8
 8005126:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800512a:	fb02 f303 	mul.w	r3, r2, r3
 800512e:	617b      	str	r3, [r7, #20]
      break;
 8005130:	e00c      	b.n	800514c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005132:	4a13      	ldr	r2, [pc, #76]	; (8005180 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	fbb2 f3f3 	udiv	r3, r2, r3
 800513a:	4a10      	ldr	r2, [pc, #64]	; (800517c <HAL_RCC_GetSysClockFreq+0xb8>)
 800513c:	68d2      	ldr	r2, [r2, #12]
 800513e:	0a12      	lsrs	r2, r2, #8
 8005140:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005144:	fb02 f303 	mul.w	r3, r2, r3
 8005148:	617b      	str	r3, [r7, #20]
      break;
 800514a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800514c:	4b0b      	ldr	r3, [pc, #44]	; (800517c <HAL_RCC_GetSysClockFreq+0xb8>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	0e5b      	lsrs	r3, r3, #25
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	3301      	adds	r3, #1
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	fbb2 f3f3 	udiv	r3, r2, r3
 8005164:	613b      	str	r3, [r7, #16]
 8005166:	e001      	b.n	800516c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800516c:	693b      	ldr	r3, [r7, #16]
}
 800516e:	4618      	mov	r0, r3
 8005170:	371c      	adds	r7, #28
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40021000 	.word	0x40021000
 8005180:	00f42400 	.word	0x00f42400
 8005184:	007a1200 	.word	0x007a1200

08005188 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800518e:	4b1e      	ldr	r3, [pc, #120]	; (8005208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005198:	4b1b      	ldr	r3, [pc, #108]	; (8005208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	091b      	lsrs	r3, r3, #4
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	3301      	adds	r3, #1
 80051a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d10c      	bne.n	80051c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051ac:	4a17      	ldr	r2, [pc, #92]	; (800520c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b4:	4a14      	ldr	r2, [pc, #80]	; (8005208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051b6:	68d2      	ldr	r2, [r2, #12]
 80051b8:	0a12      	lsrs	r2, r2, #8
 80051ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051be:	fb02 f303 	mul.w	r3, r2, r3
 80051c2:	617b      	str	r3, [r7, #20]
    break;
 80051c4:	e00c      	b.n	80051e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051c6:	4a12      	ldr	r2, [pc, #72]	; (8005210 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ce:	4a0e      	ldr	r2, [pc, #56]	; (8005208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051d0:	68d2      	ldr	r2, [r2, #12]
 80051d2:	0a12      	lsrs	r2, r2, #8
 80051d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051d8:	fb02 f303 	mul.w	r3, r2, r3
 80051dc:	617b      	str	r3, [r7, #20]
    break;
 80051de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051e0:	4b09      	ldr	r3, [pc, #36]	; (8005208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	0e5b      	lsrs	r3, r3, #25
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	3301      	adds	r3, #1
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80051fa:	687b      	ldr	r3, [r7, #4]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	40021000 	.word	0x40021000
 800520c:	007a1200 	.word	0x007a1200
 8005210:	00f42400 	.word	0x00f42400

08005214 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800521c:	2300      	movs	r3, #0
 800521e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005220:	2300      	movs	r3, #0
 8005222:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 8098 	beq.w	8005362 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005232:	2300      	movs	r3, #0
 8005234:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005236:	4b43      	ldr	r3, [pc, #268]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10d      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005242:	4b40      	ldr	r3, [pc, #256]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005246:	4a3f      	ldr	r2, [pc, #252]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800524c:	6593      	str	r3, [r2, #88]	; 0x58
 800524e:	4b3d      	ldr	r3, [pc, #244]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005256:	60bb      	str	r3, [r7, #8]
 8005258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800525a:	2301      	movs	r3, #1
 800525c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800525e:	4b3a      	ldr	r3, [pc, #232]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a39      	ldr	r2, [pc, #228]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005268:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800526a:	f7fd f993 	bl	8002594 <HAL_GetTick>
 800526e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005270:	e009      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005272:	f7fd f98f 	bl	8002594 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d902      	bls.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	74fb      	strb	r3, [r7, #19]
        break;
 8005284:	e005      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005286:	4b30      	ldr	r3, [pc, #192]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0ef      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005292:	7cfb      	ldrb	r3, [r7, #19]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d159      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005298:	4b2a      	ldr	r3, [pc, #168]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d01e      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d019      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052b4:	4b23      	ldr	r3, [pc, #140]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052c0:	4b20      	ldr	r3, [pc, #128]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c6:	4a1f      	ldr	r2, [pc, #124]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052d0:	4b1c      	ldr	r3, [pc, #112]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d6:	4a1b      	ldr	r2, [pc, #108]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052e0:	4a18      	ldr	r2, [pc, #96]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d016      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f2:	f7fd f94f 	bl	8002594 <HAL_GetTick>
 80052f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052f8:	e00b      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052fa:	f7fd f94b 	bl	8002594 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	f241 3288 	movw	r2, #5000	; 0x1388
 8005308:	4293      	cmp	r3, r2
 800530a:	d902      	bls.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	74fb      	strb	r3, [r7, #19]
            break;
 8005310:	e006      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005312:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0ec      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005320:	7cfb      	ldrb	r3, [r7, #19]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10b      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005326:	4b07      	ldr	r3, [pc, #28]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	4903      	ldr	r1, [pc, #12]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005336:	4313      	orrs	r3, r2
 8005338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800533c:	e008      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800533e:	7cfb      	ldrb	r3, [r7, #19]
 8005340:	74bb      	strb	r3, [r7, #18]
 8005342:	e005      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005344:	40021000 	.word	0x40021000
 8005348:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534c:	7cfb      	ldrb	r3, [r7, #19]
 800534e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005350:	7c7b      	ldrb	r3, [r7, #17]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d105      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005356:	4ba6      	ldr	r3, [pc, #664]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535a:	4aa5      	ldr	r2, [pc, #660]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800535c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005360:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800536e:	4ba0      	ldr	r3, [pc, #640]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005374:	f023 0203 	bic.w	r2, r3, #3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	499c      	ldr	r1, [pc, #624]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005390:	4b97      	ldr	r3, [pc, #604]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005396:	f023 020c 	bic.w	r2, r3, #12
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	4994      	ldr	r1, [pc, #592]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0304 	and.w	r3, r3, #4
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053b2:	4b8f      	ldr	r3, [pc, #572]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	498b      	ldr	r1, [pc, #556]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0308 	and.w	r3, r3, #8
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053d4:	4b86      	ldr	r3, [pc, #536]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	4983      	ldr	r1, [pc, #524]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053f6:	4b7e      	ldr	r3, [pc, #504]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	497a      	ldr	r1, [pc, #488]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005418:	4b75      	ldr	r3, [pc, #468]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	4972      	ldr	r1, [pc, #456]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800543a:	4b6d      	ldr	r3, [pc, #436]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800543c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005440:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	4969      	ldr	r1, [pc, #420]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800545c:	4b64      	ldr	r3, [pc, #400]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005462:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	4961      	ldr	r1, [pc, #388]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800547e:	4b5c      	ldr	r3, [pc, #368]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005484:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	4958      	ldr	r1, [pc, #352]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800549c:	2b00      	cmp	r3, #0
 800549e:	d015      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054a0:	4b53      	ldr	r3, [pc, #332]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ae:	4950      	ldr	r1, [pc, #320]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054be:	d105      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054c0:	4b4b      	ldr	r3, [pc, #300]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	4a4a      	ldr	r2, [pc, #296]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d015      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80054d8:	4b45      	ldr	r3, [pc, #276]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e6:	4942      	ldr	r1, [pc, #264]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054f6:	d105      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054f8:	4b3d      	ldr	r3, [pc, #244]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	4a3c      	ldr	r2, [pc, #240]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005502:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d015      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005510:	4b37      	ldr	r3, [pc, #220]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005516:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	4934      	ldr	r1, [pc, #208]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800552e:	d105      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005530:	4b2f      	ldr	r3, [pc, #188]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	4a2e      	ldr	r2, [pc, #184]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800553a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d015      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005548:	4b29      	ldr	r3, [pc, #164]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800554a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005556:	4926      	ldr	r1, [pc, #152]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005558:	4313      	orrs	r3, r2
 800555a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005562:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005566:	d105      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005568:	4b21      	ldr	r3, [pc, #132]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	4a20      	ldr	r2, [pc, #128]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800556e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005572:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d015      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005580:	4b1b      	ldr	r3, [pc, #108]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005586:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558e:	4918      	ldr	r1, [pc, #96]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800559e:	d105      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055a0:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	4a12      	ldr	r2, [pc, #72]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d015      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80055b8:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c6:	490a      	ldr	r1, [pc, #40]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055d6:	d105      	bne.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055d8:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	4a04      	ldr	r2, [pc, #16]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80055e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	40021000 	.word	0x40021000

080055f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e049      	b.n	800569a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d106      	bne.n	8005620 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fc fd1c 	bl	8002058 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3304      	adds	r3, #4
 8005630:	4619      	mov	r1, r3
 8005632:	4610      	mov	r0, r2
 8005634:	f001 f822 	bl	800667c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d109      	bne.n	80056c8 <HAL_TIM_PWM_Start+0x24>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b01      	cmp	r3, #1
 80056be:	bf14      	ite	ne
 80056c0:	2301      	movne	r3, #1
 80056c2:	2300      	moveq	r3, #0
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	e03c      	b.n	8005742 <HAL_TIM_PWM_Start+0x9e>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d109      	bne.n	80056e2 <HAL_TIM_PWM_Start+0x3e>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	bf14      	ite	ne
 80056da:	2301      	movne	r3, #1
 80056dc:	2300      	moveq	r3, #0
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	e02f      	b.n	8005742 <HAL_TIM_PWM_Start+0x9e>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d109      	bne.n	80056fc <HAL_TIM_PWM_Start+0x58>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	bf14      	ite	ne
 80056f4:	2301      	movne	r3, #1
 80056f6:	2300      	moveq	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	e022      	b.n	8005742 <HAL_TIM_PWM_Start+0x9e>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	2b0c      	cmp	r3, #12
 8005700:	d109      	bne.n	8005716 <HAL_TIM_PWM_Start+0x72>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b01      	cmp	r3, #1
 800570c:	bf14      	ite	ne
 800570e:	2301      	movne	r3, #1
 8005710:	2300      	moveq	r3, #0
 8005712:	b2db      	uxtb	r3, r3
 8005714:	e015      	b.n	8005742 <HAL_TIM_PWM_Start+0x9e>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b10      	cmp	r3, #16
 800571a:	d109      	bne.n	8005730 <HAL_TIM_PWM_Start+0x8c>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b01      	cmp	r3, #1
 8005726:	bf14      	ite	ne
 8005728:	2301      	movne	r3, #1
 800572a:	2300      	moveq	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	e008      	b.n	8005742 <HAL_TIM_PWM_Start+0x9e>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	bf14      	ite	ne
 800573c:	2301      	movne	r3, #1
 800573e:	2300      	moveq	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e097      	b.n	800587a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d104      	bne.n	800575a <HAL_TIM_PWM_Start+0xb6>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005758:	e023      	b.n	80057a2 <HAL_TIM_PWM_Start+0xfe>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b04      	cmp	r3, #4
 800575e:	d104      	bne.n	800576a <HAL_TIM_PWM_Start+0xc6>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005768:	e01b      	b.n	80057a2 <HAL_TIM_PWM_Start+0xfe>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b08      	cmp	r3, #8
 800576e:	d104      	bne.n	800577a <HAL_TIM_PWM_Start+0xd6>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005778:	e013      	b.n	80057a2 <HAL_TIM_PWM_Start+0xfe>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b0c      	cmp	r3, #12
 800577e:	d104      	bne.n	800578a <HAL_TIM_PWM_Start+0xe6>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005788:	e00b      	b.n	80057a2 <HAL_TIM_PWM_Start+0xfe>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b10      	cmp	r3, #16
 800578e:	d104      	bne.n	800579a <HAL_TIM_PWM_Start+0xf6>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005798:	e003      	b.n	80057a2 <HAL_TIM_PWM_Start+0xfe>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2202      	movs	r2, #2
 800579e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2201      	movs	r2, #1
 80057a8:	6839      	ldr	r1, [r7, #0]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f001 faec 	bl	8006d88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a33      	ldr	r2, [pc, #204]	; (8005884 <HAL_TIM_PWM_Start+0x1e0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d013      	beq.n	80057e2 <HAL_TIM_PWM_Start+0x13e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a32      	ldr	r2, [pc, #200]	; (8005888 <HAL_TIM_PWM_Start+0x1e4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00e      	beq.n	80057e2 <HAL_TIM_PWM_Start+0x13e>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a30      	ldr	r2, [pc, #192]	; (800588c <HAL_TIM_PWM_Start+0x1e8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d009      	beq.n	80057e2 <HAL_TIM_PWM_Start+0x13e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a2f      	ldr	r2, [pc, #188]	; (8005890 <HAL_TIM_PWM_Start+0x1ec>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d004      	beq.n	80057e2 <HAL_TIM_PWM_Start+0x13e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a2d      	ldr	r2, [pc, #180]	; (8005894 <HAL_TIM_PWM_Start+0x1f0>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d101      	bne.n	80057e6 <HAL_TIM_PWM_Start+0x142>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <HAL_TIM_PWM_Start+0x144>
 80057e6:	2300      	movs	r3, #0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d007      	beq.n	80057fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a20      	ldr	r2, [pc, #128]	; (8005884 <HAL_TIM_PWM_Start+0x1e0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d018      	beq.n	8005838 <HAL_TIM_PWM_Start+0x194>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800580e:	d013      	beq.n	8005838 <HAL_TIM_PWM_Start+0x194>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a20      	ldr	r2, [pc, #128]	; (8005898 <HAL_TIM_PWM_Start+0x1f4>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00e      	beq.n	8005838 <HAL_TIM_PWM_Start+0x194>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1f      	ldr	r2, [pc, #124]	; (800589c <HAL_TIM_PWM_Start+0x1f8>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d009      	beq.n	8005838 <HAL_TIM_PWM_Start+0x194>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a17      	ldr	r2, [pc, #92]	; (8005888 <HAL_TIM_PWM_Start+0x1e4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d004      	beq.n	8005838 <HAL_TIM_PWM_Start+0x194>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a16      	ldr	r2, [pc, #88]	; (800588c <HAL_TIM_PWM_Start+0x1e8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d115      	bne.n	8005864 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	4b18      	ldr	r3, [pc, #96]	; (80058a0 <HAL_TIM_PWM_Start+0x1fc>)
 8005840:	4013      	ands	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b06      	cmp	r3, #6
 8005848:	d015      	beq.n	8005876 <HAL_TIM_PWM_Start+0x1d2>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005850:	d011      	beq.n	8005876 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f042 0201 	orr.w	r2, r2, #1
 8005860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005862:	e008      	b.n	8005876 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	e000      	b.n	8005878 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005876:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	40012c00 	.word	0x40012c00
 8005888:	40013400 	.word	0x40013400
 800588c:	40014000 	.word	0x40014000
 8005890:	40014400 	.word	0x40014400
 8005894:	40014800 	.word	0x40014800
 8005898:	40000400 	.word	0x40000400
 800589c:	40000800 	.word	0x40000800
 80058a0:	00010007 	.word	0x00010007

080058a4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d109      	bne.n	80058cc <HAL_TIM_PWM_Start_DMA+0x28>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	bf0c      	ite	eq
 80058c4:	2301      	moveq	r3, #1
 80058c6:	2300      	movne	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	e03c      	b.n	8005946 <HAL_TIM_PWM_Start_DMA+0xa2>
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d109      	bne.n	80058e6 <HAL_TIM_PWM_Start_DMA+0x42>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	bf0c      	ite	eq
 80058de:	2301      	moveq	r3, #1
 80058e0:	2300      	movne	r3, #0
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	e02f      	b.n	8005946 <HAL_TIM_PWM_Start_DMA+0xa2>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d109      	bne.n	8005900 <HAL_TIM_PWM_Start_DMA+0x5c>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	bf0c      	ite	eq
 80058f8:	2301      	moveq	r3, #1
 80058fa:	2300      	movne	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	e022      	b.n	8005946 <HAL_TIM_PWM_Start_DMA+0xa2>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b0c      	cmp	r3, #12
 8005904:	d109      	bne.n	800591a <HAL_TIM_PWM_Start_DMA+0x76>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	bf0c      	ite	eq
 8005912:	2301      	moveq	r3, #1
 8005914:	2300      	movne	r3, #0
 8005916:	b2db      	uxtb	r3, r3
 8005918:	e015      	b.n	8005946 <HAL_TIM_PWM_Start_DMA+0xa2>
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b10      	cmp	r3, #16
 800591e:	d109      	bne.n	8005934 <HAL_TIM_PWM_Start_DMA+0x90>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	bf0c      	ite	eq
 800592c:	2301      	moveq	r3, #1
 800592e:	2300      	movne	r3, #0
 8005930:	b2db      	uxtb	r3, r3
 8005932:	e008      	b.n	8005946 <HAL_TIM_PWM_Start_DMA+0xa2>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b02      	cmp	r3, #2
 800593e:	bf0c      	ite	eq
 8005940:	2301      	moveq	r3, #1
 8005942:	2300      	movne	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 800594a:	2302      	movs	r3, #2
 800594c:	e1a1      	b.n	8005c92 <HAL_TIM_PWM_Start_DMA+0x3ee>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d109      	bne.n	8005968 <HAL_TIM_PWM_Start_DMA+0xc4>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	bf0c      	ite	eq
 8005960:	2301      	moveq	r3, #1
 8005962:	2300      	movne	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	e03c      	b.n	80059e2 <HAL_TIM_PWM_Start_DMA+0x13e>
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b04      	cmp	r3, #4
 800596c:	d109      	bne.n	8005982 <HAL_TIM_PWM_Start_DMA+0xde>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b01      	cmp	r3, #1
 8005978:	bf0c      	ite	eq
 800597a:	2301      	moveq	r3, #1
 800597c:	2300      	movne	r3, #0
 800597e:	b2db      	uxtb	r3, r3
 8005980:	e02f      	b.n	80059e2 <HAL_TIM_PWM_Start_DMA+0x13e>
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2b08      	cmp	r3, #8
 8005986:	d109      	bne.n	800599c <HAL_TIM_PWM_Start_DMA+0xf8>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b01      	cmp	r3, #1
 8005992:	bf0c      	ite	eq
 8005994:	2301      	moveq	r3, #1
 8005996:	2300      	movne	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	e022      	b.n	80059e2 <HAL_TIM_PWM_Start_DMA+0x13e>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b0c      	cmp	r3, #12
 80059a0:	d109      	bne.n	80059b6 <HAL_TIM_PWM_Start_DMA+0x112>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	bf0c      	ite	eq
 80059ae:	2301      	moveq	r3, #1
 80059b0:	2300      	movne	r3, #0
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	e015      	b.n	80059e2 <HAL_TIM_PWM_Start_DMA+0x13e>
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b10      	cmp	r3, #16
 80059ba:	d109      	bne.n	80059d0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	bf0c      	ite	eq
 80059c8:	2301      	moveq	r3, #1
 80059ca:	2300      	movne	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	e008      	b.n	80059e2 <HAL_TIM_PWM_Start_DMA+0x13e>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	bf0c      	ite	eq
 80059dc:	2301      	moveq	r3, #1
 80059de:	2300      	movne	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d034      	beq.n	8005a50 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d104      	bne.n	80059f6 <HAL_TIM_PWM_Start_DMA+0x152>
 80059ec:	887b      	ldrh	r3, [r7, #2]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e14d      	b.n	8005c92 <HAL_TIM_PWM_Start_DMA+0x3ee>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d104      	bne.n	8005a06 <HAL_TIM_PWM_Start_DMA+0x162>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a04:	e026      	b.n	8005a54 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d104      	bne.n	8005a16 <HAL_TIM_PWM_Start_DMA+0x172>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a14:	e01e      	b.n	8005a54 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d104      	bne.n	8005a26 <HAL_TIM_PWM_Start_DMA+0x182>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a24:	e016      	b.n	8005a54 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2b0c      	cmp	r3, #12
 8005a2a:	d104      	bne.n	8005a36 <HAL_TIM_PWM_Start_DMA+0x192>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a34:	e00e      	b.n	8005a54 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b10      	cmp	r3, #16
 8005a3a:	d104      	bne.n	8005a46 <HAL_TIM_PWM_Start_DMA+0x1a2>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a44:	e006      	b.n	8005a54 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a4e:	e001      	b.n	8005a54 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e11e      	b.n	8005c92 <HAL_TIM_PWM_Start_DMA+0x3ee>
  }

  switch (Channel)
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b0c      	cmp	r3, #12
 8005a58:	f200 80ae 	bhi.w	8005bb8 <HAL_TIM_PWM_Start_DMA+0x314>
 8005a5c:	a201      	add	r2, pc, #4	; (adr r2, 8005a64 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8005a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a62:	bf00      	nop
 8005a64:	08005a99 	.word	0x08005a99
 8005a68:	08005bb9 	.word	0x08005bb9
 8005a6c:	08005bb9 	.word	0x08005bb9
 8005a70:	08005bb9 	.word	0x08005bb9
 8005a74:	08005ae1 	.word	0x08005ae1
 8005a78:	08005bb9 	.word	0x08005bb9
 8005a7c:	08005bb9 	.word	0x08005bb9
 8005a80:	08005bb9 	.word	0x08005bb9
 8005a84:	08005b29 	.word	0x08005b29
 8005a88:	08005bb9 	.word	0x08005bb9
 8005a8c:	08005bb9 	.word	0x08005bb9
 8005a90:	08005bb9 	.word	0x08005bb9
 8005a94:	08005b71 	.word	0x08005b71
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	4a7f      	ldr	r2, [pc, #508]	; (8005c9c <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8005a9e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	4a7e      	ldr	r2, [pc, #504]	; (8005ca0 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8005aa6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	4a7d      	ldr	r2, [pc, #500]	; (8005ca4 <HAL_TIM_PWM_Start_DMA+0x400>)
 8005aae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3334      	adds	r3, #52	; 0x34
 8005abc:	461a      	mov	r2, r3
 8005abe:	887b      	ldrh	r3, [r7, #2]
 8005ac0:	f7fc ff2c 	bl	800291c <HAL_DMA_Start_IT>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e0e1      	b.n	8005c92 <HAL_TIM_PWM_Start_DMA+0x3ee>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68da      	ldr	r2, [r3, #12]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005adc:	60da      	str	r2, [r3, #12]
      break;
 8005ade:	e06c      	b.n	8005bba <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae4:	4a6d      	ldr	r2, [pc, #436]	; (8005c9c <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8005ae6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aec:	4a6c      	ldr	r2, [pc, #432]	; (8005ca0 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8005aee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	4a6b      	ldr	r2, [pc, #428]	; (8005ca4 <HAL_TIM_PWM_Start_DMA+0x400>)
 8005af6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3338      	adds	r3, #56	; 0x38
 8005b04:	461a      	mov	r2, r3
 8005b06:	887b      	ldrh	r3, [r7, #2]
 8005b08:	f7fc ff08 	bl	800291c <HAL_DMA_Start_IT>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <HAL_TIM_PWM_Start_DMA+0x272>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e0bd      	b.n	8005c92 <HAL_TIM_PWM_Start_DMA+0x3ee>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b24:	60da      	str	r2, [r3, #12]
      break;
 8005b26:	e048      	b.n	8005bba <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	4a5b      	ldr	r2, [pc, #364]	; (8005c9c <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8005b2e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b34:	4a5a      	ldr	r2, [pc, #360]	; (8005ca0 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8005b36:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	4a59      	ldr	r2, [pc, #356]	; (8005ca4 <HAL_TIM_PWM_Start_DMA+0x400>)
 8005b3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005b44:	6879      	ldr	r1, [r7, #4]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	333c      	adds	r3, #60	; 0x3c
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	887b      	ldrh	r3, [r7, #2]
 8005b50:	f7fc fee4 	bl	800291c <HAL_DMA_Start_IT>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e099      	b.n	8005c92 <HAL_TIM_PWM_Start_DMA+0x3ee>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b6c:	60da      	str	r2, [r3, #12]
      break;
 8005b6e:	e024      	b.n	8005bba <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b74:	4a49      	ldr	r2, [pc, #292]	; (8005c9c <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8005b76:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7c:	4a48      	ldr	r2, [pc, #288]	; (8005ca0 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b84:	4a47      	ldr	r2, [pc, #284]	; (8005ca4 <HAL_TIM_PWM_Start_DMA+0x400>)
 8005b86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005b8c:	6879      	ldr	r1, [r7, #4]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3340      	adds	r3, #64	; 0x40
 8005b94:	461a      	mov	r2, r3
 8005b96:	887b      	ldrh	r3, [r7, #2]
 8005b98:	f7fc fec0 	bl	800291c <HAL_DMA_Start_IT>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <HAL_TIM_PWM_Start_DMA+0x302>
      {
        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e075      	b.n	8005c92 <HAL_TIM_PWM_Start_DMA+0x3ee>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68da      	ldr	r2, [r3, #12]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bb4:	60da      	str	r2, [r3, #12]
      break;
 8005bb6:	e000      	b.n	8005bba <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8005bb8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f001 f8e0 	bl	8006d88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a36      	ldr	r2, [pc, #216]	; (8005ca8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d013      	beq.n	8005bfa <HAL_TIM_PWM_Start_DMA+0x356>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a35      	ldr	r2, [pc, #212]	; (8005cac <HAL_TIM_PWM_Start_DMA+0x408>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00e      	beq.n	8005bfa <HAL_TIM_PWM_Start_DMA+0x356>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a33      	ldr	r2, [pc, #204]	; (8005cb0 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d009      	beq.n	8005bfa <HAL_TIM_PWM_Start_DMA+0x356>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a32      	ldr	r2, [pc, #200]	; (8005cb4 <HAL_TIM_PWM_Start_DMA+0x410>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d004      	beq.n	8005bfa <HAL_TIM_PWM_Start_DMA+0x356>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a30      	ldr	r2, [pc, #192]	; (8005cb8 <HAL_TIM_PWM_Start_DMA+0x414>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d101      	bne.n	8005bfe <HAL_TIM_PWM_Start_DMA+0x35a>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e000      	b.n	8005c00 <HAL_TIM_PWM_Start_DMA+0x35c>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d007      	beq.n	8005c14 <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c12:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a23      	ldr	r2, [pc, #140]	; (8005ca8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d018      	beq.n	8005c50 <HAL_TIM_PWM_Start_DMA+0x3ac>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c26:	d013      	beq.n	8005c50 <HAL_TIM_PWM_Start_DMA+0x3ac>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a23      	ldr	r2, [pc, #140]	; (8005cbc <HAL_TIM_PWM_Start_DMA+0x418>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00e      	beq.n	8005c50 <HAL_TIM_PWM_Start_DMA+0x3ac>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a22      	ldr	r2, [pc, #136]	; (8005cc0 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d009      	beq.n	8005c50 <HAL_TIM_PWM_Start_DMA+0x3ac>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1a      	ldr	r2, [pc, #104]	; (8005cac <HAL_TIM_PWM_Start_DMA+0x408>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d004      	beq.n	8005c50 <HAL_TIM_PWM_Start_DMA+0x3ac>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a19      	ldr	r2, [pc, #100]	; (8005cb0 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d115      	bne.n	8005c7c <HAL_TIM_PWM_Start_DMA+0x3d8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	4b1b      	ldr	r3, [pc, #108]	; (8005cc4 <HAL_TIM_PWM_Start_DMA+0x420>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2b06      	cmp	r3, #6
 8005c60:	d015      	beq.n	8005c8e <HAL_TIM_PWM_Start_DMA+0x3ea>
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c68:	d011      	beq.n	8005c8e <HAL_TIM_PWM_Start_DMA+0x3ea>
    {
      __HAL_TIM_ENABLE(htim);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0201 	orr.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7a:	e008      	b.n	8005c8e <HAL_TIM_PWM_Start_DMA+0x3ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	e000      	b.n	8005c90 <HAL_TIM_PWM_Start_DMA+0x3ec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	0800656b 	.word	0x0800656b
 8005ca0:	08006613 	.word	0x08006613
 8005ca4:	080064d9 	.word	0x080064d9
 8005ca8:	40012c00 	.word	0x40012c00
 8005cac:	40013400 	.word	0x40013400
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	40014400 	.word	0x40014400
 8005cb8:	40014800 	.word	0x40014800
 8005cbc:	40000400 	.word	0x40000400
 8005cc0:	40000800 	.word	0x40000800
 8005cc4:	00010007 	.word	0x00010007

08005cc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e097      	b.n	8005e0c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d106      	bne.n	8005cf6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7fc fa35 	bl	8002160 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6812      	ldr	r2, [r2, #0]
 8005d08:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005d0c:	f023 0307 	bic.w	r3, r3, #7
 8005d10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	f000 fcad 	bl	800667c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d4a:	f023 0303 	bic.w	r3, r3, #3
 8005d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	021b      	lsls	r3, r3, #8
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005d68:	f023 030c 	bic.w	r3, r3, #12
 8005d6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	4313      	orrs	r3, r2
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	011a      	lsls	r2, r3, #4
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	031b      	lsls	r3, r3, #12
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005da6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005dae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e24:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e2c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e34:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e3c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d110      	bne.n	8005e66 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d102      	bne.n	8005e50 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e4a:	7b7b      	ldrb	r3, [r7, #13]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d001      	beq.n	8005e54 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e068      	b.n	8005f26 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e64:	e031      	b.n	8005eca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b04      	cmp	r3, #4
 8005e6a:	d110      	bne.n	8005e8e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e6c:	7bbb      	ldrb	r3, [r7, #14]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d102      	bne.n	8005e78 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e72:	7b3b      	ldrb	r3, [r7, #12]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d001      	beq.n	8005e7c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e054      	b.n	8005f26 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e8c:	e01d      	b.n	8005eca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d108      	bne.n	8005ea6 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e94:	7bbb      	ldrb	r3, [r7, #14]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d105      	bne.n	8005ea6 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e9a:	7b7b      	ldrb	r3, [r7, #13]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d102      	bne.n	8005ea6 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ea0:	7b3b      	ldrb	r3, [r7, #12]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d001      	beq.n	8005eaa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e03d      	b.n	8005f26 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2202      	movs	r2, #2
 8005eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <HAL_TIM_Encoder_Start+0xc2>
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d008      	beq.n	8005ee6 <HAL_TIM_Encoder_Start+0xd2>
 8005ed4:	e00f      	b.n	8005ef6 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2201      	movs	r2, #1
 8005edc:	2100      	movs	r1, #0
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 ff52 	bl	8006d88 <TIM_CCxChannelCmd>
      break;
 8005ee4:	e016      	b.n	8005f14 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2201      	movs	r2, #1
 8005eec:	2104      	movs	r1, #4
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 ff4a 	bl	8006d88 <TIM_CCxChannelCmd>
      break;
 8005ef4:	e00e      	b.n	8005f14 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2201      	movs	r2, #1
 8005efc:	2100      	movs	r1, #0
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 ff42 	bl	8006d88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	2104      	movs	r1, #4
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 ff3b 	bl	8006d88 <TIM_CCxChannelCmd>
      break;
 8005f12:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0201 	orr.w	r2, r2, #1
 8005f22:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b082      	sub	sp, #8
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d122      	bne.n	8005f8a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d11b      	bne.n	8005f8a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f06f 0202 	mvn.w	r2, #2
 8005f5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	f003 0303 	and.w	r3, r3, #3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 fa7f 	bl	8006474 <HAL_TIM_IC_CaptureCallback>
 8005f76:	e005      	b.n	8005f84 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fa71 	bl	8006460 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fa82 	bl	8006488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d122      	bne.n	8005fde <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f003 0304 	and.w	r3, r3, #4
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d11b      	bne.n	8005fde <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f06f 0204 	mvn.w	r2, #4
 8005fae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fa55 	bl	8006474 <HAL_TIM_IC_CaptureCallback>
 8005fca:	e005      	b.n	8005fd8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fa47 	bl	8006460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fa58 	bl	8006488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	f003 0308 	and.w	r3, r3, #8
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	d122      	bne.n	8006032 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b08      	cmp	r3, #8
 8005ff8:	d11b      	bne.n	8006032 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f06f 0208 	mvn.w	r2, #8
 8006002:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2204      	movs	r2, #4
 8006008:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	f003 0303 	and.w	r3, r3, #3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fa2b 	bl	8006474 <HAL_TIM_IC_CaptureCallback>
 800601e:	e005      	b.n	800602c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fa1d 	bl	8006460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fa2e 	bl	8006488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	f003 0310 	and.w	r3, r3, #16
 800603c:	2b10      	cmp	r3, #16
 800603e:	d122      	bne.n	8006086 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f003 0310 	and.w	r3, r3, #16
 800604a:	2b10      	cmp	r3, #16
 800604c:	d11b      	bne.n	8006086 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f06f 0210 	mvn.w	r2, #16
 8006056:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2208      	movs	r2, #8
 800605c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fa01 	bl	8006474 <HAL_TIM_IC_CaptureCallback>
 8006072:	e005      	b.n	8006080 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f9f3 	bl	8006460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fa04 	bl	8006488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b01      	cmp	r3, #1
 8006092:	d10e      	bne.n	80060b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d107      	bne.n	80060b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f06f 0201 	mvn.w	r2, #1
 80060aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f9cd 	bl	800644c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060bc:	2b80      	cmp	r3, #128	; 0x80
 80060be:	d10e      	bne.n	80060de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ca:	2b80      	cmp	r3, #128	; 0x80
 80060cc:	d107      	bne.n	80060de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 ffa7 	bl	800702c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ec:	d10e      	bne.n	800610c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f8:	2b80      	cmp	r3, #128	; 0x80
 80060fa:	d107      	bne.n	800610c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 ff9a 	bl	8007040 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006116:	2b40      	cmp	r3, #64	; 0x40
 8006118:	d10e      	bne.n	8006138 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006124:	2b40      	cmp	r3, #64	; 0x40
 8006126:	d107      	bne.n	8006138 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f9bc 	bl	80064b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f003 0320 	and.w	r3, r3, #32
 8006142:	2b20      	cmp	r3, #32
 8006144:	d10e      	bne.n	8006164 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f003 0320 	and.w	r3, r3, #32
 8006150:	2b20      	cmp	r3, #32
 8006152:	d107      	bne.n	8006164 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f06f 0220 	mvn.w	r2, #32
 800615c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 ff5a 	bl	8007018 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800616e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006172:	d10f      	bne.n	8006194 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800617e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006182:	d107      	bne.n	8006194 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800618c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 ff60 	bl	8007054 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800619e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061a2:	d10f      	bne.n	80061c4 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061b2:	d107      	bne.n	80061c4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80061bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 ff52 	bl	8007068 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061d2:	d10f      	bne.n	80061f4 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061e2:	d107      	bne.n	80061f4 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80061ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 ff44 	bl	800707c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006202:	d10f      	bne.n	8006224 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800620e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006212:	d107      	bne.n	8006224 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800621c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 ff36 	bl	8007090 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006224:	bf00      	nop
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006242:	2302      	movs	r3, #2
 8006244:	e0fd      	b.n	8006442 <HAL_TIM_PWM_ConfigChannel+0x216>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b14      	cmp	r3, #20
 8006252:	f200 80f0 	bhi.w	8006436 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006256:	a201      	add	r2, pc, #4	; (adr r2, 800625c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625c:	080062b1 	.word	0x080062b1
 8006260:	08006437 	.word	0x08006437
 8006264:	08006437 	.word	0x08006437
 8006268:	08006437 	.word	0x08006437
 800626c:	080062f1 	.word	0x080062f1
 8006270:	08006437 	.word	0x08006437
 8006274:	08006437 	.word	0x08006437
 8006278:	08006437 	.word	0x08006437
 800627c:	08006333 	.word	0x08006333
 8006280:	08006437 	.word	0x08006437
 8006284:	08006437 	.word	0x08006437
 8006288:	08006437 	.word	0x08006437
 800628c:	08006373 	.word	0x08006373
 8006290:	08006437 	.word	0x08006437
 8006294:	08006437 	.word	0x08006437
 8006298:	08006437 	.word	0x08006437
 800629c:	080063b5 	.word	0x080063b5
 80062a0:	08006437 	.word	0x08006437
 80062a4:	08006437 	.word	0x08006437
 80062a8:	08006437 	.word	0x08006437
 80062ac:	080063f5 	.word	0x080063f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68b9      	ldr	r1, [r7, #8]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 fa70 	bl	800679c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699a      	ldr	r2, [r3, #24]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 0208 	orr.w	r2, r2, #8
 80062ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	699a      	ldr	r2, [r3, #24]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0204 	bic.w	r2, r2, #4
 80062da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6999      	ldr	r1, [r3, #24]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	691a      	ldr	r2, [r3, #16]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	619a      	str	r2, [r3, #24]
      break;
 80062ee:	e0a3      	b.n	8006438 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68b9      	ldr	r1, [r7, #8]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 fae0 	bl	80068bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	699a      	ldr	r2, [r3, #24]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800630a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	699a      	ldr	r2, [r3, #24]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800631a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6999      	ldr	r1, [r3, #24]
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	021a      	lsls	r2, r3, #8
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	619a      	str	r2, [r3, #24]
      break;
 8006330:	e082      	b.n	8006438 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68b9      	ldr	r1, [r7, #8]
 8006338:	4618      	mov	r0, r3
 800633a:	f000 fb49 	bl	80069d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69da      	ldr	r2, [r3, #28]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f042 0208 	orr.w	r2, r2, #8
 800634c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	69da      	ldr	r2, [r3, #28]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0204 	bic.w	r2, r2, #4
 800635c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	69d9      	ldr	r1, [r3, #28]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	691a      	ldr	r2, [r3, #16]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	61da      	str	r2, [r3, #28]
      break;
 8006370:	e062      	b.n	8006438 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68b9      	ldr	r1, [r7, #8]
 8006378:	4618      	mov	r0, r3
 800637a:	f000 fbb1 	bl	8006ae0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69da      	ldr	r2, [r3, #28]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800638c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69da      	ldr	r2, [r3, #28]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800639c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69d9      	ldr	r1, [r3, #28]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	021a      	lsls	r2, r3, #8
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	61da      	str	r2, [r3, #28]
      break;
 80063b2:	e041      	b.n	8006438 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68b9      	ldr	r1, [r7, #8]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 fc1a 	bl	8006bf4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f042 0208 	orr.w	r2, r2, #8
 80063ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0204 	bic.w	r2, r2, #4
 80063de:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	691a      	ldr	r2, [r3, #16]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80063f2:	e021      	b.n	8006438 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68b9      	ldr	r1, [r7, #8]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fc5e 	bl	8006cbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800640e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800641e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	021a      	lsls	r2, r3, #8
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006434:	e000      	b.n	8006438 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006436:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop

0800644c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d107      	bne.n	8006500 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2201      	movs	r2, #1
 80064f4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064fe:	e02a      	b.n	8006556 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	429a      	cmp	r2, r3
 8006508:	d107      	bne.n	800651a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2202      	movs	r2, #2
 800650e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006518:	e01d      	b.n	8006556 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	429a      	cmp	r2, r3
 8006522:	d107      	bne.n	8006534 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2204      	movs	r2, #4
 8006528:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006532:	e010      	b.n	8006556 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	429a      	cmp	r2, r3
 800653c:	d107      	bne.n	800654e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2208      	movs	r2, #8
 8006542:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800654c:	e003      	b.n	8006556 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f7ff ffb4 	bl	80064c4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	771a      	strb	r2, [r3, #28]
}
 8006562:	bf00      	nop
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b084      	sub	sp, #16
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006576:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	429a      	cmp	r2, r3
 8006580:	d10b      	bne.n	800659a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d136      	bne.n	80065fe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006598:	e031      	b.n	80065fe <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d10b      	bne.n	80065bc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2202      	movs	r2, #2
 80065a8:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d125      	bne.n	80065fe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065ba:	e020      	b.n	80065fe <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d10b      	bne.n	80065de <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2204      	movs	r2, #4
 80065ca:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d114      	bne.n	80065fe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065dc:	e00f      	b.n	80065fe <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d10a      	bne.n	80065fe <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2208      	movs	r2, #8
 80065ec:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d103      	bne.n	80065fe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f7ff ff42 	bl	8006488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	771a      	strb	r2, [r3, #28]
}
 800660a:	bf00      	nop
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	429a      	cmp	r2, r3
 8006628:	d103      	bne.n	8006632 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2201      	movs	r2, #1
 800662e:	771a      	strb	r2, [r3, #28]
 8006630:	e019      	b.n	8006666 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	429a      	cmp	r2, r3
 800663a:	d103      	bne.n	8006644 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2202      	movs	r2, #2
 8006640:	771a      	strb	r2, [r3, #28]
 8006642:	e010      	b.n	8006666 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	429a      	cmp	r2, r3
 800664c:	d103      	bne.n	8006656 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2204      	movs	r2, #4
 8006652:	771a      	strb	r2, [r3, #28]
 8006654:	e007      	b.n	8006666 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	429a      	cmp	r2, r3
 800665e:	d102      	bne.n	8006666 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2208      	movs	r2, #8
 8006664:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f7ff ff18 	bl	800649c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	771a      	strb	r2, [r3, #28]
}
 8006672:	bf00      	nop
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
	...

0800667c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a3c      	ldr	r2, [pc, #240]	; (8006780 <TIM_Base_SetConfig+0x104>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00f      	beq.n	80066b4 <TIM_Base_SetConfig+0x38>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800669a:	d00b      	beq.n	80066b4 <TIM_Base_SetConfig+0x38>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a39      	ldr	r2, [pc, #228]	; (8006784 <TIM_Base_SetConfig+0x108>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d007      	beq.n	80066b4 <TIM_Base_SetConfig+0x38>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a38      	ldr	r2, [pc, #224]	; (8006788 <TIM_Base_SetConfig+0x10c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d003      	beq.n	80066b4 <TIM_Base_SetConfig+0x38>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a37      	ldr	r2, [pc, #220]	; (800678c <TIM_Base_SetConfig+0x110>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d108      	bne.n	80066c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a2d      	ldr	r2, [pc, #180]	; (8006780 <TIM_Base_SetConfig+0x104>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d01b      	beq.n	8006706 <TIM_Base_SetConfig+0x8a>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d4:	d017      	beq.n	8006706 <TIM_Base_SetConfig+0x8a>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a2a      	ldr	r2, [pc, #168]	; (8006784 <TIM_Base_SetConfig+0x108>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d013      	beq.n	8006706 <TIM_Base_SetConfig+0x8a>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a29      	ldr	r2, [pc, #164]	; (8006788 <TIM_Base_SetConfig+0x10c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d00f      	beq.n	8006706 <TIM_Base_SetConfig+0x8a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a28      	ldr	r2, [pc, #160]	; (800678c <TIM_Base_SetConfig+0x110>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d00b      	beq.n	8006706 <TIM_Base_SetConfig+0x8a>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a27      	ldr	r2, [pc, #156]	; (8006790 <TIM_Base_SetConfig+0x114>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d007      	beq.n	8006706 <TIM_Base_SetConfig+0x8a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a26      	ldr	r2, [pc, #152]	; (8006794 <TIM_Base_SetConfig+0x118>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d003      	beq.n	8006706 <TIM_Base_SetConfig+0x8a>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a25      	ldr	r2, [pc, #148]	; (8006798 <TIM_Base_SetConfig+0x11c>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d108      	bne.n	8006718 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800670c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	4313      	orrs	r3, r2
 8006716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	4313      	orrs	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a10      	ldr	r2, [pc, #64]	; (8006780 <TIM_Base_SetConfig+0x104>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d00f      	beq.n	8006764 <TIM_Base_SetConfig+0xe8>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a11      	ldr	r2, [pc, #68]	; (800678c <TIM_Base_SetConfig+0x110>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d00b      	beq.n	8006764 <TIM_Base_SetConfig+0xe8>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a10      	ldr	r2, [pc, #64]	; (8006790 <TIM_Base_SetConfig+0x114>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d007      	beq.n	8006764 <TIM_Base_SetConfig+0xe8>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a0f      	ldr	r2, [pc, #60]	; (8006794 <TIM_Base_SetConfig+0x118>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d003      	beq.n	8006764 <TIM_Base_SetConfig+0xe8>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a0e      	ldr	r2, [pc, #56]	; (8006798 <TIM_Base_SetConfig+0x11c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d103      	bne.n	800676c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	691a      	ldr	r2, [r3, #16]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	615a      	str	r2, [r3, #20]
}
 8006772:	bf00      	nop
 8006774:	3714      	adds	r7, #20
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	40012c00 	.word	0x40012c00
 8006784:	40000400 	.word	0x40000400
 8006788:	40000800 	.word	0x40000800
 800678c:	40013400 	.word	0x40013400
 8006790:	40014000 	.word	0x40014000
 8006794:	40014400 	.word	0x40014400
 8006798:	40014800 	.word	0x40014800

0800679c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	f023 0201 	bic.w	r2, r3, #1
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0303 	bic.w	r3, r3, #3
 80067d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	4313      	orrs	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f023 0302 	bic.w	r3, r3, #2
 80067e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a2c      	ldr	r2, [pc, #176]	; (80068a8 <TIM_OC1_SetConfig+0x10c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d00f      	beq.n	800681c <TIM_OC1_SetConfig+0x80>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a2b      	ldr	r2, [pc, #172]	; (80068ac <TIM_OC1_SetConfig+0x110>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d00b      	beq.n	800681c <TIM_OC1_SetConfig+0x80>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a2a      	ldr	r2, [pc, #168]	; (80068b0 <TIM_OC1_SetConfig+0x114>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d007      	beq.n	800681c <TIM_OC1_SetConfig+0x80>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a29      	ldr	r2, [pc, #164]	; (80068b4 <TIM_OC1_SetConfig+0x118>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d003      	beq.n	800681c <TIM_OC1_SetConfig+0x80>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a28      	ldr	r2, [pc, #160]	; (80068b8 <TIM_OC1_SetConfig+0x11c>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d10c      	bne.n	8006836 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f023 0308 	bic.w	r3, r3, #8
 8006822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	4313      	orrs	r3, r2
 800682c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f023 0304 	bic.w	r3, r3, #4
 8006834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a1b      	ldr	r2, [pc, #108]	; (80068a8 <TIM_OC1_SetConfig+0x10c>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d00f      	beq.n	800685e <TIM_OC1_SetConfig+0xc2>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a1a      	ldr	r2, [pc, #104]	; (80068ac <TIM_OC1_SetConfig+0x110>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d00b      	beq.n	800685e <TIM_OC1_SetConfig+0xc2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a19      	ldr	r2, [pc, #100]	; (80068b0 <TIM_OC1_SetConfig+0x114>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d007      	beq.n	800685e <TIM_OC1_SetConfig+0xc2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a18      	ldr	r2, [pc, #96]	; (80068b4 <TIM_OC1_SetConfig+0x118>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d003      	beq.n	800685e <TIM_OC1_SetConfig+0xc2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a17      	ldr	r2, [pc, #92]	; (80068b8 <TIM_OC1_SetConfig+0x11c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d111      	bne.n	8006882 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800686c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4313      	orrs	r3, r2
 8006876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	4313      	orrs	r3, r2
 8006880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	621a      	str	r2, [r3, #32]
}
 800689c:	bf00      	nop
 800689e:	371c      	adds	r7, #28
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr
 80068a8:	40012c00 	.word	0x40012c00
 80068ac:	40013400 	.word	0x40013400
 80068b0:	40014000 	.word	0x40014000
 80068b4:	40014400 	.word	0x40014400
 80068b8:	40014800 	.word	0x40014800

080068bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	f023 0210 	bic.w	r2, r3, #16
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	021b      	lsls	r3, r3, #8
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	4313      	orrs	r3, r2
 8006902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f023 0320 	bic.w	r3, r3, #32
 800690a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	011b      	lsls	r3, r3, #4
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	4313      	orrs	r3, r2
 8006916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a28      	ldr	r2, [pc, #160]	; (80069bc <TIM_OC2_SetConfig+0x100>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d003      	beq.n	8006928 <TIM_OC2_SetConfig+0x6c>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a27      	ldr	r2, [pc, #156]	; (80069c0 <TIM_OC2_SetConfig+0x104>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d10d      	bne.n	8006944 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800692e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	011b      	lsls	r3, r3, #4
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006942:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a1d      	ldr	r2, [pc, #116]	; (80069bc <TIM_OC2_SetConfig+0x100>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d00f      	beq.n	800696c <TIM_OC2_SetConfig+0xb0>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a1c      	ldr	r2, [pc, #112]	; (80069c0 <TIM_OC2_SetConfig+0x104>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00b      	beq.n	800696c <TIM_OC2_SetConfig+0xb0>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a1b      	ldr	r2, [pc, #108]	; (80069c4 <TIM_OC2_SetConfig+0x108>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d007      	beq.n	800696c <TIM_OC2_SetConfig+0xb0>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a1a      	ldr	r2, [pc, #104]	; (80069c8 <TIM_OC2_SetConfig+0x10c>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d003      	beq.n	800696c <TIM_OC2_SetConfig+0xb0>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a19      	ldr	r2, [pc, #100]	; (80069cc <TIM_OC2_SetConfig+0x110>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d113      	bne.n	8006994 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006972:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800697a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4313      	orrs	r3, r2
 8006986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	4313      	orrs	r3, r2
 8006992:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	621a      	str	r2, [r3, #32]
}
 80069ae:	bf00      	nop
 80069b0:	371c      	adds	r7, #28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	40012c00 	.word	0x40012c00
 80069c0:	40013400 	.word	0x40013400
 80069c4:	40014000 	.word	0x40014000
 80069c8:	40014400 	.word	0x40014400
 80069cc:	40014800 	.word	0x40014800

080069d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0303 	bic.w	r3, r3, #3
 8006a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	021b      	lsls	r3, r3, #8
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a27      	ldr	r2, [pc, #156]	; (8006acc <TIM_OC3_SetConfig+0xfc>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d003      	beq.n	8006a3a <TIM_OC3_SetConfig+0x6a>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a26      	ldr	r2, [pc, #152]	; (8006ad0 <TIM_OC3_SetConfig+0x100>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d10d      	bne.n	8006a56 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	021b      	lsls	r3, r3, #8
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a1c      	ldr	r2, [pc, #112]	; (8006acc <TIM_OC3_SetConfig+0xfc>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00f      	beq.n	8006a7e <TIM_OC3_SetConfig+0xae>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a1b      	ldr	r2, [pc, #108]	; (8006ad0 <TIM_OC3_SetConfig+0x100>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00b      	beq.n	8006a7e <TIM_OC3_SetConfig+0xae>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a1a      	ldr	r2, [pc, #104]	; (8006ad4 <TIM_OC3_SetConfig+0x104>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d007      	beq.n	8006a7e <TIM_OC3_SetConfig+0xae>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a19      	ldr	r2, [pc, #100]	; (8006ad8 <TIM_OC3_SetConfig+0x108>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d003      	beq.n	8006a7e <TIM_OC3_SetConfig+0xae>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a18      	ldr	r2, [pc, #96]	; (8006adc <TIM_OC3_SetConfig+0x10c>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d113      	bne.n	8006aa6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	011b      	lsls	r3, r3, #4
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	011b      	lsls	r3, r3, #4
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	621a      	str	r2, [r3, #32]
}
 8006ac0:	bf00      	nop
 8006ac2:	371c      	adds	r7, #28
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	40012c00 	.word	0x40012c00
 8006ad0:	40013400 	.word	0x40013400
 8006ad4:	40014000 	.word	0x40014000
 8006ad8:	40014400 	.word	0x40014400
 8006adc:	40014800 	.word	0x40014800

08006ae0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b087      	sub	sp, #28
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	021b      	lsls	r3, r3, #8
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	031b      	lsls	r3, r3, #12
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a28      	ldr	r2, [pc, #160]	; (8006be0 <TIM_OC4_SetConfig+0x100>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d003      	beq.n	8006b4c <TIM_OC4_SetConfig+0x6c>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a27      	ldr	r2, [pc, #156]	; (8006be4 <TIM_OC4_SetConfig+0x104>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d10d      	bne.n	8006b68 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	031b      	lsls	r3, r3, #12
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a1d      	ldr	r2, [pc, #116]	; (8006be0 <TIM_OC4_SetConfig+0x100>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d00f      	beq.n	8006b90 <TIM_OC4_SetConfig+0xb0>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a1c      	ldr	r2, [pc, #112]	; (8006be4 <TIM_OC4_SetConfig+0x104>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00b      	beq.n	8006b90 <TIM_OC4_SetConfig+0xb0>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a1b      	ldr	r2, [pc, #108]	; (8006be8 <TIM_OC4_SetConfig+0x108>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d007      	beq.n	8006b90 <TIM_OC4_SetConfig+0xb0>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a1a      	ldr	r2, [pc, #104]	; (8006bec <TIM_OC4_SetConfig+0x10c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d003      	beq.n	8006b90 <TIM_OC4_SetConfig+0xb0>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a19      	ldr	r2, [pc, #100]	; (8006bf0 <TIM_OC4_SetConfig+0x110>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d113      	bne.n	8006bb8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b96:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b9e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	019b      	lsls	r3, r3, #6
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	019b      	lsls	r3, r3, #6
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	621a      	str	r2, [r3, #32]
}
 8006bd2:	bf00      	nop
 8006bd4:	371c      	adds	r7, #28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	40012c00 	.word	0x40012c00
 8006be4:	40013400 	.word	0x40013400
 8006be8:	40014000 	.word	0x40014000
 8006bec:	40014400 	.word	0x40014400
 8006bf0:	40014800 	.word	0x40014800

08006bf4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	041b      	lsls	r3, r3, #16
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a17      	ldr	r2, [pc, #92]	; (8006ca8 <TIM_OC5_SetConfig+0xb4>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00f      	beq.n	8006c6e <TIM_OC5_SetConfig+0x7a>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a16      	ldr	r2, [pc, #88]	; (8006cac <TIM_OC5_SetConfig+0xb8>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00b      	beq.n	8006c6e <TIM_OC5_SetConfig+0x7a>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a15      	ldr	r2, [pc, #84]	; (8006cb0 <TIM_OC5_SetConfig+0xbc>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d007      	beq.n	8006c6e <TIM_OC5_SetConfig+0x7a>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a14      	ldr	r2, [pc, #80]	; (8006cb4 <TIM_OC5_SetConfig+0xc0>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d003      	beq.n	8006c6e <TIM_OC5_SetConfig+0x7a>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a13      	ldr	r2, [pc, #76]	; (8006cb8 <TIM_OC5_SetConfig+0xc4>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d109      	bne.n	8006c82 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	621a      	str	r2, [r3, #32]
}
 8006c9c:	bf00      	nop
 8006c9e:	371c      	adds	r7, #28
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	40012c00 	.word	0x40012c00
 8006cac:	40013400 	.word	0x40013400
 8006cb0:	40014000 	.word	0x40014000
 8006cb4:	40014400 	.word	0x40014400
 8006cb8:	40014800 	.word	0x40014800

08006cbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	021b      	lsls	r3, r3, #8
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	051b      	lsls	r3, r3, #20
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a18      	ldr	r2, [pc, #96]	; (8006d74 <TIM_OC6_SetConfig+0xb8>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d00f      	beq.n	8006d38 <TIM_OC6_SetConfig+0x7c>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a17      	ldr	r2, [pc, #92]	; (8006d78 <TIM_OC6_SetConfig+0xbc>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d00b      	beq.n	8006d38 <TIM_OC6_SetConfig+0x7c>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a16      	ldr	r2, [pc, #88]	; (8006d7c <TIM_OC6_SetConfig+0xc0>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d007      	beq.n	8006d38 <TIM_OC6_SetConfig+0x7c>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a15      	ldr	r2, [pc, #84]	; (8006d80 <TIM_OC6_SetConfig+0xc4>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d003      	beq.n	8006d38 <TIM_OC6_SetConfig+0x7c>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a14      	ldr	r2, [pc, #80]	; (8006d84 <TIM_OC6_SetConfig+0xc8>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d109      	bne.n	8006d4c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	029b      	lsls	r3, r3, #10
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	621a      	str	r2, [r3, #32]
}
 8006d66:	bf00      	nop
 8006d68:	371c      	adds	r7, #28
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	40012c00 	.word	0x40012c00
 8006d78:	40013400 	.word	0x40013400
 8006d7c:	40014000 	.word	0x40014000
 8006d80:	40014400 	.word	0x40014400
 8006d84:	40014800 	.word	0x40014800

08006d88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f003 031f 	and.w	r3, r3, #31
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006da0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6a1a      	ldr	r2, [r3, #32]
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	43db      	mvns	r3, r3
 8006daa:	401a      	ands	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6a1a      	ldr	r2, [r3, #32]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f003 031f 	and.w	r3, r3, #31
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	621a      	str	r2, [r3, #32]
}
 8006dc6:	bf00      	nop
 8006dc8:	371c      	adds	r7, #28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
	...

08006dd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d101      	bne.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006de8:	2302      	movs	r3, #2
 8006dea:	e065      	b.n	8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a2c      	ldr	r2, [pc, #176]	; (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d004      	beq.n	8006e20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a2b      	ldr	r2, [pc, #172]	; (8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d108      	bne.n	8006e32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a1b      	ldr	r2, [pc, #108]	; (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d018      	beq.n	8006e8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e62:	d013      	beq.n	8006e8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a18      	ldr	r2, [pc, #96]	; (8006ecc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d00e      	beq.n	8006e8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a17      	ldr	r2, [pc, #92]	; (8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d009      	beq.n	8006e8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a12      	ldr	r2, [pc, #72]	; (8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d004      	beq.n	8006e8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a13      	ldr	r2, [pc, #76]	; (8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d10c      	bne.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	40012c00 	.word	0x40012c00
 8006ec8:	40013400 	.word	0x40013400
 8006ecc:	40000400 	.word	0x40000400
 8006ed0:	40000800 	.word	0x40000800
 8006ed4:	40014000 	.word	0x40014000

08006ed8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d101      	bne.n	8006ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e087      	b.n	8007004 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	041b      	lsls	r3, r3, #16
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a27      	ldr	r2, [pc, #156]	; (8007010 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d004      	beq.n	8006f82 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a25      	ldr	r2, [pc, #148]	; (8007014 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d106      	bne.n	8006f90 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a1e      	ldr	r2, [pc, #120]	; (8007010 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d004      	beq.n	8006fa4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a1d      	ldr	r2, [pc, #116]	; (8007014 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d126      	bne.n	8006ff2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fae:	051b      	lsls	r3, r3, #20
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a0e      	ldr	r2, [pc, #56]	; (8007010 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d004      	beq.n	8006fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a0d      	ldr	r2, [pc, #52]	; (8007014 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d106      	bne.n	8006ff2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	40012c00 	.word	0x40012c00
 8007014:	40013400 	.word	0x40013400

08007018 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80070b4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80070b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	b29a      	uxth	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b085      	sub	sp, #20
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80070da:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80070de:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	43db      	mvns	r3, r3
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	4013      	ands	r3, r2
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007108:	b084      	sub	sp, #16
 800710a:	b480      	push	{r7}
 800710c:	b083      	sub	sp, #12
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	f107 0014 	add.w	r0, r7, #20
 8007116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	b004      	add	sp, #16
 8007148:	4770      	bx	lr
	...

0800714c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800714c:	b480      	push	{r7}
 800714e:	b09b      	sub	sp, #108	; 0x6c
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	b29b      	uxth	r3, r3
 800716a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800716e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007172:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	78db      	ldrb	r3, [r3, #3]
 800717a:	2b03      	cmp	r3, #3
 800717c:	d81f      	bhi.n	80071be <USB_ActivateEndpoint+0x72>
 800717e:	a201      	add	r2, pc, #4	; (adr r2, 8007184 <USB_ActivateEndpoint+0x38>)
 8007180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007184:	08007195 	.word	0x08007195
 8007188:	080071b1 	.word	0x080071b1
 800718c:	080071c7 	.word	0x080071c7
 8007190:	080071a3 	.word	0x080071a3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007194:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007198:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800719c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80071a0:	e012      	b.n	80071c8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80071a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80071a6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80071aa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80071ae:	e00b      	b.n	80071c8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80071b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80071b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071b8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80071bc:	e004      	b.n	80071c8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80071c4:	e000      	b.n	80071c8 <USB_ActivateEndpoint+0x7c>
      break;
 80071c6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	441a      	add	r2, r3
 80071d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80071d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	b21b      	sxth	r3, r3
 80071fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007202:	b21a      	sxth	r2, r3
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	b21b      	sxth	r3, r3
 800720a:	4313      	orrs	r3, r2
 800720c:	b21b      	sxth	r3, r3
 800720e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	441a      	add	r2, r3
 800721c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800722c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007230:	b29b      	uxth	r3, r3
 8007232:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	7b1b      	ldrb	r3, [r3, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	f040 8149 	bne.w	80074d0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	785b      	ldrb	r3, [r3, #1]
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 8084 	beq.w	8007350 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007252:	b29b      	uxth	r3, r3
 8007254:	461a      	mov	r2, r3
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	4413      	add	r3, r2
 800725a:	617b      	str	r3, [r7, #20]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	00da      	lsls	r2, r3, #3
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	4413      	add	r3, r2
 8007266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800726a:	613b      	str	r3, [r7, #16]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	88db      	ldrh	r3, [r3, #6]
 8007270:	085b      	lsrs	r3, r3, #1
 8007272:	b29b      	uxth	r3, r3
 8007274:	005b      	lsls	r3, r3, #1
 8007276:	b29a      	uxth	r2, r3
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	81fb      	strh	r3, [r7, #14]
 800728a:	89fb      	ldrh	r3, [r7, #14]
 800728c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007290:	2b00      	cmp	r3, #0
 8007292:	d01b      	beq.n	80072cc <USB_ActivateEndpoint+0x180>
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072aa:	81bb      	strh	r3, [r7, #12]
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	441a      	add	r2, r3
 80072b6:	89bb      	ldrh	r3, [r7, #12]
 80072b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	78db      	ldrb	r3, [r3, #3]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d020      	beq.n	8007316 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	881b      	ldrh	r3, [r3, #0]
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ea:	813b      	strh	r3, [r7, #8]
 80072ec:	893b      	ldrh	r3, [r7, #8]
 80072ee:	f083 0320 	eor.w	r3, r3, #32
 80072f2:	813b      	strh	r3, [r7, #8]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	441a      	add	r2, r3
 80072fe:	893b      	ldrh	r3, [r7, #8]
 8007300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800730c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007310:	b29b      	uxth	r3, r3
 8007312:	8013      	strh	r3, [r2, #0]
 8007314:	e27f      	b.n	8007816 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4413      	add	r3, r2
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	b29b      	uxth	r3, r3
 8007324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800732c:	817b      	strh	r3, [r7, #10]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	441a      	add	r2, r3
 8007338:	897b      	ldrh	r3, [r7, #10]
 800733a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800733e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800734a:	b29b      	uxth	r3, r3
 800734c:	8013      	strh	r3, [r2, #0]
 800734e:	e262      	b.n	8007816 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800735a:	b29b      	uxth	r3, r3
 800735c:	461a      	mov	r2, r3
 800735e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007360:	4413      	add	r3, r2
 8007362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	00da      	lsls	r2, r3, #3
 800736a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736c:	4413      	add	r3, r2
 800736e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007372:	62bb      	str	r3, [r7, #40]	; 0x28
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	88db      	ldrh	r3, [r3, #6]
 8007378:	085b      	lsrs	r3, r3, #1
 800737a:	b29b      	uxth	r3, r3
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	b29a      	uxth	r2, r3
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	627b      	str	r3, [r7, #36]	; 0x24
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800738e:	b29b      	uxth	r3, r3
 8007390:	461a      	mov	r2, r3
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	4413      	add	r3, r2
 8007396:	627b      	str	r3, [r7, #36]	; 0x24
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	00da      	lsls	r2, r3, #3
 800739e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a0:	4413      	add	r3, r2
 80073a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073a6:	623b      	str	r3, [r7, #32]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d112      	bne.n	80073d6 <USB_ActivateEndpoint+0x28a>
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	801a      	strh	r2, [r3, #0]
 80073c0:	6a3b      	ldr	r3, [r7, #32]
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	801a      	strh	r2, [r3, #0]
 80073d4:	e02f      	b.n	8007436 <USB_ActivateEndpoint+0x2ea>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	2b3e      	cmp	r3, #62	; 0x3e
 80073dc:	d813      	bhi.n	8007406 <USB_ActivateEndpoint+0x2ba>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	085b      	lsrs	r3, r3, #1
 80073e4:	663b      	str	r3, [r7, #96]	; 0x60
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <USB_ActivateEndpoint+0x2ac>
 80073f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073f4:	3301      	adds	r3, #1
 80073f6:	663b      	str	r3, [r7, #96]	; 0x60
 80073f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	029b      	lsls	r3, r3, #10
 80073fe:	b29a      	uxth	r2, r3
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	801a      	strh	r2, [r3, #0]
 8007404:	e017      	b.n	8007436 <USB_ActivateEndpoint+0x2ea>
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	095b      	lsrs	r3, r3, #5
 800740c:	663b      	str	r3, [r7, #96]	; 0x60
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	f003 031f 	and.w	r3, r3, #31
 8007416:	2b00      	cmp	r3, #0
 8007418:	d102      	bne.n	8007420 <USB_ActivateEndpoint+0x2d4>
 800741a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800741c:	3b01      	subs	r3, #1
 800741e:	663b      	str	r3, [r7, #96]	; 0x60
 8007420:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007422:	b29b      	uxth	r3, r3
 8007424:	029b      	lsls	r3, r3, #10
 8007426:	b29b      	uxth	r3, r3
 8007428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800742c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007430:	b29a      	uxth	r2, r3
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	83fb      	strh	r3, [r7, #30]
 8007444:	8bfb      	ldrh	r3, [r7, #30]
 8007446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d01b      	beq.n	8007486 <USB_ActivateEndpoint+0x33a>
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	b29b      	uxth	r3, r3
 800745c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007464:	83bb      	strh	r3, [r7, #28]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	441a      	add	r2, r3
 8007470:	8bbb      	ldrh	r3, [r7, #28]
 8007472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800747a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800747e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007482:	b29b      	uxth	r3, r3
 8007484:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	b29b      	uxth	r3, r3
 8007494:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800749c:	837b      	strh	r3, [r7, #26]
 800749e:	8b7b      	ldrh	r3, [r7, #26]
 80074a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074a4:	837b      	strh	r3, [r7, #26]
 80074a6:	8b7b      	ldrh	r3, [r7, #26]
 80074a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074ac:	837b      	strh	r3, [r7, #26]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	441a      	add	r2, r3
 80074b8:	8b7b      	ldrh	r3, [r7, #26]
 80074ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	8013      	strh	r3, [r2, #0]
 80074ce:	e1a2      	b.n	8007816 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	b29b      	uxth	r3, r3
 80074de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	441a      	add	r2, r3
 80074f4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80074f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007500:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007508:	b29b      	uxth	r3, r3
 800750a:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007516:	b29b      	uxth	r3, r3
 8007518:	461a      	mov	r2, r3
 800751a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800751c:	4413      	add	r3, r2
 800751e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	00da      	lsls	r2, r3, #3
 8007526:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007528:	4413      	add	r3, r2
 800752a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800752e:	657b      	str	r3, [r7, #84]	; 0x54
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	891b      	ldrh	r3, [r3, #8]
 8007534:	085b      	lsrs	r3, r3, #1
 8007536:	b29b      	uxth	r3, r3
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	b29a      	uxth	r2, r3
 800753c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800753e:	801a      	strh	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	653b      	str	r3, [r7, #80]	; 0x50
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800754a:	b29b      	uxth	r3, r3
 800754c:	461a      	mov	r2, r3
 800754e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007550:	4413      	add	r3, r2
 8007552:	653b      	str	r3, [r7, #80]	; 0x50
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	00da      	lsls	r2, r3, #3
 800755a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800755c:	4413      	add	r3, r2
 800755e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	895b      	ldrh	r3, [r3, #10]
 8007568:	085b      	lsrs	r3, r3, #1
 800756a:	b29b      	uxth	r3, r3
 800756c:	005b      	lsls	r3, r3, #1
 800756e:	b29a      	uxth	r2, r3
 8007570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007572:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	785b      	ldrb	r3, [r3, #1]
 8007578:	2b00      	cmp	r3, #0
 800757a:	f040 8091 	bne.w	80076a0 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800758c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800758e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d01b      	beq.n	80075ce <USB_ActivateEndpoint+0x482>
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ac:	877b      	strh	r3, [r7, #58]	; 0x3a
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	441a      	add	r2, r3
 80075b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80075ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	873b      	strh	r3, [r7, #56]	; 0x38
 80075dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80075de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d01b      	beq.n	800761e <USB_ActivateEndpoint+0x4d2>
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	881b      	ldrh	r3, [r3, #0]
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075fc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	441a      	add	r2, r3
 8007608:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800760a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800760e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007616:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800761a:	b29b      	uxth	r3, r3
 800761c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	881b      	ldrh	r3, [r3, #0]
 800762a:	b29b      	uxth	r3, r3
 800762c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007634:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007636:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007638:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800763c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800763e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007640:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007644:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	441a      	add	r2, r3
 8007650:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800765a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800765e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007662:	b29b      	uxth	r3, r3
 8007664:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	b29b      	uxth	r3, r3
 8007674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800767c:	867b      	strh	r3, [r7, #50]	; 0x32
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	441a      	add	r2, r3
 8007688:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800768a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800768e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800769a:	b29b      	uxth	r3, r3
 800769c:	8013      	strh	r3, [r2, #0]
 800769e:	e0ba      	b.n	8007816 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4413      	add	r3, r2
 80076aa:	881b      	ldrh	r3, [r3, #0]
 80076ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80076b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80076b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d01d      	beq.n	80076f8 <USB_ActivateEndpoint+0x5ac>
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	441a      	add	r2, r3
 80076e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80076e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	881b      	ldrh	r3, [r3, #0]
 8007704:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007708:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800770c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007710:	2b00      	cmp	r3, #0
 8007712:	d01d      	beq.n	8007750 <USB_ActivateEndpoint+0x604>
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	881b      	ldrh	r3, [r3, #0]
 8007720:	b29b      	uxth	r3, r3
 8007722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800772a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	441a      	add	r2, r3
 8007738:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800773c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007748:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800774c:	b29b      	uxth	r3, r3
 800774e:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	78db      	ldrb	r3, [r3, #3]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d024      	beq.n	80077a2 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	b29b      	uxth	r3, r3
 8007766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800776a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800776e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007772:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007776:	f083 0320 	eor.w	r3, r3, #32
 800777a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	441a      	add	r2, r3
 8007788:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800778c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800779c:	b29b      	uxth	r3, r3
 800779e:	8013      	strh	r3, [r2, #0]
 80077a0:	e01d      	b.n	80077de <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4413      	add	r3, r2
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	441a      	add	r2, r3
 80077c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80077ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077da:	b29b      	uxth	r3, r3
 80077dc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4413      	add	r3, r2
 80077e8:	881b      	ldrh	r3, [r3, #0]
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	441a      	add	r2, r3
 8007800:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800780a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800780e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007812:	b29b      	uxth	r3, r3
 8007814:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007816:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800781a:	4618      	mov	r0, r3
 800781c:	376c      	adds	r7, #108	; 0x6c
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop

08007828 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007828:	b480      	push	{r7}
 800782a:	b08d      	sub	sp, #52	; 0x34
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	7b1b      	ldrb	r3, [r3, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	f040 808e 	bne.w	8007958 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	785b      	ldrb	r3, [r3, #1]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d044      	beq.n	80078ce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	81bb      	strh	r3, [r7, #12]
 8007852:	89bb      	ldrh	r3, [r7, #12]
 8007854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007858:	2b00      	cmp	r3, #0
 800785a:	d01b      	beq.n	8007894 <USB_DeactivateEndpoint+0x6c>
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	b29b      	uxth	r3, r3
 800786a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800786e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007872:	817b      	strh	r3, [r7, #10]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	441a      	add	r2, r3
 800787e:	897b      	ldrh	r3, [r7, #10]
 8007880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800788c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007890:	b29b      	uxth	r3, r3
 8007892:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078aa:	813b      	strh	r3, [r7, #8]
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	441a      	add	r2, r3
 80078b6:	893b      	ldrh	r3, [r7, #8]
 80078b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	8013      	strh	r3, [r2, #0]
 80078cc:	e192      	b.n	8007bf4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4413      	add	r3, r2
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	827b      	strh	r3, [r7, #18]
 80078dc:	8a7b      	ldrh	r3, [r7, #18]
 80078de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d01b      	beq.n	800791e <USB_DeactivateEndpoint+0xf6>
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	881b      	ldrh	r3, [r3, #0]
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078fc:	823b      	strh	r3, [r7, #16]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	441a      	add	r2, r3
 8007908:	8a3b      	ldrh	r3, [r7, #16]
 800790a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800790e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007912:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800791a:	b29b      	uxth	r3, r3
 800791c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	4413      	add	r3, r2
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	b29b      	uxth	r3, r3
 800792c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007934:	81fb      	strh	r3, [r7, #14]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	441a      	add	r2, r3
 8007940:	89fb      	ldrh	r3, [r7, #14]
 8007942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800794a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800794e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007952:	b29b      	uxth	r3, r3
 8007954:	8013      	strh	r3, [r2, #0]
 8007956:	e14d      	b.n	8007bf4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	785b      	ldrb	r3, [r3, #1]
 800795c:	2b00      	cmp	r3, #0
 800795e:	f040 80a5 	bne.w	8007aac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	843b      	strh	r3, [r7, #32]
 8007970:	8c3b      	ldrh	r3, [r7, #32]
 8007972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d01b      	beq.n	80079b2 <USB_DeactivateEndpoint+0x18a>
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	881b      	ldrh	r3, [r3, #0]
 8007986:	b29b      	uxth	r3, r3
 8007988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800798c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007990:	83fb      	strh	r3, [r7, #30]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	441a      	add	r2, r3
 800799c:	8bfb      	ldrh	r3, [r7, #30]
 800799e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	83bb      	strh	r3, [r7, #28]
 80079c0:	8bbb      	ldrh	r3, [r7, #28]
 80079c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d01b      	beq.n	8007a02 <USB_DeactivateEndpoint+0x1da>
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	881b      	ldrh	r3, [r3, #0]
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e0:	837b      	strh	r3, [r7, #26]
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	441a      	add	r2, r3
 80079ec:	8b7b      	ldrh	r3, [r7, #26]
 80079ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	881b      	ldrh	r3, [r3, #0]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a18:	833b      	strh	r3, [r7, #24]
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	441a      	add	r2, r3
 8007a24:	8b3b      	ldrh	r3, [r7, #24]
 8007a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a50:	82fb      	strh	r3, [r7, #22]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	441a      	add	r2, r3
 8007a5c:	8afb      	ldrh	r3, [r7, #22]
 8007a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4413      	add	r3, r2
 8007a7c:	881b      	ldrh	r3, [r3, #0]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a88:	82bb      	strh	r3, [r7, #20]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	441a      	add	r2, r3
 8007a94:	8abb      	ldrh	r3, [r7, #20]
 8007a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	8013      	strh	r3, [r2, #0]
 8007aaa:	e0a3      	b.n	8007bf4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4413      	add	r3, r2
 8007ab6:	881b      	ldrh	r3, [r3, #0]
 8007ab8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007aba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d01b      	beq.n	8007afc <USB_DeactivateEndpoint+0x2d4>
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ada:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	441a      	add	r2, r3
 8007ae6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4413      	add	r3, r2
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007b0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d01b      	beq.n	8007b4c <USB_DeactivateEndpoint+0x324>
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	4413      	add	r3, r2
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b2a:	853b      	strh	r3, [r7, #40]	; 0x28
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	441a      	add	r2, r3
 8007b36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4413      	add	r3, r2
 8007b56:	881b      	ldrh	r3, [r3, #0]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b62:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	441a      	add	r2, r3
 8007b6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	881b      	ldrh	r3, [r3, #0]
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b9a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	441a      	add	r2, r3
 8007ba6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	881b      	ldrh	r3, [r3, #0]
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd2:	847b      	strh	r3, [r7, #34]	; 0x22
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	441a      	add	r2, r3
 8007bde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3734      	adds	r7, #52	; 0x34
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b0c4      	sub	sp, #272	; 0x110
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	1d3b      	adds	r3, r7, #4
 8007c0a:	6018      	str	r0, [r3, #0]
 8007c0c:	463b      	mov	r3, r7
 8007c0e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c10:	463b      	mov	r3, r7
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	785b      	ldrb	r3, [r3, #1]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	f040 8566 	bne.w	80086e8 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007c1c:	463b      	mov	r3, r7
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	699a      	ldr	r2, [r3, #24]
 8007c22:	463b      	mov	r3, r7
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d905      	bls.n	8007c38 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007c2c:	463b      	mov	r3, r7
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007c36:	e004      	b.n	8007c42 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007c38:	463b      	mov	r3, r7
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007c42:	463b      	mov	r3, r7
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	7b1b      	ldrb	r3, [r3, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d12c      	bne.n	8007ca6 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007c4c:	463b      	mov	r3, r7
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6959      	ldr	r1, [r3, #20]
 8007c52:	463b      	mov	r3, r7
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	88da      	ldrh	r2, [r3, #6]
 8007c58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	1d38      	adds	r0, r7, #4
 8007c60:	6800      	ldr	r0, [r0, #0]
 8007c62:	f001 fa43 	bl	80090ec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007c66:	1d3b      	adds	r3, r7, #4
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	617b      	str	r3, [r7, #20]
 8007c6c:	1d3b      	adds	r3, r7, #4
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	461a      	mov	r2, r3
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	617b      	str	r3, [r7, #20]
 8007c7e:	463b      	mov	r3, r7
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	00da      	lsls	r2, r3, #3
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8007c8e:	f107 0310 	add.w	r3, r7, #16
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	f107 0310 	add.w	r3, r7, #16
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	801a      	strh	r2, [r3, #0]
 8007ca2:	f000 bcec 	b.w	800867e <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007ca6:	463b      	mov	r3, r7
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	78db      	ldrb	r3, [r3, #3]
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	f040 8356 	bne.w	800835e <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007cb2:	463b      	mov	r3, r7
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6a1a      	ldr	r2, [r3, #32]
 8007cb8:	463b      	mov	r3, r7
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	f240 82fa 	bls.w	80082b8 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007cc4:	1d3b      	adds	r3, r7, #4
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	463b      	mov	r3, r7
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cde:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8007ce2:	1d3b      	adds	r3, r7, #4
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	463b      	mov	r3, r7
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	441a      	add	r2, r3
 8007cf0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cfc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8007d08:	463b      	mov	r3, r7
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007d12:	463b      	mov	r3, r7
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	6a1a      	ldr	r2, [r3, #32]
 8007d18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d1c:	1ad2      	subs	r2, r2, r3
 8007d1e:	463b      	mov	r3, r7
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007d24:	1d3b      	adds	r3, r7, #4
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	463b      	mov	r3, r7
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 815e 	beq.w	8007ffc <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d40:	1d3b      	adds	r3, r7, #4
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	637b      	str	r3, [r7, #52]	; 0x34
 8007d46:	463b      	mov	r3, r7
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	785b      	ldrb	r3, [r3, #1]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d164      	bne.n	8007e1a <USB_EPStartXfer+0x218>
 8007d50:	1d3b      	adds	r3, r7, #4
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d56:	1d3b      	adds	r3, r7, #4
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	461a      	mov	r2, r3
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d64:	4413      	add	r3, r2
 8007d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d68:	463b      	mov	r3, r7
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	00da      	lsls	r2, r3, #3
 8007d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d72:	4413      	add	r3, r2
 8007d74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d112      	bne.n	8007da8 <USB_EPStartXfer+0x1a6>
 8007d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d90:	801a      	strh	r2, [r3, #0]
 8007d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da4:	801a      	strh	r2, [r3, #0]
 8007da6:	e054      	b.n	8007e52 <USB_EPStartXfer+0x250>
 8007da8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007dac:	2b3e      	cmp	r3, #62	; 0x3e
 8007dae:	d817      	bhi.n	8007de0 <USB_EPStartXfer+0x1de>
 8007db0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007db4:	085b      	lsrs	r3, r3, #1
 8007db6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007dba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d004      	beq.n	8007dd0 <USB_EPStartXfer+0x1ce>
 8007dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dca:	3301      	adds	r3, #1
 8007dcc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	029b      	lsls	r3, r3, #10
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ddc:	801a      	strh	r2, [r3, #0]
 8007dde:	e038      	b.n	8007e52 <USB_EPStartXfer+0x250>
 8007de0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007de4:	095b      	lsrs	r3, r3, #5
 8007de6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007dea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007dee:	f003 031f 	and.w	r3, r3, #31
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d104      	bne.n	8007e00 <USB_EPStartXfer+0x1fe>
 8007df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	029b      	lsls	r3, r3, #10
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e16:	801a      	strh	r2, [r3, #0]
 8007e18:	e01b      	b.n	8007e52 <USB_EPStartXfer+0x250>
 8007e1a:	463b      	mov	r3, r7
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	785b      	ldrb	r3, [r3, #1]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d116      	bne.n	8007e52 <USB_EPStartXfer+0x250>
 8007e24:	1d3b      	adds	r3, r7, #4
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	461a      	mov	r2, r3
 8007e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e32:	4413      	add	r3, r2
 8007e34:	637b      	str	r3, [r7, #52]	; 0x34
 8007e36:	463b      	mov	r3, r7
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	00da      	lsls	r2, r3, #3
 8007e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e40:	4413      	add	r3, r2
 8007e42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e46:	633b      	str	r3, [r7, #48]	; 0x30
 8007e48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e52:	463b      	mov	r3, r7
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	895b      	ldrh	r3, [r3, #10]
 8007e58:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e5c:	463b      	mov	r3, r7
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	6959      	ldr	r1, [r3, #20]
 8007e62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8007e6c:	1d38      	adds	r0, r7, #4
 8007e6e:	6800      	ldr	r0, [r0, #0]
 8007e70:	f001 f93c 	bl	80090ec <USB_WritePMA>
            ep->xfer_buff += len;
 8007e74:	463b      	mov	r3, r7
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	695a      	ldr	r2, [r3, #20]
 8007e7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e7e:	441a      	add	r2, r3
 8007e80:	463b      	mov	r3, r7
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007e86:	463b      	mov	r3, r7
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6a1a      	ldr	r2, [r3, #32]
 8007e8c:	463b      	mov	r3, r7
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d90e      	bls.n	8007eb4 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8007e96:	463b      	mov	r3, r7
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8007ea0:	463b      	mov	r3, r7
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6a1a      	ldr	r2, [r3, #32]
 8007ea6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007eaa:	1ad2      	subs	r2, r2, r3
 8007eac:	463b      	mov	r3, r7
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	621a      	str	r2, [r3, #32]
 8007eb2:	e008      	b.n	8007ec6 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007eb4:	463b      	mov	r3, r7
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8007ebe:	463b      	mov	r3, r7
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ec6:	463b      	mov	r3, r7
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	785b      	ldrb	r3, [r3, #1]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d164      	bne.n	8007f9a <USB_EPStartXfer+0x398>
 8007ed0:	1d3b      	adds	r3, r7, #4
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	61fb      	str	r3, [r7, #28]
 8007ed6:	1d3b      	adds	r3, r7, #4
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	61fb      	str	r3, [r7, #28]
 8007ee8:	463b      	mov	r3, r7
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	00da      	lsls	r2, r3, #3
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ef8:	61bb      	str	r3, [r7, #24]
 8007efa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d112      	bne.n	8007f28 <USB_EPStartXfer+0x326>
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	881b      	ldrh	r3, [r3, #0]
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	801a      	strh	r2, [r3, #0]
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	801a      	strh	r2, [r3, #0]
 8007f26:	e057      	b.n	8007fd8 <USB_EPStartXfer+0x3d6>
 8007f28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f2c:	2b3e      	cmp	r3, #62	; 0x3e
 8007f2e:	d817      	bhi.n	8007f60 <USB_EPStartXfer+0x35e>
 8007f30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f34:	085b      	lsrs	r3, r3, #1
 8007f36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007f3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d004      	beq.n	8007f50 <USB_EPStartXfer+0x34e>
 8007f46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007f50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	029b      	lsls	r3, r3, #10
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	801a      	strh	r2, [r3, #0]
 8007f5e:	e03b      	b.n	8007fd8 <USB_EPStartXfer+0x3d6>
 8007f60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f64:	095b      	lsrs	r3, r3, #5
 8007f66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007f6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f6e:	f003 031f 	and.w	r3, r3, #31
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d104      	bne.n	8007f80 <USB_EPStartXfer+0x37e>
 8007f76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007f80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	029b      	lsls	r3, r3, #10
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	801a      	strh	r2, [r3, #0]
 8007f98:	e01e      	b.n	8007fd8 <USB_EPStartXfer+0x3d6>
 8007f9a:	463b      	mov	r3, r7
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	785b      	ldrb	r3, [r3, #1]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d119      	bne.n	8007fd8 <USB_EPStartXfer+0x3d6>
 8007fa4:	1d3b      	adds	r3, r7, #4
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8007faa:	1d3b      	adds	r3, r7, #4
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	4413      	add	r3, r2
 8007fba:	627b      	str	r3, [r7, #36]	; 0x24
 8007fbc:	463b      	mov	r3, r7
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	00da      	lsls	r2, r3, #3
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007fcc:	623b      	str	r3, [r7, #32]
 8007fce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007fd8:	463b      	mov	r3, r7
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	891b      	ldrh	r3, [r3, #8]
 8007fde:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fe2:	463b      	mov	r3, r7
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	6959      	ldr	r1, [r3, #20]
 8007fe8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8007ff2:	1d38      	adds	r0, r7, #4
 8007ff4:	6800      	ldr	r0, [r0, #0]
 8007ff6:	f001 f879 	bl	80090ec <USB_WritePMA>
 8007ffa:	e340      	b.n	800867e <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ffc:	463b      	mov	r3, r7
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	785b      	ldrb	r3, [r3, #1]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d164      	bne.n	80080d0 <USB_EPStartXfer+0x4ce>
 8008006:	1d3b      	adds	r3, r7, #4
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800800c:	1d3b      	adds	r3, r7, #4
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008014:	b29b      	uxth	r3, r3
 8008016:	461a      	mov	r2, r3
 8008018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800801a:	4413      	add	r3, r2
 800801c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800801e:	463b      	mov	r3, r7
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	00da      	lsls	r2, r3, #3
 8008026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008028:	4413      	add	r3, r2
 800802a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800802e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008030:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008034:	2b00      	cmp	r3, #0
 8008036:	d112      	bne.n	800805e <USB_EPStartXfer+0x45c>
 8008038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	b29b      	uxth	r3, r3
 800803e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008042:	b29a      	uxth	r2, r3
 8008044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008046:	801a      	strh	r2, [r3, #0]
 8008048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	b29b      	uxth	r3, r3
 800804e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008056:	b29a      	uxth	r2, r3
 8008058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800805a:	801a      	strh	r2, [r3, #0]
 800805c:	e057      	b.n	800810e <USB_EPStartXfer+0x50c>
 800805e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008062:	2b3e      	cmp	r3, #62	; 0x3e
 8008064:	d817      	bhi.n	8008096 <USB_EPStartXfer+0x494>
 8008066:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800806a:	085b      	lsrs	r3, r3, #1
 800806c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008070:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	2b00      	cmp	r3, #0
 800807a:	d004      	beq.n	8008086 <USB_EPStartXfer+0x484>
 800807c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008080:	3301      	adds	r3, #1
 8008082:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800808a:	b29b      	uxth	r3, r3
 800808c:	029b      	lsls	r3, r3, #10
 800808e:	b29a      	uxth	r2, r3
 8008090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008092:	801a      	strh	r2, [r3, #0]
 8008094:	e03b      	b.n	800810e <USB_EPStartXfer+0x50c>
 8008096:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800809a:	095b      	lsrs	r3, r3, #5
 800809c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80080a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80080a4:	f003 031f 	and.w	r3, r3, #31
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d104      	bne.n	80080b6 <USB_EPStartXfer+0x4b4>
 80080ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080b0:	3b01      	subs	r3, #1
 80080b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80080b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	029b      	lsls	r3, r3, #10
 80080be:	b29b      	uxth	r3, r3
 80080c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080cc:	801a      	strh	r2, [r3, #0]
 80080ce:	e01e      	b.n	800810e <USB_EPStartXfer+0x50c>
 80080d0:	463b      	mov	r3, r7
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	785b      	ldrb	r3, [r3, #1]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d119      	bne.n	800810e <USB_EPStartXfer+0x50c>
 80080da:	1d3b      	adds	r3, r7, #4
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	657b      	str	r3, [r7, #84]	; 0x54
 80080e0:	1d3b      	adds	r3, r7, #4
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	461a      	mov	r2, r3
 80080ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ee:	4413      	add	r3, r2
 80080f0:	657b      	str	r3, [r7, #84]	; 0x54
 80080f2:	463b      	mov	r3, r7
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	00da      	lsls	r2, r3, #3
 80080fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080fc:	4413      	add	r3, r2
 80080fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008102:	653b      	str	r3, [r7, #80]	; 0x50
 8008104:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008108:	b29a      	uxth	r2, r3
 800810a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800810c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800810e:	463b      	mov	r3, r7
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	891b      	ldrh	r3, [r3, #8]
 8008114:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008118:	463b      	mov	r3, r7
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	6959      	ldr	r1, [r3, #20]
 800811e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008122:	b29b      	uxth	r3, r3
 8008124:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8008128:	1d38      	adds	r0, r7, #4
 800812a:	6800      	ldr	r0, [r0, #0]
 800812c:	f000 ffde 	bl	80090ec <USB_WritePMA>
            ep->xfer_buff += len;
 8008130:	463b      	mov	r3, r7
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	695a      	ldr	r2, [r3, #20]
 8008136:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800813a:	441a      	add	r2, r3
 800813c:	463b      	mov	r3, r7
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008142:	463b      	mov	r3, r7
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6a1a      	ldr	r2, [r3, #32]
 8008148:	463b      	mov	r3, r7
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	429a      	cmp	r2, r3
 8008150:	d90e      	bls.n	8008170 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8008152:	463b      	mov	r3, r7
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800815c:	463b      	mov	r3, r7
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6a1a      	ldr	r2, [r3, #32]
 8008162:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008166:	1ad2      	subs	r2, r2, r3
 8008168:	463b      	mov	r3, r7
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	621a      	str	r2, [r3, #32]
 800816e:	e008      	b.n	8008182 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8008170:	463b      	mov	r3, r7
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800817a:	463b      	mov	r3, r7
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2200      	movs	r2, #0
 8008180:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008182:	1d3b      	adds	r3, r7, #4
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	647b      	str	r3, [r7, #68]	; 0x44
 8008188:	463b      	mov	r3, r7
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	785b      	ldrb	r3, [r3, #1]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d164      	bne.n	800825c <USB_EPStartXfer+0x65a>
 8008192:	1d3b      	adds	r3, r7, #4
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008198:	1d3b      	adds	r3, r7, #4
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	461a      	mov	r2, r3
 80081a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a6:	4413      	add	r3, r2
 80081a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081aa:	463b      	mov	r3, r7
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	00da      	lsls	r2, r3, #3
 80081b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081b4:	4413      	add	r3, r2
 80081b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80081bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d112      	bne.n	80081ea <USB_EPStartXfer+0x5e8>
 80081c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c6:	881b      	ldrh	r3, [r3, #0]
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d2:	801a      	strh	r2, [r3, #0]
 80081d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d6:	881b      	ldrh	r3, [r3, #0]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e6:	801a      	strh	r2, [r3, #0]
 80081e8:	e054      	b.n	8008294 <USB_EPStartXfer+0x692>
 80081ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081ee:	2b3e      	cmp	r3, #62	; 0x3e
 80081f0:	d817      	bhi.n	8008222 <USB_EPStartXfer+0x620>
 80081f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081f6:	085b      	lsrs	r3, r3, #1
 80081f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80081fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d004      	beq.n	8008212 <USB_EPStartXfer+0x610>
 8008208:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800820c:	3301      	adds	r3, #1
 800820e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008212:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008216:	b29b      	uxth	r3, r3
 8008218:	029b      	lsls	r3, r3, #10
 800821a:	b29a      	uxth	r2, r3
 800821c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821e:	801a      	strh	r2, [r3, #0]
 8008220:	e038      	b.n	8008294 <USB_EPStartXfer+0x692>
 8008222:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008226:	095b      	lsrs	r3, r3, #5
 8008228:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800822c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008230:	f003 031f 	and.w	r3, r3, #31
 8008234:	2b00      	cmp	r3, #0
 8008236:	d104      	bne.n	8008242 <USB_EPStartXfer+0x640>
 8008238:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800823c:	3b01      	subs	r3, #1
 800823e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008242:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008246:	b29b      	uxth	r3, r3
 8008248:	029b      	lsls	r3, r3, #10
 800824a:	b29b      	uxth	r3, r3
 800824c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008254:	b29a      	uxth	r2, r3
 8008256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008258:	801a      	strh	r2, [r3, #0]
 800825a:	e01b      	b.n	8008294 <USB_EPStartXfer+0x692>
 800825c:	463b      	mov	r3, r7
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	785b      	ldrb	r3, [r3, #1]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d116      	bne.n	8008294 <USB_EPStartXfer+0x692>
 8008266:	1d3b      	adds	r3, r7, #4
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800826e:	b29b      	uxth	r3, r3
 8008270:	461a      	mov	r2, r3
 8008272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008274:	4413      	add	r3, r2
 8008276:	647b      	str	r3, [r7, #68]	; 0x44
 8008278:	463b      	mov	r3, r7
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	00da      	lsls	r2, r3, #3
 8008280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008282:	4413      	add	r3, r2
 8008284:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008288:	643b      	str	r3, [r7, #64]	; 0x40
 800828a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800828e:	b29a      	uxth	r2, r3
 8008290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008292:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008294:	463b      	mov	r3, r7
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	895b      	ldrh	r3, [r3, #10]
 800829a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800829e:	463b      	mov	r3, r7
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6959      	ldr	r1, [r3, #20]
 80082a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80082ae:	1d38      	adds	r0, r7, #4
 80082b0:	6800      	ldr	r0, [r0, #0]
 80082b2:	f000 ff1b 	bl	80090ec <USB_WritePMA>
 80082b6:	e1e2      	b.n	800867e <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 80082b8:	463b      	mov	r3, r7
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6a1b      	ldr	r3, [r3, #32]
 80082be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80082c2:	1d3b      	adds	r3, r7, #4
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	463b      	mov	r3, r7
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4413      	add	r3, r2
 80082d0:	881b      	ldrh	r3, [r3, #0]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80082d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082dc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80082e0:	1d3b      	adds	r3, r7, #4
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	463b      	mov	r3, r7
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	441a      	add	r2, r3
 80082ee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80082f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008302:	b29b      	uxth	r3, r3
 8008304:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008306:	1d3b      	adds	r3, r7, #4
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	663b      	str	r3, [r7, #96]	; 0x60
 800830c:	1d3b      	adds	r3, r7, #4
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008314:	b29b      	uxth	r3, r3
 8008316:	461a      	mov	r2, r3
 8008318:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800831a:	4413      	add	r3, r2
 800831c:	663b      	str	r3, [r7, #96]	; 0x60
 800831e:	463b      	mov	r3, r7
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	00da      	lsls	r2, r3, #3
 8008326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008328:	4413      	add	r3, r2
 800832a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800832e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008330:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008334:	b29a      	uxth	r2, r3
 8008336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008338:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800833a:	463b      	mov	r3, r7
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	891b      	ldrh	r3, [r3, #8]
 8008340:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008344:	463b      	mov	r3, r7
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6959      	ldr	r1, [r3, #20]
 800834a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800834e:	b29b      	uxth	r3, r3
 8008350:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8008354:	1d38      	adds	r0, r7, #4
 8008356:	6800      	ldr	r0, [r0, #0]
 8008358:	f000 fec8 	bl	80090ec <USB_WritePMA>
 800835c:	e18f      	b.n	800867e <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800835e:	1d3b      	adds	r3, r7, #4
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	463b      	mov	r3, r7
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	881b      	ldrh	r3, [r3, #0]
 800836e:	b29b      	uxth	r3, r3
 8008370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 808f 	beq.w	8008498 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800837a:	1d3b      	adds	r3, r7, #4
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008380:	463b      	mov	r3, r7
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	785b      	ldrb	r3, [r3, #1]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d164      	bne.n	8008454 <USB_EPStartXfer+0x852>
 800838a:	1d3b      	adds	r3, r7, #4
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	673b      	str	r3, [r7, #112]	; 0x70
 8008390:	1d3b      	adds	r3, r7, #4
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008398:	b29b      	uxth	r3, r3
 800839a:	461a      	mov	r2, r3
 800839c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800839e:	4413      	add	r3, r2
 80083a0:	673b      	str	r3, [r7, #112]	; 0x70
 80083a2:	463b      	mov	r3, r7
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	00da      	lsls	r2, r3, #3
 80083aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083ac:	4413      	add	r3, r2
 80083ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80083b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d112      	bne.n	80083e2 <USB_EPStartXfer+0x7e0>
 80083bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ca:	801a      	strh	r2, [r3, #0]
 80083cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ce:	881b      	ldrh	r3, [r3, #0]
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083da:	b29a      	uxth	r2, r3
 80083dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083de:	801a      	strh	r2, [r3, #0]
 80083e0:	e054      	b.n	800848c <USB_EPStartXfer+0x88a>
 80083e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80083e6:	2b3e      	cmp	r3, #62	; 0x3e
 80083e8:	d817      	bhi.n	800841a <USB_EPStartXfer+0x818>
 80083ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80083ee:	085b      	lsrs	r3, r3, #1
 80083f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80083f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d004      	beq.n	800840a <USB_EPStartXfer+0x808>
 8008400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008404:	3301      	adds	r3, #1
 8008406:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800840a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800840e:	b29b      	uxth	r3, r3
 8008410:	029b      	lsls	r3, r3, #10
 8008412:	b29a      	uxth	r2, r3
 8008414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008416:	801a      	strh	r2, [r3, #0]
 8008418:	e038      	b.n	800848c <USB_EPStartXfer+0x88a>
 800841a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800841e:	095b      	lsrs	r3, r3, #5
 8008420:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008424:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008428:	f003 031f 	and.w	r3, r3, #31
 800842c:	2b00      	cmp	r3, #0
 800842e:	d104      	bne.n	800843a <USB_EPStartXfer+0x838>
 8008430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008434:	3b01      	subs	r3, #1
 8008436:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800843a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800843e:	b29b      	uxth	r3, r3
 8008440:	029b      	lsls	r3, r3, #10
 8008442:	b29b      	uxth	r3, r3
 8008444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800844c:	b29a      	uxth	r2, r3
 800844e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008450:	801a      	strh	r2, [r3, #0]
 8008452:	e01b      	b.n	800848c <USB_EPStartXfer+0x88a>
 8008454:	463b      	mov	r3, r7
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	785b      	ldrb	r3, [r3, #1]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d116      	bne.n	800848c <USB_EPStartXfer+0x88a>
 800845e:	1d3b      	adds	r3, r7, #4
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008466:	b29b      	uxth	r3, r3
 8008468:	461a      	mov	r2, r3
 800846a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800846c:	4413      	add	r3, r2
 800846e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008470:	463b      	mov	r3, r7
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	00da      	lsls	r2, r3, #3
 8008478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800847a:	4413      	add	r3, r2
 800847c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008480:	677b      	str	r3, [r7, #116]	; 0x74
 8008482:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008486:	b29a      	uxth	r2, r3
 8008488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800848a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800848c:	463b      	mov	r3, r7
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	895b      	ldrh	r3, [r3, #10]
 8008492:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8008496:	e097      	b.n	80085c8 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008498:	463b      	mov	r3, r7
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	785b      	ldrb	r3, [r3, #1]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d168      	bne.n	8008574 <USB_EPStartXfer+0x972>
 80084a2:	1d3b      	adds	r3, r7, #4
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80084aa:	1d3b      	adds	r3, r7, #4
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	461a      	mov	r2, r3
 80084b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80084ba:	4413      	add	r3, r2
 80084bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80084c0:	463b      	mov	r3, r7
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	00da      	lsls	r2, r3, #3
 80084c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80084cc:	4413      	add	r3, r2
 80084ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80084d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80084d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d112      	bne.n	8008502 <USB_EPStartXfer+0x900>
 80084dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084de:	881b      	ldrh	r3, [r3, #0]
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084ea:	801a      	strh	r2, [r3, #0]
 80084ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084ee:	881b      	ldrh	r3, [r3, #0]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084fe:	801a      	strh	r2, [r3, #0]
 8008500:	e05d      	b.n	80085be <USB_EPStartXfer+0x9bc>
 8008502:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008506:	2b3e      	cmp	r3, #62	; 0x3e
 8008508:	d817      	bhi.n	800853a <USB_EPStartXfer+0x938>
 800850a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800850e:	085b      	lsrs	r3, r3, #1
 8008510:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008514:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	2b00      	cmp	r3, #0
 800851e:	d004      	beq.n	800852a <USB_EPStartXfer+0x928>
 8008520:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008524:	3301      	adds	r3, #1
 8008526:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800852a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800852e:	b29b      	uxth	r3, r3
 8008530:	029b      	lsls	r3, r3, #10
 8008532:	b29a      	uxth	r2, r3
 8008534:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008536:	801a      	strh	r2, [r3, #0]
 8008538:	e041      	b.n	80085be <USB_EPStartXfer+0x9bc>
 800853a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800853e:	095b      	lsrs	r3, r3, #5
 8008540:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008544:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008548:	f003 031f 	and.w	r3, r3, #31
 800854c:	2b00      	cmp	r3, #0
 800854e:	d104      	bne.n	800855a <USB_EPStartXfer+0x958>
 8008550:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008554:	3b01      	subs	r3, #1
 8008556:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800855a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800855e:	b29b      	uxth	r3, r3
 8008560:	029b      	lsls	r3, r3, #10
 8008562:	b29b      	uxth	r3, r3
 8008564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800856c:	b29a      	uxth	r2, r3
 800856e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008570:	801a      	strh	r2, [r3, #0]
 8008572:	e024      	b.n	80085be <USB_EPStartXfer+0x9bc>
 8008574:	463b      	mov	r3, r7
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	785b      	ldrb	r3, [r3, #1]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d11f      	bne.n	80085be <USB_EPStartXfer+0x9bc>
 800857e:	1d3b      	adds	r3, r7, #4
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008586:	1d3b      	adds	r3, r7, #4
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800858e:	b29b      	uxth	r3, r3
 8008590:	461a      	mov	r2, r3
 8008592:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008596:	4413      	add	r3, r2
 8008598:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800859c:	463b      	mov	r3, r7
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	00da      	lsls	r2, r3, #3
 80085a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085a8:	4413      	add	r3, r2
 80085aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80085ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80085be:	463b      	mov	r3, r7
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	891b      	ldrh	r3, [r3, #8]
 80085c4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085c8:	463b      	mov	r3, r7
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6959      	ldr	r1, [r3, #20]
 80085ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80085d8:	1d38      	adds	r0, r7, #4
 80085da:	6800      	ldr	r0, [r0, #0]
 80085dc:	f000 fd86 	bl	80090ec <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80085e0:	463b      	mov	r3, r7
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	785b      	ldrb	r3, [r3, #1]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d122      	bne.n	8008630 <USB_EPStartXfer+0xa2e>
 80085ea:	1d3b      	adds	r3, r7, #4
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	463b      	mov	r3, r7
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008604:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8008608:	1d3b      	adds	r3, r7, #4
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	463b      	mov	r3, r7
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	441a      	add	r2, r3
 8008616:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800861a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800861e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008626:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800862a:	b29b      	uxth	r3, r3
 800862c:	8013      	strh	r3, [r2, #0]
 800862e:	e026      	b.n	800867e <USB_EPStartXfer+0xa7c>
 8008630:	463b      	mov	r3, r7
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	785b      	ldrb	r3, [r3, #1]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d121      	bne.n	800867e <USB_EPStartXfer+0xa7c>
 800863a:	1d3b      	adds	r3, r7, #4
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	463b      	mov	r3, r7
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	881b      	ldrh	r3, [r3, #0]
 800864a:	b29b      	uxth	r3, r3
 800864c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008654:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8008658:	1d3b      	adds	r3, r7, #4
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	463b      	mov	r3, r7
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	441a      	add	r2, r3
 8008666:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800866a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800866e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800867a:	b29b      	uxth	r3, r3
 800867c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800867e:	1d3b      	adds	r3, r7, #4
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	463b      	mov	r3, r7
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	b29b      	uxth	r3, r3
 8008690:	f107 020e 	add.w	r2, r7, #14
 8008694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800869c:	8013      	strh	r3, [r2, #0]
 800869e:	f107 030e 	add.w	r3, r7, #14
 80086a2:	f107 020e 	add.w	r2, r7, #14
 80086a6:	8812      	ldrh	r2, [r2, #0]
 80086a8:	f082 0210 	eor.w	r2, r2, #16
 80086ac:	801a      	strh	r2, [r3, #0]
 80086ae:	f107 030e 	add.w	r3, r7, #14
 80086b2:	f107 020e 	add.w	r2, r7, #14
 80086b6:	8812      	ldrh	r2, [r2, #0]
 80086b8:	f082 0220 	eor.w	r2, r2, #32
 80086bc:	801a      	strh	r2, [r3, #0]
 80086be:	1d3b      	adds	r3, r7, #4
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	463b      	mov	r3, r7
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	441a      	add	r2, r3
 80086cc:	f107 030e 	add.w	r3, r7, #14
 80086d0:	881b      	ldrh	r3, [r3, #0]
 80086d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	8013      	strh	r3, [r2, #0]
 80086e6:	e3b5      	b.n	8008e54 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80086e8:	463b      	mov	r3, r7
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	7b1b      	ldrb	r3, [r3, #12]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f040 8090 	bne.w	8008814 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 80086f4:	463b      	mov	r3, r7
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	699a      	ldr	r2, [r3, #24]
 80086fa:	463b      	mov	r3, r7
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	429a      	cmp	r2, r3
 8008702:	d90e      	bls.n	8008722 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8008704:	463b      	mov	r3, r7
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800870e:	463b      	mov	r3, r7
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	699a      	ldr	r2, [r3, #24]
 8008714:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008718:	1ad2      	subs	r2, r2, r3
 800871a:	463b      	mov	r3, r7
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	619a      	str	r2, [r3, #24]
 8008720:	e008      	b.n	8008734 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8008722:	463b      	mov	r3, r7
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	699b      	ldr	r3, [r3, #24]
 8008728:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800872c:	463b      	mov	r3, r7
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2200      	movs	r2, #0
 8008732:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008734:	1d3b      	adds	r3, r7, #4
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800873c:	1d3b      	adds	r3, r7, #4
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008744:	b29b      	uxth	r3, r3
 8008746:	461a      	mov	r2, r3
 8008748:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800874c:	4413      	add	r3, r2
 800874e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008752:	463b      	mov	r3, r7
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	00da      	lsls	r2, r3, #3
 800875a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800875e:	4413      	add	r3, r2
 8008760:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008764:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008768:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800876c:	2b00      	cmp	r3, #0
 800876e:	d116      	bne.n	800879e <USB_EPStartXfer+0xb9c>
 8008770:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	b29b      	uxth	r3, r3
 8008778:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800877c:	b29a      	uxth	r2, r3
 800877e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008782:	801a      	strh	r2, [r3, #0]
 8008784:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	b29b      	uxth	r3, r3
 800878c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008794:	b29a      	uxth	r2, r3
 8008796:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800879a:	801a      	strh	r2, [r3, #0]
 800879c:	e32c      	b.n	8008df8 <USB_EPStartXfer+0x11f6>
 800879e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80087a2:	2b3e      	cmp	r3, #62	; 0x3e
 80087a4:	d818      	bhi.n	80087d8 <USB_EPStartXfer+0xbd6>
 80087a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80087aa:	085b      	lsrs	r3, r3, #1
 80087ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80087b4:	f003 0301 	and.w	r3, r3, #1
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d004      	beq.n	80087c6 <USB_EPStartXfer+0xbc4>
 80087bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087c0:	3301      	adds	r3, #1
 80087c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	029b      	lsls	r3, r3, #10
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087d4:	801a      	strh	r2, [r3, #0]
 80087d6:	e30f      	b.n	8008df8 <USB_EPStartXfer+0x11f6>
 80087d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80087dc:	095b      	lsrs	r3, r3, #5
 80087de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80087e6:	f003 031f 	and.w	r3, r3, #31
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d104      	bne.n	80087f8 <USB_EPStartXfer+0xbf6>
 80087ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087f2:	3b01      	subs	r3, #1
 80087f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	029b      	lsls	r3, r3, #10
 8008800:	b29b      	uxth	r3, r3
 8008802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800880a:	b29a      	uxth	r2, r3
 800880c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008810:	801a      	strh	r2, [r3, #0]
 8008812:	e2f1      	b.n	8008df8 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8008814:	463b      	mov	r3, r7
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	78db      	ldrb	r3, [r3, #3]
 800881a:	2b02      	cmp	r3, #2
 800881c:	f040 818f 	bne.w	8008b3e <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008820:	463b      	mov	r3, r7
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	785b      	ldrb	r3, [r3, #1]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d175      	bne.n	8008916 <USB_EPStartXfer+0xd14>
 800882a:	1d3b      	adds	r3, r7, #4
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008832:	1d3b      	adds	r3, r7, #4
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800883a:	b29b      	uxth	r3, r3
 800883c:	461a      	mov	r2, r3
 800883e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008842:	4413      	add	r3, r2
 8008844:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008848:	463b      	mov	r3, r7
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	00da      	lsls	r2, r3, #3
 8008850:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008854:	4413      	add	r3, r2
 8008856:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800885a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800885e:	463b      	mov	r3, r7
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d116      	bne.n	8008896 <USB_EPStartXfer+0xc94>
 8008868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800886c:	881b      	ldrh	r3, [r3, #0]
 800886e:	b29b      	uxth	r3, r3
 8008870:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008874:	b29a      	uxth	r2, r3
 8008876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800887a:	801a      	strh	r2, [r3, #0]
 800887c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008880:	881b      	ldrh	r3, [r3, #0]
 8008882:	b29b      	uxth	r3, r3
 8008884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800888c:	b29a      	uxth	r2, r3
 800888e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008892:	801a      	strh	r2, [r3, #0]
 8008894:	e065      	b.n	8008962 <USB_EPStartXfer+0xd60>
 8008896:	463b      	mov	r3, r7
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	2b3e      	cmp	r3, #62	; 0x3e
 800889e:	d81a      	bhi.n	80088d6 <USB_EPStartXfer+0xcd4>
 80088a0:	463b      	mov	r3, r7
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	085b      	lsrs	r3, r3, #1
 80088a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80088ac:	463b      	mov	r3, r7
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	f003 0301 	and.w	r3, r3, #1
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d004      	beq.n	80088c4 <USB_EPStartXfer+0xcc2>
 80088ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088be:	3301      	adds	r3, #1
 80088c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80088c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	029b      	lsls	r3, r3, #10
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088d2:	801a      	strh	r2, [r3, #0]
 80088d4:	e045      	b.n	8008962 <USB_EPStartXfer+0xd60>
 80088d6:	463b      	mov	r3, r7
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	095b      	lsrs	r3, r3, #5
 80088de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80088e2:	463b      	mov	r3, r7
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	f003 031f 	and.w	r3, r3, #31
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d104      	bne.n	80088fa <USB_EPStartXfer+0xcf8>
 80088f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088f4:	3b01      	subs	r3, #1
 80088f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80088fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088fe:	b29b      	uxth	r3, r3
 8008900:	029b      	lsls	r3, r3, #10
 8008902:	b29b      	uxth	r3, r3
 8008904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800890c:	b29a      	uxth	r2, r3
 800890e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008912:	801a      	strh	r2, [r3, #0]
 8008914:	e025      	b.n	8008962 <USB_EPStartXfer+0xd60>
 8008916:	463b      	mov	r3, r7
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	785b      	ldrb	r3, [r3, #1]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d120      	bne.n	8008962 <USB_EPStartXfer+0xd60>
 8008920:	1d3b      	adds	r3, r7, #4
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008928:	1d3b      	adds	r3, r7, #4
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008930:	b29b      	uxth	r3, r3
 8008932:	461a      	mov	r2, r3
 8008934:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008938:	4413      	add	r3, r2
 800893a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800893e:	463b      	mov	r3, r7
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	00da      	lsls	r2, r3, #3
 8008946:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800894a:	4413      	add	r3, r2
 800894c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008954:	463b      	mov	r3, r7
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	b29a      	uxth	r2, r3
 800895c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008960:	801a      	strh	r2, [r3, #0]
 8008962:	1d3b      	adds	r3, r7, #4
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800896a:	463b      	mov	r3, r7
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	785b      	ldrb	r3, [r3, #1]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d175      	bne.n	8008a60 <USB_EPStartXfer+0xe5e>
 8008974:	1d3b      	adds	r3, r7, #4
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800897c:	1d3b      	adds	r3, r7, #4
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008984:	b29b      	uxth	r3, r3
 8008986:	461a      	mov	r2, r3
 8008988:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800898c:	4413      	add	r3, r2
 800898e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008992:	463b      	mov	r3, r7
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	00da      	lsls	r2, r3, #3
 800899a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800899e:	4413      	add	r3, r2
 80089a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80089a8:	463b      	mov	r3, r7
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d116      	bne.n	80089e0 <USB_EPStartXfer+0xdde>
 80089b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089b6:	881b      	ldrh	r3, [r3, #0]
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80089be:	b29a      	uxth	r2, r3
 80089c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089c4:	801a      	strh	r2, [r3, #0]
 80089c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089dc:	801a      	strh	r2, [r3, #0]
 80089de:	e061      	b.n	8008aa4 <USB_EPStartXfer+0xea2>
 80089e0:	463b      	mov	r3, r7
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	2b3e      	cmp	r3, #62	; 0x3e
 80089e8:	d81a      	bhi.n	8008a20 <USB_EPStartXfer+0xe1e>
 80089ea:	463b      	mov	r3, r7
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	085b      	lsrs	r3, r3, #1
 80089f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80089f6:	463b      	mov	r3, r7
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	f003 0301 	and.w	r3, r3, #1
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d004      	beq.n	8008a0e <USB_EPStartXfer+0xe0c>
 8008a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a08:	3301      	adds	r3, #1
 8008a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	029b      	lsls	r3, r3, #10
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a1c:	801a      	strh	r2, [r3, #0]
 8008a1e:	e041      	b.n	8008aa4 <USB_EPStartXfer+0xea2>
 8008a20:	463b      	mov	r3, r7
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	095b      	lsrs	r3, r3, #5
 8008a28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a2c:	463b      	mov	r3, r7
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	f003 031f 	and.w	r3, r3, #31
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d104      	bne.n	8008a44 <USB_EPStartXfer+0xe42>
 8008a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	029b      	lsls	r3, r3, #10
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a5c:	801a      	strh	r2, [r3, #0]
 8008a5e:	e021      	b.n	8008aa4 <USB_EPStartXfer+0xea2>
 8008a60:	463b      	mov	r3, r7
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	785b      	ldrb	r3, [r3, #1]
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d11c      	bne.n	8008aa4 <USB_EPStartXfer+0xea2>
 8008a6a:	1d3b      	adds	r3, r7, #4
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	461a      	mov	r2, r3
 8008a76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008a80:	463b      	mov	r3, r7
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	00da      	lsls	r2, r3, #3
 8008a88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008a96:	463b      	mov	r3, r7
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008aa2:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8008aa4:	463b      	mov	r3, r7
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f000 81a4 	beq.w	8008df8 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008ab0:	1d3b      	adds	r3, r7, #4
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	463b      	mov	r3, r7
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	881b      	ldrh	r3, [r3, #0]
 8008ac0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008ac4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d005      	beq.n	8008adc <USB_EPStartXfer+0xeda>
 8008ad0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10d      	bne.n	8008af8 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008adc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f040 8187 	bne.w	8008df8 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008aea:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f040 8180 	bne.w	8008df8 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008af8:	1d3b      	adds	r3, r7, #4
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	463b      	mov	r3, r7
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	881b      	ldrh	r3, [r3, #0]
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b12:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8008b16:	1d3b      	adds	r3, r7, #4
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	463b      	mov	r3, r7
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	441a      	add	r2, r3
 8008b24:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8008b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	8013      	strh	r3, [r2, #0]
 8008b3c:	e15c      	b.n	8008df8 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008b3e:	463b      	mov	r3, r7
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	78db      	ldrb	r3, [r3, #3]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	f040 8155 	bne.w	8008df4 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8008b4a:	463b      	mov	r3, r7
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	699a      	ldr	r2, [r3, #24]
 8008b50:	463b      	mov	r3, r7
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d90e      	bls.n	8008b78 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8008b5a:	463b      	mov	r3, r7
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8008b64:	463b      	mov	r3, r7
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	699a      	ldr	r2, [r3, #24]
 8008b6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b6e:	1ad2      	subs	r2, r2, r3
 8008b70:	463b      	mov	r3, r7
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	619a      	str	r2, [r3, #24]
 8008b76:	e008      	b.n	8008b8a <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8008b78:	463b      	mov	r3, r7
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8008b82:	463b      	mov	r3, r7
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2200      	movs	r2, #0
 8008b88:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008b8a:	463b      	mov	r3, r7
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	785b      	ldrb	r3, [r3, #1]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d16f      	bne.n	8008c74 <USB_EPStartXfer+0x1072>
 8008b94:	1d3b      	adds	r3, r7, #4
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b9c:	1d3b      	adds	r3, r7, #4
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008bac:	4413      	add	r3, r2
 8008bae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bb2:	463b      	mov	r3, r7
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	00da      	lsls	r2, r3, #3
 8008bba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008bc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008bc8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d116      	bne.n	8008bfe <USB_EPStartXfer+0xffc>
 8008bd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008bd4:	881b      	ldrh	r3, [r3, #0]
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008be2:	801a      	strh	r2, [r3, #0]
 8008be4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008be8:	881b      	ldrh	r3, [r3, #0]
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008bfa:	801a      	strh	r2, [r3, #0]
 8008bfc:	e05f      	b.n	8008cbe <USB_EPStartXfer+0x10bc>
 8008bfe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c02:	2b3e      	cmp	r3, #62	; 0x3e
 8008c04:	d818      	bhi.n	8008c38 <USB_EPStartXfer+0x1036>
 8008c06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c0a:	085b      	lsrs	r3, r3, #1
 8008c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c14:	f003 0301 	and.w	r3, r3, #1
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d004      	beq.n	8008c26 <USB_EPStartXfer+0x1024>
 8008c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c20:	3301      	adds	r3, #1
 8008c22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	029b      	lsls	r3, r3, #10
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c34:	801a      	strh	r2, [r3, #0]
 8008c36:	e042      	b.n	8008cbe <USB_EPStartXfer+0x10bc>
 8008c38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c3c:	095b      	lsrs	r3, r3, #5
 8008c3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c46:	f003 031f 	and.w	r3, r3, #31
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d104      	bne.n	8008c58 <USB_EPStartXfer+0x1056>
 8008c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c52:	3b01      	subs	r3, #1
 8008c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	029b      	lsls	r3, r3, #10
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c70:	801a      	strh	r2, [r3, #0]
 8008c72:	e024      	b.n	8008cbe <USB_EPStartXfer+0x10bc>
 8008c74:	463b      	mov	r3, r7
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	785b      	ldrb	r3, [r3, #1]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d11f      	bne.n	8008cbe <USB_EPStartXfer+0x10bc>
 8008c7e:	1d3b      	adds	r3, r7, #4
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c86:	1d3b      	adds	r3, r7, #4
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	461a      	mov	r2, r3
 8008c92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c96:	4413      	add	r3, r2
 8008c98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c9c:	463b      	mov	r3, r7
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	00da      	lsls	r2, r3, #3
 8008ca4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ca8:	4413      	add	r3, r2
 8008caa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008cae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008cb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008cbc:	801a      	strh	r2, [r3, #0]
 8008cbe:	1d3b      	adds	r3, r7, #4
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cc6:	463b      	mov	r3, r7
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	785b      	ldrb	r3, [r3, #1]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d16f      	bne.n	8008db0 <USB_EPStartXfer+0x11ae>
 8008cd0:	1d3b      	adds	r3, r7, #4
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008cd8:	1d3b      	adds	r3, r7, #4
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008ce8:	4413      	add	r3, r2
 8008cea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008cee:	463b      	mov	r3, r7
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	00da      	lsls	r2, r3, #3
 8008cf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008cfa:	4413      	add	r3, r2
 8008cfc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008d04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d116      	bne.n	8008d3a <USB_EPStartXfer+0x1138>
 8008d0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008d10:	881b      	ldrh	r3, [r3, #0]
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008d1e:	801a      	strh	r2, [r3, #0]
 8008d20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008d24:	881b      	ldrh	r3, [r3, #0]
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d30:	b29a      	uxth	r2, r3
 8008d32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008d36:	801a      	strh	r2, [r3, #0]
 8008d38:	e05e      	b.n	8008df8 <USB_EPStartXfer+0x11f6>
 8008d3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d3e:	2b3e      	cmp	r3, #62	; 0x3e
 8008d40:	d818      	bhi.n	8008d74 <USB_EPStartXfer+0x1172>
 8008d42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d46:	085b      	lsrs	r3, r3, #1
 8008d48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008d4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d004      	beq.n	8008d62 <USB_EPStartXfer+0x1160>
 8008d58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	029b      	lsls	r3, r3, #10
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008d70:	801a      	strh	r2, [r3, #0]
 8008d72:	e041      	b.n	8008df8 <USB_EPStartXfer+0x11f6>
 8008d74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d78:	095b      	lsrs	r3, r3, #5
 8008d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008d7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d82:	f003 031f 	and.w	r3, r3, #31
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d104      	bne.n	8008d94 <USB_EPStartXfer+0x1192>
 8008d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008d94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	029b      	lsls	r3, r3, #10
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008dac:	801a      	strh	r2, [r3, #0]
 8008dae:	e023      	b.n	8008df8 <USB_EPStartXfer+0x11f6>
 8008db0:	463b      	mov	r3, r7
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	785b      	ldrb	r3, [r3, #1]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d11e      	bne.n	8008df8 <USB_EPStartXfer+0x11f6>
 8008dba:	1d3b      	adds	r3, r7, #4
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008dca:	4413      	add	r3, r2
 8008dcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008dd0:	463b      	mov	r3, r7
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	00da      	lsls	r2, r3, #3
 8008dd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ddc:	4413      	add	r3, r2
 8008dde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008de2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008de6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008df0:	801a      	strh	r2, [r3, #0]
 8008df2:	e001      	b.n	8008df8 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e02e      	b.n	8008e56 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008df8:	1d3b      	adds	r3, r7, #4
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	463b      	mov	r3, r7
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4413      	add	r3, r2
 8008e06:	881b      	ldrh	r3, [r3, #0]
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e12:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008e16:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008e1a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e1e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008e22:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008e26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008e2a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008e2e:	1d3b      	adds	r3, r7, #4
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	463b      	mov	r3, r7
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	441a      	add	r2, r3
 8008e3c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	785b      	ldrb	r3, [r3, #1]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d020      	beq.n	8008eb4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4413      	add	r3, r2
 8008e7c:	881b      	ldrh	r3, [r3, #0]
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e88:	81bb      	strh	r3, [r7, #12]
 8008e8a:	89bb      	ldrh	r3, [r7, #12]
 8008e8c:	f083 0310 	eor.w	r3, r3, #16
 8008e90:	81bb      	strh	r3, [r7, #12]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	441a      	add	r2, r3
 8008e9c:	89bb      	ldrh	r3, [r7, #12]
 8008e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	8013      	strh	r3, [r2, #0]
 8008eb2:	e01f      	b.n	8008ef4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4413      	add	r3, r2
 8008ebe:	881b      	ldrh	r3, [r3, #0]
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eca:	81fb      	strh	r3, [r7, #14]
 8008ecc:	89fb      	ldrh	r3, [r7, #14]
 8008ece:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ed2:	81fb      	strh	r3, [r7, #14]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	441a      	add	r2, r3
 8008ede:	89fb      	ldrh	r3, [r7, #14]
 8008ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3714      	adds	r7, #20
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr

08008f02 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f02:	b480      	push	{r7}
 8008f04:	b087      	sub	sp, #28
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
 8008f0a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	7b1b      	ldrb	r3, [r3, #12]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f040 809d 	bne.w	8009050 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	785b      	ldrb	r3, [r3, #1]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d04c      	beq.n	8008fb8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4413      	add	r3, r2
 8008f28:	881b      	ldrh	r3, [r3, #0]
 8008f2a:	823b      	strh	r3, [r7, #16]
 8008f2c:	8a3b      	ldrh	r3, [r7, #16]
 8008f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d01b      	beq.n	8008f6e <USB_EPClearStall+0x6c>
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4413      	add	r3, r2
 8008f40:	881b      	ldrh	r3, [r3, #0]
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f4c:	81fb      	strh	r3, [r7, #14]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	441a      	add	r2, r3
 8008f58:	89fb      	ldrh	r3, [r7, #14]
 8008f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	78db      	ldrb	r3, [r3, #3]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d06c      	beq.n	8009050 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4413      	add	r3, r2
 8008f80:	881b      	ldrh	r3, [r3, #0]
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f8c:	81bb      	strh	r3, [r7, #12]
 8008f8e:	89bb      	ldrh	r3, [r7, #12]
 8008f90:	f083 0320 	eor.w	r3, r3, #32
 8008f94:	81bb      	strh	r3, [r7, #12]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	441a      	add	r2, r3
 8008fa0:	89bb      	ldrh	r3, [r7, #12]
 8008fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	8013      	strh	r3, [r2, #0]
 8008fb6:	e04b      	b.n	8009050 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4413      	add	r3, r2
 8008fc2:	881b      	ldrh	r3, [r3, #0]
 8008fc4:	82fb      	strh	r3, [r7, #22]
 8008fc6:	8afb      	ldrh	r3, [r7, #22]
 8008fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d01b      	beq.n	8009008 <USB_EPClearStall+0x106>
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4413      	add	r3, r2
 8008fda:	881b      	ldrh	r3, [r3, #0]
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fe6:	82bb      	strh	r3, [r7, #20]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	441a      	add	r2, r3
 8008ff2:	8abb      	ldrh	r3, [r7, #20]
 8008ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ffc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009004:	b29b      	uxth	r3, r3
 8009006:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	4413      	add	r3, r2
 8009012:	881b      	ldrh	r3, [r3, #0]
 8009014:	b29b      	uxth	r3, r3
 8009016:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800901a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800901e:	827b      	strh	r3, [r7, #18]
 8009020:	8a7b      	ldrh	r3, [r7, #18]
 8009022:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009026:	827b      	strh	r3, [r7, #18]
 8009028:	8a7b      	ldrh	r3, [r7, #18]
 800902a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800902e:	827b      	strh	r3, [r7, #18]
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	441a      	add	r2, r3
 800903a:	8a7b      	ldrh	r3, [r7, #18]
 800903c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800904c:	b29b      	uxth	r3, r3
 800904e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	371c      	adds	r7, #28
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800905e:	b480      	push	{r7}
 8009060:	b083      	sub	sp, #12
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	460b      	mov	r3, r1
 8009068:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800906a:	78fb      	ldrb	r3, [r7, #3]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d103      	bne.n	8009078 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2280      	movs	r2, #128	; 0x80
 8009074:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	370c      	adds	r7, #12
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009086:	b480      	push	{r7}
 8009088:	b083      	sub	sp, #12
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009094:	b29b      	uxth	r3, r3
 8009096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800909a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800909e:	b29a      	uxth	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80090c6:	68fb      	ldr	r3, [r7, #12]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b08d      	sub	sp, #52	; 0x34
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	4611      	mov	r1, r2
 80090f8:	461a      	mov	r2, r3
 80090fa:	460b      	mov	r3, r1
 80090fc:	80fb      	strh	r3, [r7, #6]
 80090fe:	4613      	mov	r3, r2
 8009100:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009102:	88bb      	ldrh	r3, [r7, #4]
 8009104:	3301      	adds	r3, #1
 8009106:	085b      	lsrs	r3, r3, #1
 8009108:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009112:	88fa      	ldrh	r2, [r7, #6]
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	4413      	add	r3, r2
 8009118:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800911c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800911e:	6a3b      	ldr	r3, [r7, #32]
 8009120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009122:	e01b      	b.n	800915c <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800912a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912c:	3301      	adds	r3, #1
 800912e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	b29b      	uxth	r3, r3
 8009136:	021b      	lsls	r3, r3, #8
 8009138:	b29b      	uxth	r3, r3
 800913a:	461a      	mov	r2, r3
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	4313      	orrs	r3, r2
 8009140:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	b29a      	uxth	r2, r3
 8009146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009148:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914c:	3302      	adds	r3, #2
 800914e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8009150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009152:	3301      	adds	r3, #1
 8009154:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009158:	3b01      	subs	r3, #1
 800915a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800915c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1e0      	bne.n	8009124 <USB_WritePMA+0x38>
  }
}
 8009162:	bf00      	nop
 8009164:	3734      	adds	r7, #52	; 0x34
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800916e:	b480      	push	{r7}
 8009170:	b08b      	sub	sp, #44	; 0x2c
 8009172:	af00      	add	r7, sp, #0
 8009174:	60f8      	str	r0, [r7, #12]
 8009176:	60b9      	str	r1, [r7, #8]
 8009178:	4611      	mov	r1, r2
 800917a:	461a      	mov	r2, r3
 800917c:	460b      	mov	r3, r1
 800917e:	80fb      	strh	r3, [r7, #6]
 8009180:	4613      	mov	r3, r2
 8009182:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009184:	88bb      	ldrh	r3, [r7, #4]
 8009186:	085b      	lsrs	r3, r3, #1
 8009188:	b29b      	uxth	r3, r3
 800918a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009194:	88fa      	ldrh	r2, [r7, #6]
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	4413      	add	r3, r2
 800919a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800919e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	627b      	str	r3, [r7, #36]	; 0x24
 80091a4:	e018      	b.n	80091d8 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80091a6:	6a3b      	ldr	r3, [r7, #32]
 80091a8:	881b      	ldrh	r3, [r3, #0]
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80091ae:	6a3b      	ldr	r3, [r7, #32]
 80091b0:	3302      	adds	r3, #2
 80091b2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	3301      	adds	r3, #1
 80091c0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	0a1b      	lsrs	r3, r3, #8
 80091c6:	b2da      	uxtb	r2, r3
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	3301      	adds	r3, #1
 80091d0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80091d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d4:	3b01      	subs	r3, #1
 80091d6:	627b      	str	r3, [r7, #36]	; 0x24
 80091d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1e3      	bne.n	80091a6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80091de:	88bb      	ldrh	r3, [r7, #4]
 80091e0:	f003 0301 	and.w	r3, r3, #1
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d007      	beq.n	80091fa <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80091ea:	6a3b      	ldr	r3, [r7, #32]
 80091ec:	881b      	ldrh	r3, [r3, #0]
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	b2da      	uxtb	r2, r3
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	701a      	strb	r2, [r3, #0]
  }
}
 80091fa:	bf00      	nop
 80091fc:	372c      	adds	r7, #44	; 0x2c
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr

08009206 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b084      	sub	sp, #16
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
 800920e:	460b      	mov	r3, r1
 8009210:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009212:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009216:	f002 f847 	bl	800b2a8 <USBD_static_malloc>
 800921a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d105      	bne.n	800922e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800922a:	2302      	movs	r3, #2
 800922c:	e066      	b.n	80092fc <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	7c1b      	ldrb	r3, [r3, #16]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d119      	bne.n	8009272 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800923e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009242:	2202      	movs	r2, #2
 8009244:	2181      	movs	r1, #129	; 0x81
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f001 fed3 	bl	800aff2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009252:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009256:	2202      	movs	r2, #2
 8009258:	2101      	movs	r1, #1
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f001 fec9 	bl	800aff2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2210      	movs	r2, #16
 800926c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009270:	e016      	b.n	80092a0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009272:	2340      	movs	r3, #64	; 0x40
 8009274:	2202      	movs	r2, #2
 8009276:	2181      	movs	r1, #129	; 0x81
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f001 feba 	bl	800aff2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2201      	movs	r2, #1
 8009282:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009284:	2340      	movs	r3, #64	; 0x40
 8009286:	2202      	movs	r2, #2
 8009288:	2101      	movs	r1, #1
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f001 feb1 	bl	800aff2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2210      	movs	r2, #16
 800929c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80092a0:	2308      	movs	r3, #8
 80092a2:	2203      	movs	r2, #3
 80092a4:	2182      	movs	r1, #130	; 0x82
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f001 fea3 	bl	800aff2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	7c1b      	ldrb	r3, [r3, #16]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d109      	bne.n	80092ea <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80092dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092e0:	2101      	movs	r1, #1
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f001 ff75 	bl	800b1d2 <USBD_LL_PrepareReceive>
 80092e8:	e007      	b.n	80092fa <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80092f0:	2340      	movs	r3, #64	; 0x40
 80092f2:	2101      	movs	r1, #1
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f001 ff6c 	bl	800b1d2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	460b      	mov	r3, r1
 800930e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009310:	2181      	movs	r1, #129	; 0x81
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f001 fe93 	bl	800b03e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800931e:	2101      	movs	r1, #1
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f001 fe8c 	bl	800b03e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800932e:	2182      	movs	r1, #130	; 0x82
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f001 fe84 	bl	800b03e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00e      	beq.n	800936e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009360:	4618      	mov	r0, r3
 8009362:	f001 ffaf 	bl	800b2c4 <USBD_static_free>
    pdev->pClassData = NULL;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009388:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800938a:	2300      	movs	r3, #0
 800938c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800938e:	2300      	movs	r3, #0
 8009390:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d03a      	beq.n	8009418 <USBD_CDC_Setup+0xa0>
 80093a2:	2b20      	cmp	r3, #32
 80093a4:	f040 8097 	bne.w	80094d6 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	88db      	ldrh	r3, [r3, #6]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d029      	beq.n	8009404 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	b25b      	sxtb	r3, r3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	da11      	bge.n	80093de <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80093c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	88d2      	ldrh	r2, [r2, #6]
 80093cc:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80093ce:	6939      	ldr	r1, [r7, #16]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	88db      	ldrh	r3, [r3, #6]
 80093d4:	461a      	mov	r2, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 fa5d 	bl	800a896 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80093dc:	e082      	b.n	80094e4 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	785a      	ldrb	r2, [r3, #1]
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	88db      	ldrh	r3, [r3, #6]
 80093ec:	b2da      	uxtb	r2, r3
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80093f4:	6939      	ldr	r1, [r7, #16]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	88db      	ldrh	r3, [r3, #6]
 80093fa:	461a      	mov	r2, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f001 fa76 	bl	800a8ee <USBD_CtlPrepareRx>
      break;
 8009402:	e06f      	b.n	80094e4 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	7850      	ldrb	r0, [r2, #1]
 8009410:	2200      	movs	r2, #0
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	4798      	blx	r3
      break;
 8009416:	e065      	b.n	80094e4 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	785b      	ldrb	r3, [r3, #1]
 800941c:	2b0b      	cmp	r3, #11
 800941e:	d84f      	bhi.n	80094c0 <USBD_CDC_Setup+0x148>
 8009420:	a201      	add	r2, pc, #4	; (adr r2, 8009428 <USBD_CDC_Setup+0xb0>)
 8009422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009426:	bf00      	nop
 8009428:	08009459 	.word	0x08009459
 800942c:	080094cf 	.word	0x080094cf
 8009430:	080094c1 	.word	0x080094c1
 8009434:	080094c1 	.word	0x080094c1
 8009438:	080094c1 	.word	0x080094c1
 800943c:	080094c1 	.word	0x080094c1
 8009440:	080094c1 	.word	0x080094c1
 8009444:	080094c1 	.word	0x080094c1
 8009448:	080094c1 	.word	0x080094c1
 800944c:	080094c1 	.word	0x080094c1
 8009450:	08009481 	.word	0x08009481
 8009454:	080094a9 	.word	0x080094a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800945e:	2b03      	cmp	r3, #3
 8009460:	d107      	bne.n	8009472 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009462:	f107 030c 	add.w	r3, r7, #12
 8009466:	2202      	movs	r2, #2
 8009468:	4619      	mov	r1, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f001 fa13 	bl	800a896 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009470:	e030      	b.n	80094d4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f001 f99d 	bl	800a7b4 <USBD_CtlError>
            ret = USBD_FAIL;
 800947a:	2303      	movs	r3, #3
 800947c:	75fb      	strb	r3, [r7, #23]
          break;
 800947e:	e029      	b.n	80094d4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009486:	2b03      	cmp	r3, #3
 8009488:	d107      	bne.n	800949a <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800948a:	f107 030f 	add.w	r3, r7, #15
 800948e:	2201      	movs	r2, #1
 8009490:	4619      	mov	r1, r3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f001 f9ff 	bl	800a896 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009498:	e01c      	b.n	80094d4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800949a:	6839      	ldr	r1, [r7, #0]
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f001 f989 	bl	800a7b4 <USBD_CtlError>
            ret = USBD_FAIL;
 80094a2:	2303      	movs	r3, #3
 80094a4:	75fb      	strb	r3, [r7, #23]
          break;
 80094a6:	e015      	b.n	80094d4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ae:	2b03      	cmp	r3, #3
 80094b0:	d00f      	beq.n	80094d2 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 80094b2:	6839      	ldr	r1, [r7, #0]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f001 f97d 	bl	800a7b4 <USBD_CtlError>
            ret = USBD_FAIL;
 80094ba:	2303      	movs	r3, #3
 80094bc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80094be:	e008      	b.n	80094d2 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f001 f976 	bl	800a7b4 <USBD_CtlError>
          ret = USBD_FAIL;
 80094c8:	2303      	movs	r3, #3
 80094ca:	75fb      	strb	r3, [r7, #23]
          break;
 80094cc:	e002      	b.n	80094d4 <USBD_CDC_Setup+0x15c>
          break;
 80094ce:	bf00      	nop
 80094d0:	e008      	b.n	80094e4 <USBD_CDC_Setup+0x16c>
          break;
 80094d2:	bf00      	nop
      }
      break;
 80094d4:	e006      	b.n	80094e4 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 80094d6:	6839      	ldr	r1, [r7, #0]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f001 f96b 	bl	800a7b4 <USBD_CtlError>
      ret = USBD_FAIL;
 80094de:	2303      	movs	r3, #3
 80094e0:	75fb      	strb	r3, [r7, #23]
      break;
 80094e2:	bf00      	nop
  }

  return (uint8_t)ret;
 80094e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3718      	adds	r7, #24
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop

080094f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	460b      	mov	r3, r1
 80094fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009502:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800950a:	2b00      	cmp	r3, #0
 800950c:	d101      	bne.n	8009512 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800950e:	2303      	movs	r3, #3
 8009510:	e04f      	b.n	80095b2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009518:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800951a:	78fa      	ldrb	r2, [r7, #3]
 800951c:	6879      	ldr	r1, [r7, #4]
 800951e:	4613      	mov	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	440b      	add	r3, r1
 8009528:	3318      	adds	r3, #24
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d029      	beq.n	8009584 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009530:	78fa      	ldrb	r2, [r7, #3]
 8009532:	6879      	ldr	r1, [r7, #4]
 8009534:	4613      	mov	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4413      	add	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	440b      	add	r3, r1
 800953e:	3318      	adds	r3, #24
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	78f9      	ldrb	r1, [r7, #3]
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	460b      	mov	r3, r1
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	440b      	add	r3, r1
 800954c:	00db      	lsls	r3, r3, #3
 800954e:	4403      	add	r3, r0
 8009550:	3338      	adds	r3, #56	; 0x38
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	fbb2 f1f3 	udiv	r1, r2, r3
 8009558:	fb03 f301 	mul.w	r3, r3, r1
 800955c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800955e:	2b00      	cmp	r3, #0
 8009560:	d110      	bne.n	8009584 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009562:	78fa      	ldrb	r2, [r7, #3]
 8009564:	6879      	ldr	r1, [r7, #4]
 8009566:	4613      	mov	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	440b      	add	r3, r1
 8009570:	3318      	adds	r3, #24
 8009572:	2200      	movs	r2, #0
 8009574:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009576:	78f9      	ldrb	r1, [r7, #3]
 8009578:	2300      	movs	r3, #0
 800957a:	2200      	movs	r2, #0
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f001 fe07 	bl	800b190 <USBD_LL_Transmit>
 8009582:	e015      	b.n	80095b0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2200      	movs	r2, #0
 8009588:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00b      	beq.n	80095b0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	68ba      	ldr	r2, [r7, #8]
 80095a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80095ac:	78fa      	ldrb	r2, [r7, #3]
 80095ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b084      	sub	sp, #16
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	460b      	mov	r3, r1
 80095c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d101      	bne.n	80095dc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80095d8:	2303      	movs	r3, #3
 80095da:	e015      	b.n	8009608 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80095dc:	78fb      	ldrb	r3, [r7, #3]
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f001 fe17 	bl	800b214 <USBD_LL_GetRxDataSize>
 80095e6:	4602      	mov	r2, r0
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009602:	4611      	mov	r1, r2
 8009604:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800961e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d015      	beq.n	8009656 <USBD_CDC_EP0_RxReady+0x46>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009630:	2bff      	cmp	r3, #255	; 0xff
 8009632:	d010      	beq.n	8009656 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009642:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800964a:	b292      	uxth	r2, r2
 800964c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	22ff      	movs	r2, #255	; 0xff
 8009652:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2243      	movs	r2, #67	; 0x43
 800966c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800966e:	4b03      	ldr	r3, [pc, #12]	; (800967c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009670:	4618      	mov	r0, r3
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr
 800967c:	200000c4 	.word	0x200000c4

08009680 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2243      	movs	r2, #67	; 0x43
 800968c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800968e:	4b03      	ldr	r3, [pc, #12]	; (800969c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009690:	4618      	mov	r0, r3
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr
 800969c:	20000080 	.word	0x20000080

080096a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2243      	movs	r2, #67	; 0x43
 80096ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80096ae:	4b03      	ldr	r3, [pc, #12]	; (80096bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	20000108 	.word	0x20000108

080096c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	220a      	movs	r2, #10
 80096cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80096ce:	4b03      	ldr	r3, [pc, #12]	; (80096dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr
 80096dc:	2000003c 	.word	0x2000003c

080096e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80096f0:	2303      	movs	r3, #3
 80096f2:	e004      	b.n	80096fe <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	683a      	ldr	r2, [r7, #0]
 80096f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr

0800970a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800970a:	b480      	push	{r7}
 800970c:	b087      	sub	sp, #28
 800970e:	af00      	add	r7, sp, #0
 8009710:	60f8      	str	r0, [r7, #12]
 8009712:	60b9      	str	r1, [r7, #8]
 8009714:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800971c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	371c      	adds	r7, #28
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800974c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	683a      	ldr	r2, [r7, #0]
 8009752:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3714      	adds	r7, #20
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009772:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800977a:	2b00      	cmp	r3, #0
 800977c:	d101      	bne.n	8009782 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800977e:	2303      	movs	r3, #3
 8009780:	e016      	b.n	80097b0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	7c1b      	ldrb	r3, [r3, #16]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d109      	bne.n	800979e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009794:	2101      	movs	r1, #1
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f001 fd1b 	bl	800b1d2 <USBD_LL_PrepareReceive>
 800979c:	e007      	b.n	80097ae <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80097a4:	2340      	movs	r3, #64	; 0x40
 80097a6:	2101      	movs	r1, #1
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f001 fd12 	bl	800b1d2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b086      	sub	sp, #24
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	4613      	mov	r3, r2
 80097c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80097cc:	2303      	movs	r3, #3
 80097ce:	e01f      	b.n	8009810 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	68ba      	ldr	r2, [r7, #8]
 80097f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	79fa      	ldrb	r2, [r7, #7]
 8009802:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f001 fb79 	bl	800aefc <USBD_LL_Init>
 800980a:	4603      	mov	r3, r0
 800980c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800980e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3718      	adds	r7, #24
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009822:	2300      	movs	r3, #0
 8009824:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d101      	bne.n	8009830 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800982c:	2303      	movs	r3, #3
 800982e:	e016      	b.n	800985e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	683a      	ldr	r2, [r7, #0]
 8009834:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800983e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00b      	beq.n	800985c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984c:	f107 020e 	add.w	r2, r7, #14
 8009850:	4610      	mov	r0, r2
 8009852:	4798      	blx	r3
 8009854:	4602      	mov	r2, r0
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b082      	sub	sp, #8
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f001 fba4 	bl	800afbc <USBD_LL_Start>
 8009874:	4603      	mov	r3, r0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800987e:	b480      	push	{r7}
 8009880:	b083      	sub	sp, #12
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	460b      	mov	r3, r1
 800989e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80098a0:	2303      	movs	r3, #3
 80098a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d009      	beq.n	80098c2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	78fa      	ldrb	r2, [r7, #3]
 80098b8:	4611      	mov	r1, r2
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	4798      	blx	r3
 80098be:	4603      	mov	r3, r0
 80098c0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	460b      	mov	r3, r1
 80098d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d007      	beq.n	80098f2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	78fa      	ldrb	r2, [r7, #3]
 80098ec:	4611      	mov	r1, r2
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	4798      	blx	r3
  }

  return USBD_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800990c:	6839      	ldr	r1, [r7, #0]
 800990e:	4618      	mov	r0, r3
 8009910:	f000 ff16 	bl	800a740 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009922:	461a      	mov	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009930:	f003 031f 	and.w	r3, r3, #31
 8009934:	2b01      	cmp	r3, #1
 8009936:	d00e      	beq.n	8009956 <USBD_LL_SetupStage+0x5a>
 8009938:	2b01      	cmp	r3, #1
 800993a:	d302      	bcc.n	8009942 <USBD_LL_SetupStage+0x46>
 800993c:	2b02      	cmp	r3, #2
 800993e:	d014      	beq.n	800996a <USBD_LL_SetupStage+0x6e>
 8009940:	e01d      	b.n	800997e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009948:	4619      	mov	r1, r3
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f9d6 	bl	8009cfc <USBD_StdDevReq>
 8009950:	4603      	mov	r3, r0
 8009952:	73fb      	strb	r3, [r7, #15]
      break;
 8009954:	e020      	b.n	8009998 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800995c:	4619      	mov	r1, r3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 fa3a 	bl	8009dd8 <USBD_StdItfReq>
 8009964:	4603      	mov	r3, r0
 8009966:	73fb      	strb	r3, [r7, #15]
      break;
 8009968:	e016      	b.n	8009998 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009970:	4619      	mov	r1, r3
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fa76 	bl	8009e64 <USBD_StdEPReq>
 8009978:	4603      	mov	r3, r0
 800997a:	73fb      	strb	r3, [r7, #15]
      break;
 800997c:	e00c      	b.n	8009998 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009984:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009988:	b2db      	uxtb	r3, r3
 800998a:	4619      	mov	r1, r3
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f001 fb75 	bl	800b07c <USBD_LL_StallEP>
 8009992:	4603      	mov	r3, r0
 8009994:	73fb      	strb	r3, [r7, #15]
      break;
 8009996:	bf00      	nop
  }

  return ret;
 8009998:	7bfb      	ldrb	r3, [r7, #15]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b086      	sub	sp, #24
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	60f8      	str	r0, [r7, #12]
 80099aa:	460b      	mov	r3, r1
 80099ac:	607a      	str	r2, [r7, #4]
 80099ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80099b0:	7afb      	ldrb	r3, [r7, #11]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d137      	bne.n	8009a26 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80099bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80099c4:	2b03      	cmp	r3, #3
 80099c6:	d14a      	bne.n	8009a5e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	689a      	ldr	r2, [r3, #8]
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d913      	bls.n	80099fc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	689a      	ldr	r2, [r3, #8]
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	1ad2      	subs	r2, r2, r3
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	68da      	ldr	r2, [r3, #12]
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	4293      	cmp	r3, r2
 80099ec:	bf28      	it	cs
 80099ee:	4613      	movcs	r3, r2
 80099f0:	461a      	mov	r2, r3
 80099f2:	6879      	ldr	r1, [r7, #4]
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f000 ff97 	bl	800a928 <USBD_CtlContinueRx>
 80099fa:	e030      	b.n	8009a5e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00a      	beq.n	8009a1e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009a0e:	2b03      	cmp	r3, #3
 8009a10:	d105      	bne.n	8009a1e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	68f8      	ldr	r0, [r7, #12]
 8009a1c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f000 ff93 	bl	800a94a <USBD_CtlSendStatus>
 8009a24:	e01b      	b.n	8009a5e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a2c:	699b      	ldr	r3, [r3, #24]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d013      	beq.n	8009a5a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009a38:	2b03      	cmp	r3, #3
 8009a3a:	d10e      	bne.n	8009a5a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	7afa      	ldrb	r2, [r7, #11]
 8009a46:	4611      	mov	r1, r2
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	4798      	blx	r3
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009a50:	7dfb      	ldrb	r3, [r7, #23]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d003      	beq.n	8009a5e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8009a56:	7dfb      	ldrb	r3, [r7, #23]
 8009a58:	e002      	b.n	8009a60 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	e000      	b.n	8009a60 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3718      	adds	r7, #24
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b086      	sub	sp, #24
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	460b      	mov	r3, r1
 8009a72:	607a      	str	r2, [r7, #4]
 8009a74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009a76:	7afb      	ldrb	r3, [r7, #11]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d16a      	bne.n	8009b52 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	3314      	adds	r3, #20
 8009a80:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d155      	bne.n	8009b38 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	689a      	ldr	r2, [r3, #8]
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d914      	bls.n	8009ac2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	689a      	ldr	r2, [r3, #8]
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	1ad2      	subs	r2, r2, r3
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	461a      	mov	r2, r3
 8009aac:	6879      	ldr	r1, [r7, #4]
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f000 ff0c 	bl	800a8cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	2100      	movs	r1, #0
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	f001 fb89 	bl	800b1d2 <USBD_LL_PrepareReceive>
 8009ac0:	e03a      	b.n	8009b38 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	68da      	ldr	r2, [r3, #12]
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d11c      	bne.n	8009b08 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	685a      	ldr	r2, [r3, #4]
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d316      	bcc.n	8009b08 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	685a      	ldr	r2, [r3, #4]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d20f      	bcs.n	8009b08 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009ae8:	2200      	movs	r2, #0
 8009aea:	2100      	movs	r1, #0
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f000 feed 	bl	800a8cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009afa:	2300      	movs	r3, #0
 8009afc:	2200      	movs	r2, #0
 8009afe:	2100      	movs	r1, #0
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f001 fb66 	bl	800b1d2 <USBD_LL_PrepareReceive>
 8009b06:	e017      	b.n	8009b38 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00a      	beq.n	8009b2a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009b1a:	2b03      	cmp	r3, #3
 8009b1c:	d105      	bne.n	8009b2a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b2a:	2180      	movs	r1, #128	; 0x80
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f001 faa5 	bl	800b07c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f000 ff1c 	bl	800a970 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d123      	bne.n	8009b8a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f7ff fe9b 	bl	800987e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009b50:	e01b      	b.n	8009b8a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b58:	695b      	ldr	r3, [r3, #20]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d013      	beq.n	8009b86 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009b64:	2b03      	cmp	r3, #3
 8009b66:	d10e      	bne.n	8009b86 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	7afa      	ldrb	r2, [r7, #11]
 8009b72:	4611      	mov	r1, r2
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	4798      	blx	r3
 8009b78:	4603      	mov	r3, r0
 8009b7a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009b7c:	7dfb      	ldrb	r3, [r7, #23]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d003      	beq.n	8009b8a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8009b82:	7dfb      	ldrb	r3, [r7, #23]
 8009b84:	e002      	b.n	8009b8c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009b86:	2303      	movs	r3, #3
 8009b88:	e000      	b.n	8009b8c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3718      	adds	r7, #24
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d009      	beq.n	8009bd8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	6852      	ldr	r2, [r2, #4]
 8009bd0:	b2d2      	uxtb	r2, r2
 8009bd2:	4611      	mov	r1, r2
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bd8:	2340      	movs	r3, #64	; 0x40
 8009bda:	2200      	movs	r2, #0
 8009bdc:	2100      	movs	r1, #0
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f001 fa07 	bl	800aff2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2240      	movs	r2, #64	; 0x40
 8009bf0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bf4:	2340      	movs	r3, #64	; 0x40
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	2180      	movs	r1, #128	; 0x80
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f001 f9f9 	bl	800aff2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2201      	movs	r2, #1
 8009c04:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2240      	movs	r2, #64	; 0x40
 8009c0a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009c16:	b480      	push	{r7}
 8009c18:	b083      	sub	sp, #12
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
 8009c1e:	460b      	mov	r3, r1
 8009c20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	78fa      	ldrb	r2, [r7, #3]
 8009c26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009c36:	b480      	push	{r7}
 8009c38:	b083      	sub	sp, #12
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2204      	movs	r2, #4
 8009c4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c6e:	2b04      	cmp	r3, #4
 8009c70:	d105      	bne.n	8009c7e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c9a:	2b03      	cmp	r3, #3
 8009c9c:	d10b      	bne.n	8009cb6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ca4:	69db      	ldr	r3, [r3, #28]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d005      	beq.n	8009cb6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cb0:	69db      	ldr	r3, [r3, #28]
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009cde:	8a3b      	ldrh	r3, [r7, #16]
 8009ce0:	021b      	lsls	r3, r3, #8
 8009ce2:	b21a      	sxth	r2, r3
 8009ce4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	b21b      	sxth	r3, r3
 8009cec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009cee:	89fb      	ldrh	r3, [r7, #14]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	371c      	adds	r7, #28
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d12:	2b20      	cmp	r3, #32
 8009d14:	d004      	beq.n	8009d20 <USBD_StdDevReq+0x24>
 8009d16:	2b40      	cmp	r3, #64	; 0x40
 8009d18:	d002      	beq.n	8009d20 <USBD_StdDevReq+0x24>
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00a      	beq.n	8009d34 <USBD_StdDevReq+0x38>
 8009d1e:	e050      	b.n	8009dc2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	4798      	blx	r3
 8009d2e:	4603      	mov	r3, r0
 8009d30:	73fb      	strb	r3, [r7, #15]
    break;
 8009d32:	e04b      	b.n	8009dcc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	785b      	ldrb	r3, [r3, #1]
 8009d38:	2b09      	cmp	r3, #9
 8009d3a:	d83c      	bhi.n	8009db6 <USBD_StdDevReq+0xba>
 8009d3c:	a201      	add	r2, pc, #4	; (adr r2, 8009d44 <USBD_StdDevReq+0x48>)
 8009d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d42:	bf00      	nop
 8009d44:	08009d99 	.word	0x08009d99
 8009d48:	08009dad 	.word	0x08009dad
 8009d4c:	08009db7 	.word	0x08009db7
 8009d50:	08009da3 	.word	0x08009da3
 8009d54:	08009db7 	.word	0x08009db7
 8009d58:	08009d77 	.word	0x08009d77
 8009d5c:	08009d6d 	.word	0x08009d6d
 8009d60:	08009db7 	.word	0x08009db7
 8009d64:	08009d8f 	.word	0x08009d8f
 8009d68:	08009d81 	.word	0x08009d81
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8009d6c:	6839      	ldr	r1, [r7, #0]
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f9d0 	bl	800a114 <USBD_GetDescriptor>
      break;
 8009d74:	e024      	b.n	8009dc0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8009d76:	6839      	ldr	r1, [r7, #0]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fb5f 	bl	800a43c <USBD_SetAddress>
      break;
 8009d7e:	e01f      	b.n	8009dc0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8009d80:	6839      	ldr	r1, [r7, #0]
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 fb9c 	bl	800a4c0 <USBD_SetConfig>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d8c:	e018      	b.n	8009dc0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 fc39 	bl	800a608 <USBD_GetConfig>
      break;
 8009d96:	e013      	b.n	8009dc0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 fc68 	bl	800a670 <USBD_GetStatus>
      break;
 8009da0:	e00e      	b.n	8009dc0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8009da2:	6839      	ldr	r1, [r7, #0]
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 fc96 	bl	800a6d6 <USBD_SetFeature>
      break;
 8009daa:	e009      	b.n	8009dc0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8009dac:	6839      	ldr	r1, [r7, #0]
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 fca5 	bl	800a6fe <USBD_ClrFeature>
      break;
 8009db4:	e004      	b.n	8009dc0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 fcfb 	bl	800a7b4 <USBD_CtlError>
      break;
 8009dbe:	bf00      	nop
    }
    break;
 8009dc0:	e004      	b.n	8009dcc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8009dc2:	6839      	ldr	r1, [r7, #0]
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 fcf5 	bl	800a7b4 <USBD_CtlError>
    break;
 8009dca:	bf00      	nop
  }

  return ret;
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop

08009dd8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009dee:	2b20      	cmp	r3, #32
 8009df0:	d003      	beq.n	8009dfa <USBD_StdItfReq+0x22>
 8009df2:	2b40      	cmp	r3, #64	; 0x40
 8009df4:	d001      	beq.n	8009dfa <USBD_StdItfReq+0x22>
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d12a      	bne.n	8009e50 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e00:	3b01      	subs	r3, #1
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	d81d      	bhi.n	8009e42 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	889b      	ldrh	r3, [r3, #4]
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d813      	bhi.n	8009e38 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	6839      	ldr	r1, [r7, #0]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	4798      	blx	r3
 8009e1e:	4603      	mov	r3, r0
 8009e20:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	88db      	ldrh	r3, [r3, #6]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d110      	bne.n	8009e4c <USBD_StdItfReq+0x74>
 8009e2a:	7bfb      	ldrb	r3, [r7, #15]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10d      	bne.n	8009e4c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 fd8a 	bl	800a94a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009e36:	e009      	b.n	8009e4c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8009e38:	6839      	ldr	r1, [r7, #0]
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fcba 	bl	800a7b4 <USBD_CtlError>
      break;
 8009e40:	e004      	b.n	8009e4c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 fcb5 	bl	800a7b4 <USBD_CtlError>
      break;
 8009e4a:	e000      	b.n	8009e4e <USBD_StdItfReq+0x76>
      break;
 8009e4c:	bf00      	nop
    }
    break;
 8009e4e:	e004      	b.n	8009e5a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 fcae 	bl	800a7b4 <USBD_CtlError>
    break;
 8009e58:	bf00      	nop
  }

  return ret;
 8009e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3710      	adds	r7, #16
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	889b      	ldrh	r3, [r3, #4]
 8009e76:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e80:	2b20      	cmp	r3, #32
 8009e82:	d004      	beq.n	8009e8e <USBD_StdEPReq+0x2a>
 8009e84:	2b40      	cmp	r3, #64	; 0x40
 8009e86:	d002      	beq.n	8009e8e <USBD_StdEPReq+0x2a>
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00a      	beq.n	8009ea2 <USBD_StdEPReq+0x3e>
 8009e8c:	e137      	b.n	800a0fe <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	4798      	blx	r3
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea0:	e132      	b.n	800a108 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	785b      	ldrb	r3, [r3, #1]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d03e      	beq.n	8009f28 <USBD_StdEPReq+0xc4>
 8009eaa:	2b03      	cmp	r3, #3
 8009eac:	d002      	beq.n	8009eb4 <USBD_StdEPReq+0x50>
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d079      	beq.n	8009fa6 <USBD_StdEPReq+0x142>
 8009eb2:	e11e      	b.n	800a0f2 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eba:	2b02      	cmp	r3, #2
 8009ebc:	d002      	beq.n	8009ec4 <USBD_StdEPReq+0x60>
 8009ebe:	2b03      	cmp	r3, #3
 8009ec0:	d015      	beq.n	8009eee <USBD_StdEPReq+0x8a>
 8009ec2:	e02b      	b.n	8009f1c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ec4:	7bbb      	ldrb	r3, [r7, #14]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00c      	beq.n	8009ee4 <USBD_StdEPReq+0x80>
 8009eca:	7bbb      	ldrb	r3, [r7, #14]
 8009ecc:	2b80      	cmp	r3, #128	; 0x80
 8009ece:	d009      	beq.n	8009ee4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ed0:	7bbb      	ldrb	r3, [r7, #14]
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f001 f8d1 	bl	800b07c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009eda:	2180      	movs	r1, #128	; 0x80
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f001 f8cd 	bl	800b07c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009ee2:	e020      	b.n	8009f26 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 fc64 	bl	800a7b4 <USBD_CtlError>
        break;
 8009eec:	e01b      	b.n	8009f26 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	885b      	ldrh	r3, [r3, #2]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d10e      	bne.n	8009f14 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ef6:	7bbb      	ldrb	r3, [r7, #14]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00b      	beq.n	8009f14 <USBD_StdEPReq+0xb0>
 8009efc:	7bbb      	ldrb	r3, [r7, #14]
 8009efe:	2b80      	cmp	r3, #128	; 0x80
 8009f00:	d008      	beq.n	8009f14 <USBD_StdEPReq+0xb0>
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	88db      	ldrh	r3, [r3, #6]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d104      	bne.n	8009f14 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f0a:	7bbb      	ldrb	r3, [r7, #14]
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f001 f8b4 	bl	800b07c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 fd18 	bl	800a94a <USBD_CtlSendStatus>

        break;
 8009f1a:	e004      	b.n	8009f26 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8009f1c:	6839      	ldr	r1, [r7, #0]
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 fc48 	bl	800a7b4 <USBD_CtlError>
        break;
 8009f24:	bf00      	nop
      }
      break;
 8009f26:	e0e9      	b.n	800a0fc <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d002      	beq.n	8009f38 <USBD_StdEPReq+0xd4>
 8009f32:	2b03      	cmp	r3, #3
 8009f34:	d015      	beq.n	8009f62 <USBD_StdEPReq+0xfe>
 8009f36:	e02f      	b.n	8009f98 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f38:	7bbb      	ldrb	r3, [r7, #14]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d00c      	beq.n	8009f58 <USBD_StdEPReq+0xf4>
 8009f3e:	7bbb      	ldrb	r3, [r7, #14]
 8009f40:	2b80      	cmp	r3, #128	; 0x80
 8009f42:	d009      	beq.n	8009f58 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f44:	7bbb      	ldrb	r3, [r7, #14]
 8009f46:	4619      	mov	r1, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f001 f897 	bl	800b07c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f4e:	2180      	movs	r1, #128	; 0x80
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f001 f893 	bl	800b07c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009f56:	e025      	b.n	8009fa4 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8009f58:	6839      	ldr	r1, [r7, #0]
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fc2a 	bl	800a7b4 <USBD_CtlError>
        break;
 8009f60:	e020      	b.n	8009fa4 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	885b      	ldrh	r3, [r3, #2]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d11b      	bne.n	8009fa2 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009f6a:	7bbb      	ldrb	r3, [r7, #14]
 8009f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d004      	beq.n	8009f7e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f74:	7bbb      	ldrb	r3, [r7, #14]
 8009f76:	4619      	mov	r1, r3
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f001 f89e 	bl	800b0ba <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 fce3 	bl	800a94a <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	6839      	ldr	r1, [r7, #0]
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	4798      	blx	r3
 8009f92:	4603      	mov	r3, r0
 8009f94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009f96:	e004      	b.n	8009fa2 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8009f98:	6839      	ldr	r1, [r7, #0]
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 fc0a 	bl	800a7b4 <USBD_CtlError>
        break;
 8009fa0:	e000      	b.n	8009fa4 <USBD_StdEPReq+0x140>
        break;
 8009fa2:	bf00      	nop
      }
      break;
 8009fa4:	e0aa      	b.n	800a0fc <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fac:	2b02      	cmp	r3, #2
 8009fae:	d002      	beq.n	8009fb6 <USBD_StdEPReq+0x152>
 8009fb0:	2b03      	cmp	r3, #3
 8009fb2:	d032      	beq.n	800a01a <USBD_StdEPReq+0x1b6>
 8009fb4:	e097      	b.n	800a0e6 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fb6:	7bbb      	ldrb	r3, [r7, #14]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d007      	beq.n	8009fcc <USBD_StdEPReq+0x168>
 8009fbc:	7bbb      	ldrb	r3, [r7, #14]
 8009fbe:	2b80      	cmp	r3, #128	; 0x80
 8009fc0:	d004      	beq.n	8009fcc <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8009fc2:	6839      	ldr	r1, [r7, #0]
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fbf5 	bl	800a7b4 <USBD_CtlError>
          break;
 8009fca:	e091      	b.n	800a0f0 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	da0b      	bge.n	8009fec <USBD_StdEPReq+0x188>
 8009fd4:	7bbb      	ldrb	r3, [r7, #14]
 8009fd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fda:	4613      	mov	r3, r2
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	4413      	add	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	3310      	adds	r3, #16
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	3304      	adds	r3, #4
 8009fea:	e00b      	b.n	800a004 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009fec:	7bbb      	ldrb	r3, [r7, #14]
 8009fee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	4413      	add	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	4413      	add	r3, r2
 800a002:	3304      	adds	r3, #4
 800a004:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	2200      	movs	r2, #0
 800a00a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	2202      	movs	r2, #2
 800a010:	4619      	mov	r1, r3
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 fc3f 	bl	800a896 <USBD_CtlSendData>
        break;
 800a018:	e06a      	b.n	800a0f0 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800a01a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	da11      	bge.n	800a046 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a022:	7bbb      	ldrb	r3, [r7, #14]
 800a024:	f003 020f 	and.w	r2, r3, #15
 800a028:	6879      	ldr	r1, [r7, #4]
 800a02a:	4613      	mov	r3, r2
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	4413      	add	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	440b      	add	r3, r1
 800a034:	3324      	adds	r3, #36	; 0x24
 800a036:	881b      	ldrh	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d117      	bne.n	800a06c <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800a03c:	6839      	ldr	r1, [r7, #0]
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 fbb8 	bl	800a7b4 <USBD_CtlError>
            break;
 800a044:	e054      	b.n	800a0f0 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a046:	7bbb      	ldrb	r3, [r7, #14]
 800a048:	f003 020f 	and.w	r2, r3, #15
 800a04c:	6879      	ldr	r1, [r7, #4]
 800a04e:	4613      	mov	r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	4413      	add	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	440b      	add	r3, r1
 800a058:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a05c:	881b      	ldrh	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d104      	bne.n	800a06c <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800a062:	6839      	ldr	r1, [r7, #0]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fba5 	bl	800a7b4 <USBD_CtlError>
            break;
 800a06a:	e041      	b.n	800a0f0 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a06c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a070:	2b00      	cmp	r3, #0
 800a072:	da0b      	bge.n	800a08c <USBD_StdEPReq+0x228>
 800a074:	7bbb      	ldrb	r3, [r7, #14]
 800a076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a07a:	4613      	mov	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	4413      	add	r3, r2
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	3310      	adds	r3, #16
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	4413      	add	r3, r2
 800a088:	3304      	adds	r3, #4
 800a08a:	e00b      	b.n	800a0a4 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a08c:	7bbb      	ldrb	r3, [r7, #14]
 800a08e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a092:	4613      	mov	r3, r2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	4413      	add	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a0a6:	7bbb      	ldrb	r3, [r7, #14]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d002      	beq.n	800a0b2 <USBD_StdEPReq+0x24e>
 800a0ac:	7bbb      	ldrb	r3, [r7, #14]
 800a0ae:	2b80      	cmp	r3, #128	; 0x80
 800a0b0:	d103      	bne.n	800a0ba <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	601a      	str	r2, [r3, #0]
 800a0b8:	e00e      	b.n	800a0d8 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a0ba:	7bbb      	ldrb	r3, [r7, #14]
 800a0bc:	4619      	mov	r1, r3
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f001 f81a 	bl	800b0f8 <USBD_LL_IsStallEP>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d003      	beq.n	800a0d2 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	601a      	str	r2, [r3, #0]
 800a0d0:	e002      	b.n	800a0d8 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	4619      	mov	r1, r3
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 fbd9 	bl	800a896 <USBD_CtlSendData>
          break;
 800a0e4:	e004      	b.n	800a0f0 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800a0e6:	6839      	ldr	r1, [r7, #0]
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 fb63 	bl	800a7b4 <USBD_CtlError>
        break;
 800a0ee:	bf00      	nop
      }
      break;
 800a0f0:	e004      	b.n	800a0fc <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800a0f2:	6839      	ldr	r1, [r7, #0]
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 fb5d 	bl	800a7b4 <USBD_CtlError>
      break;
 800a0fa:	bf00      	nop
    }
    break;
 800a0fc:	e004      	b.n	800a108 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800a0fe:	6839      	ldr	r1, [r7, #0]
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 fb57 	bl	800a7b4 <USBD_CtlError>
    break;
 800a106:	bf00      	nop
  }

  return ret;
 800a108:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
	...

0800a114 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a11e:	2300      	movs	r3, #0
 800a120:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a122:	2300      	movs	r3, #0
 800a124:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a126:	2300      	movs	r3, #0
 800a128:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	885b      	ldrh	r3, [r3, #2]
 800a12e:	0a1b      	lsrs	r3, r3, #8
 800a130:	b29b      	uxth	r3, r3
 800a132:	3b01      	subs	r3, #1
 800a134:	2b0e      	cmp	r3, #14
 800a136:	f200 8152 	bhi.w	800a3de <USBD_GetDescriptor+0x2ca>
 800a13a:	a201      	add	r2, pc, #4	; (adr r2, 800a140 <USBD_GetDescriptor+0x2c>)
 800a13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a140:	0800a1b1 	.word	0x0800a1b1
 800a144:	0800a1c9 	.word	0x0800a1c9
 800a148:	0800a209 	.word	0x0800a209
 800a14c:	0800a3df 	.word	0x0800a3df
 800a150:	0800a3df 	.word	0x0800a3df
 800a154:	0800a37f 	.word	0x0800a37f
 800a158:	0800a3ab 	.word	0x0800a3ab
 800a15c:	0800a3df 	.word	0x0800a3df
 800a160:	0800a3df 	.word	0x0800a3df
 800a164:	0800a3df 	.word	0x0800a3df
 800a168:	0800a3df 	.word	0x0800a3df
 800a16c:	0800a3df 	.word	0x0800a3df
 800a170:	0800a3df 	.word	0x0800a3df
 800a174:	0800a3df 	.word	0x0800a3df
 800a178:	0800a17d 	.word	0x0800a17d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a182:	69db      	ldr	r3, [r3, #28]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00b      	beq.n	800a1a0 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a18e:	69db      	ldr	r3, [r3, #28]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	7c12      	ldrb	r2, [r2, #16]
 800a194:	f107 0108 	add.w	r1, r7, #8
 800a198:	4610      	mov	r0, r2
 800a19a:	4798      	blx	r3
 800a19c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a19e:	e126      	b.n	800a3ee <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800a1a0:	6839      	ldr	r1, [r7, #0]
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 fb06 	bl	800a7b4 <USBD_CtlError>
      err++;
 800a1a8:	7afb      	ldrb	r3, [r7, #11]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	72fb      	strb	r3, [r7, #11]
    break;
 800a1ae:	e11e      	b.n	800a3ee <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	7c12      	ldrb	r2, [r2, #16]
 800a1bc:	f107 0108 	add.w	r1, r7, #8
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	4798      	blx	r3
 800a1c4:	60f8      	str	r0, [r7, #12]
    break;
 800a1c6:	e112      	b.n	800a3ee <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	7c1b      	ldrb	r3, [r3, #16]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d10d      	bne.n	800a1ec <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d8:	f107 0208 	add.w	r2, r7, #8
 800a1dc:	4610      	mov	r0, r2
 800a1de:	4798      	blx	r3
 800a1e0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800a1ea:	e100      	b.n	800a3ee <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f4:	f107 0208 	add.w	r2, r7, #8
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	4798      	blx	r3
 800a1fc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	3301      	adds	r3, #1
 800a202:	2202      	movs	r2, #2
 800a204:	701a      	strb	r2, [r3, #0]
    break;
 800a206:	e0f2      	b.n	800a3ee <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	885b      	ldrh	r3, [r3, #2]
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	2b05      	cmp	r3, #5
 800a210:	f200 80ac 	bhi.w	800a36c <USBD_GetDescriptor+0x258>
 800a214:	a201      	add	r2, pc, #4	; (adr r2, 800a21c <USBD_GetDescriptor+0x108>)
 800a216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21a:	bf00      	nop
 800a21c:	0800a235 	.word	0x0800a235
 800a220:	0800a269 	.word	0x0800a269
 800a224:	0800a29d 	.word	0x0800a29d
 800a228:	0800a2d1 	.word	0x0800a2d1
 800a22c:	0800a305 	.word	0x0800a305
 800a230:	0800a339 	.word	0x0800a339
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00b      	beq.n	800a258 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	7c12      	ldrb	r2, [r2, #16]
 800a24c:	f107 0108 	add.w	r1, r7, #8
 800a250:	4610      	mov	r0, r2
 800a252:	4798      	blx	r3
 800a254:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a256:	e091      	b.n	800a37c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a258:	6839      	ldr	r1, [r7, #0]
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 faaa 	bl	800a7b4 <USBD_CtlError>
        err++;
 800a260:	7afb      	ldrb	r3, [r7, #11]
 800a262:	3301      	adds	r3, #1
 800a264:	72fb      	strb	r3, [r7, #11]
      break;
 800a266:	e089      	b.n	800a37c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a26e:	689b      	ldr	r3, [r3, #8]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d00b      	beq.n	800a28c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	7c12      	ldrb	r2, [r2, #16]
 800a280:	f107 0108 	add.w	r1, r7, #8
 800a284:	4610      	mov	r0, r2
 800a286:	4798      	blx	r3
 800a288:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a28a:	e077      	b.n	800a37c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a28c:	6839      	ldr	r1, [r7, #0]
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 fa90 	bl	800a7b4 <USBD_CtlError>
        err++;
 800a294:	7afb      	ldrb	r3, [r7, #11]
 800a296:	3301      	adds	r3, #1
 800a298:	72fb      	strb	r3, [r7, #11]
      break;
 800a29a:	e06f      	b.n	800a37c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00b      	beq.n	800a2c0 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	7c12      	ldrb	r2, [r2, #16]
 800a2b4:	f107 0108 	add.w	r1, r7, #8
 800a2b8:	4610      	mov	r0, r2
 800a2ba:	4798      	blx	r3
 800a2bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2be:	e05d      	b.n	800a37c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a2c0:	6839      	ldr	r1, [r7, #0]
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 fa76 	bl	800a7b4 <USBD_CtlError>
        err++;
 800a2c8:	7afb      	ldrb	r3, [r7, #11]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	72fb      	strb	r3, [r7, #11]
      break;
 800a2ce:	e055      	b.n	800a37c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00b      	beq.n	800a2f4 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2e2:	691b      	ldr	r3, [r3, #16]
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	7c12      	ldrb	r2, [r2, #16]
 800a2e8:	f107 0108 	add.w	r1, r7, #8
 800a2ec:	4610      	mov	r0, r2
 800a2ee:	4798      	blx	r3
 800a2f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2f2:	e043      	b.n	800a37c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a2f4:	6839      	ldr	r1, [r7, #0]
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 fa5c 	bl	800a7b4 <USBD_CtlError>
        err++;
 800a2fc:	7afb      	ldrb	r3, [r7, #11]
 800a2fe:	3301      	adds	r3, #1
 800a300:	72fb      	strb	r3, [r7, #11]
      break;
 800a302:	e03b      	b.n	800a37c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a30a:	695b      	ldr	r3, [r3, #20]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d00b      	beq.n	800a328 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a316:	695b      	ldr	r3, [r3, #20]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	7c12      	ldrb	r2, [r2, #16]
 800a31c:	f107 0108 	add.w	r1, r7, #8
 800a320:	4610      	mov	r0, r2
 800a322:	4798      	blx	r3
 800a324:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a326:	e029      	b.n	800a37c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a328:	6839      	ldr	r1, [r7, #0]
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 fa42 	bl	800a7b4 <USBD_CtlError>
        err++;
 800a330:	7afb      	ldrb	r3, [r7, #11]
 800a332:	3301      	adds	r3, #1
 800a334:	72fb      	strb	r3, [r7, #11]
      break;
 800a336:	e021      	b.n	800a37c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00b      	beq.n	800a35c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a34a:	699b      	ldr	r3, [r3, #24]
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	7c12      	ldrb	r2, [r2, #16]
 800a350:	f107 0108 	add.w	r1, r7, #8
 800a354:	4610      	mov	r0, r2
 800a356:	4798      	blx	r3
 800a358:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a35a:	e00f      	b.n	800a37c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a35c:	6839      	ldr	r1, [r7, #0]
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fa28 	bl	800a7b4 <USBD_CtlError>
        err++;
 800a364:	7afb      	ldrb	r3, [r7, #11]
 800a366:	3301      	adds	r3, #1
 800a368:	72fb      	strb	r3, [r7, #11]
      break;
 800a36a:	e007      	b.n	800a37c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800a36c:	6839      	ldr	r1, [r7, #0]
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fa20 	bl	800a7b4 <USBD_CtlError>
      err++;
 800a374:	7afb      	ldrb	r3, [r7, #11]
 800a376:	3301      	adds	r3, #1
 800a378:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800a37a:	bf00      	nop
    }
    break;
 800a37c:	e037      	b.n	800a3ee <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	7c1b      	ldrb	r3, [r3, #16]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d109      	bne.n	800a39a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38e:	f107 0208 	add.w	r2, r7, #8
 800a392:	4610      	mov	r0, r2
 800a394:	4798      	blx	r3
 800a396:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a398:	e029      	b.n	800a3ee <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800a39a:	6839      	ldr	r1, [r7, #0]
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 fa09 	bl	800a7b4 <USBD_CtlError>
      err++;
 800a3a2:	7afb      	ldrb	r3, [r7, #11]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	72fb      	strb	r3, [r7, #11]
    break;
 800a3a8:	e021      	b.n	800a3ee <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	7c1b      	ldrb	r3, [r3, #16]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d10d      	bne.n	800a3ce <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ba:	f107 0208 	add.w	r2, r7, #8
 800a3be:	4610      	mov	r0, r2
 800a3c0:	4798      	blx	r3
 800a3c2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	2207      	movs	r2, #7
 800a3ca:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a3cc:	e00f      	b.n	800a3ee <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800a3ce:	6839      	ldr	r1, [r7, #0]
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 f9ef 	bl	800a7b4 <USBD_CtlError>
      err++;
 800a3d6:	7afb      	ldrb	r3, [r7, #11]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	72fb      	strb	r3, [r7, #11]
    break;
 800a3dc:	e007      	b.n	800a3ee <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800a3de:	6839      	ldr	r1, [r7, #0]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 f9e7 	bl	800a7b4 <USBD_CtlError>
    err++;
 800a3e6:	7afb      	ldrb	r3, [r7, #11]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	72fb      	strb	r3, [r7, #11]
    break;
 800a3ec:	bf00      	nop
  }

  if (err != 0U)
 800a3ee:	7afb      	ldrb	r3, [r7, #11]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d11e      	bne.n	800a432 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	88db      	ldrh	r3, [r3, #6]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d016      	beq.n	800a42a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800a3fc:	893b      	ldrh	r3, [r7, #8]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d00e      	beq.n	800a420 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	88da      	ldrh	r2, [r3, #6]
 800a406:	893b      	ldrh	r3, [r7, #8]
 800a408:	4293      	cmp	r3, r2
 800a40a:	bf28      	it	cs
 800a40c:	4613      	movcs	r3, r2
 800a40e:	b29b      	uxth	r3, r3
 800a410:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800a412:	893b      	ldrh	r3, [r7, #8]
 800a414:	461a      	mov	r2, r3
 800a416:	68f9      	ldr	r1, [r7, #12]
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fa3c 	bl	800a896 <USBD_CtlSendData>
 800a41e:	e009      	b.n	800a434 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f9c6 	bl	800a7b4 <USBD_CtlError>
 800a428:	e004      	b.n	800a434 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 fa8d 	bl	800a94a <USBD_CtlSendStatus>
 800a430:	e000      	b.n	800a434 <USBD_GetDescriptor+0x320>
    return;
 800a432:	bf00      	nop
    }
  }
}
 800a434:	3710      	adds	r7, #16
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop

0800a43c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	889b      	ldrh	r3, [r3, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d130      	bne.n	800a4b0 <USBD_SetAddress+0x74>
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	88db      	ldrh	r3, [r3, #6]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d12c      	bne.n	800a4b0 <USBD_SetAddress+0x74>
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	885b      	ldrh	r3, [r3, #2]
 800a45a:	2b7f      	cmp	r3, #127	; 0x7f
 800a45c:	d828      	bhi.n	800a4b0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	885b      	ldrh	r3, [r3, #2]
 800a462:	b2db      	uxtb	r3, r3
 800a464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a468:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a470:	2b03      	cmp	r3, #3
 800a472:	d104      	bne.n	800a47e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a474:	6839      	ldr	r1, [r7, #0]
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 f99c 	bl	800a7b4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a47c:	e01c      	b.n	800a4b8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	7bfa      	ldrb	r2, [r7, #15]
 800a482:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a486:	7bfb      	ldrb	r3, [r7, #15]
 800a488:	4619      	mov	r1, r3
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 fe61 	bl	800b152 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fa5a 	bl	800a94a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a496:	7bfb      	ldrb	r3, [r7, #15]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d004      	beq.n	800a4a6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2202      	movs	r2, #2
 800a4a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4a4:	e008      	b.n	800a4b8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4ae:	e003      	b.n	800a4b8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a4b0:	6839      	ldr	r1, [r7, #0]
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 f97e 	bl	800a7b4 <USBD_CtlError>
  }
}
 800a4b8:	bf00      	nop
 800a4ba:	3710      	adds	r7, #16
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	885b      	ldrh	r3, [r3, #2]
 800a4d2:	b2da      	uxtb	r2, r3
 800a4d4:	4b4b      	ldr	r3, [pc, #300]	; (800a604 <USBD_SetConfig+0x144>)
 800a4d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a4d8:	4b4a      	ldr	r3, [pc, #296]	; (800a604 <USBD_SetConfig+0x144>)
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d905      	bls.n	800a4ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a4e0:	6839      	ldr	r1, [r7, #0]
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 f966 	bl	800a7b4 <USBD_CtlError>
    return USBD_FAIL;
 800a4e8:	2303      	movs	r3, #3
 800a4ea:	e087      	b.n	800a5fc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	d002      	beq.n	800a4fc <USBD_SetConfig+0x3c>
 800a4f6:	2b03      	cmp	r3, #3
 800a4f8:	d025      	beq.n	800a546 <USBD_SetConfig+0x86>
 800a4fa:	e071      	b.n	800a5e0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800a4fc:	4b41      	ldr	r3, [pc, #260]	; (800a604 <USBD_SetConfig+0x144>)
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d01c      	beq.n	800a53e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800a504:	4b3f      	ldr	r3, [pc, #252]	; (800a604 <USBD_SetConfig+0x144>)
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	461a      	mov	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a50e:	4b3d      	ldr	r3, [pc, #244]	; (800a604 <USBD_SetConfig+0x144>)
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	4619      	mov	r1, r3
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f7ff f9bd 	bl	8009894 <USBD_SetClassConfig>
 800a51a:	4603      	mov	r3, r0
 800a51c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800a51e:	7bfb      	ldrb	r3, [r7, #15]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d004      	beq.n	800a52e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f944 	bl	800a7b4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a52c:	e065      	b.n	800a5fa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 fa0b 	bl	800a94a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2203      	movs	r2, #3
 800a538:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a53c:	e05d      	b.n	800a5fa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 fa03 	bl	800a94a <USBD_CtlSendStatus>
    break;
 800a544:	e059      	b.n	800a5fa <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800a546:	4b2f      	ldr	r3, [pc, #188]	; (800a604 <USBD_SetConfig+0x144>)
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d112      	bne.n	800a574 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2202      	movs	r2, #2
 800a552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800a556:	4b2b      	ldr	r3, [pc, #172]	; (800a604 <USBD_SetConfig+0x144>)
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	461a      	mov	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a560:	4b28      	ldr	r3, [pc, #160]	; (800a604 <USBD_SetConfig+0x144>)
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	4619      	mov	r1, r3
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f7ff f9b0 	bl	80098cc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f9ec 	bl	800a94a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a572:	e042      	b.n	800a5fa <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800a574:	4b23      	ldr	r3, [pc, #140]	; (800a604 <USBD_SetConfig+0x144>)
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	461a      	mov	r2, r3
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d02a      	beq.n	800a5d8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	b2db      	uxtb	r3, r3
 800a588:	4619      	mov	r1, r3
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f7ff f99e 	bl	80098cc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800a590:	4b1c      	ldr	r3, [pc, #112]	; (800a604 <USBD_SetConfig+0x144>)
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	461a      	mov	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a59a:	4b1a      	ldr	r3, [pc, #104]	; (800a604 <USBD_SetConfig+0x144>)
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	4619      	mov	r1, r3
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f7ff f977 	bl	8009894 <USBD_SetClassConfig>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800a5aa:	7bfb      	ldrb	r3, [r7, #15]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00f      	beq.n	800a5d0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800a5b0:	6839      	ldr	r1, [r7, #0]
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f8fe 	bl	800a7b4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	4619      	mov	r1, r3
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f7ff f983 	bl	80098cc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2202      	movs	r2, #2
 800a5ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a5ce:	e014      	b.n	800a5fa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 f9ba 	bl	800a94a <USBD_CtlSendStatus>
    break;
 800a5d6:	e010      	b.n	800a5fa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 f9b6 	bl	800a94a <USBD_CtlSendStatus>
    break;
 800a5de:	e00c      	b.n	800a5fa <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800a5e0:	6839      	ldr	r1, [r7, #0]
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f8e6 	bl	800a7b4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a5e8:	4b06      	ldr	r3, [pc, #24]	; (800a604 <USBD_SetConfig+0x144>)
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f7ff f96c 	bl	80098cc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a5f8:	bf00      	nop
  }

  return ret;
 800a5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	2000026c 	.word	0x2000026c

0800a608 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	88db      	ldrh	r3, [r3, #6]
 800a616:	2b01      	cmp	r3, #1
 800a618:	d004      	beq.n	800a624 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a61a:	6839      	ldr	r1, [r7, #0]
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 f8c9 	bl	800a7b4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800a622:	e021      	b.n	800a668 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	db17      	blt.n	800a65e <USBD_GetConfig+0x56>
 800a62e:	2b02      	cmp	r3, #2
 800a630:	dd02      	ble.n	800a638 <USBD_GetConfig+0x30>
 800a632:	2b03      	cmp	r3, #3
 800a634:	d00b      	beq.n	800a64e <USBD_GetConfig+0x46>
 800a636:	e012      	b.n	800a65e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	3308      	adds	r3, #8
 800a642:	2201      	movs	r2, #1
 800a644:	4619      	mov	r1, r3
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 f925 	bl	800a896 <USBD_CtlSendData>
      break;
 800a64c:	e00c      	b.n	800a668 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	3304      	adds	r3, #4
 800a652:	2201      	movs	r2, #1
 800a654:	4619      	mov	r1, r3
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 f91d 	bl	800a896 <USBD_CtlSendData>
      break;
 800a65c:	e004      	b.n	800a668 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800a65e:	6839      	ldr	r1, [r7, #0]
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 f8a7 	bl	800a7b4 <USBD_CtlError>
      break;
 800a666:	bf00      	nop
}
 800a668:	bf00      	nop
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a680:	3b01      	subs	r3, #1
 800a682:	2b02      	cmp	r3, #2
 800a684:	d81e      	bhi.n	800a6c4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	88db      	ldrh	r3, [r3, #6]
 800a68a:	2b02      	cmp	r3, #2
 800a68c:	d004      	beq.n	800a698 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800a68e:	6839      	ldr	r1, [r7, #0]
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 f88f 	bl	800a7b4 <USBD_CtlError>
      break;
 800a696:	e01a      	b.n	800a6ce <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2201      	movs	r2, #1
 800a69c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d005      	beq.n	800a6b4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	f043 0202 	orr.w	r2, r3, #2
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	330c      	adds	r3, #12
 800a6b8:	2202      	movs	r2, #2
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 f8ea 	bl	800a896 <USBD_CtlSendData>
    break;
 800a6c2:	e004      	b.n	800a6ce <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800a6c4:	6839      	ldr	r1, [r7, #0]
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 f874 	bl	800a7b4 <USBD_CtlError>
    break;
 800a6cc:	bf00      	nop
  }
}
 800a6ce:	bf00      	nop
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b082      	sub	sp, #8
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	885b      	ldrh	r3, [r3, #2]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d106      	bne.n	800a6f6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 f92a 	bl	800a94a <USBD_CtlSendStatus>
  }
}
 800a6f6:	bf00      	nop
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b082      	sub	sp, #8
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a70e:	3b01      	subs	r3, #1
 800a710:	2b02      	cmp	r3, #2
 800a712:	d80b      	bhi.n	800a72c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	885b      	ldrh	r3, [r3, #2]
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d10c      	bne.n	800a736 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2200      	movs	r2, #0
 800a720:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 f910 	bl	800a94a <USBD_CtlSendStatus>
      }
      break;
 800a72a:	e004      	b.n	800a736 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a72c:	6839      	ldr	r1, [r7, #0]
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f840 	bl	800a7b4 <USBD_CtlError>
      break;
 800a734:	e000      	b.n	800a738 <USBD_ClrFeature+0x3a>
      break;
 800a736:	bf00      	nop
  }
}
 800a738:	bf00      	nop
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	781a      	ldrb	r2, [r3, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	3301      	adds	r3, #1
 800a75a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	781a      	ldrb	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	3301      	adds	r3, #1
 800a768:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	f7ff faa8 	bl	8009cc0 <SWAPBYTE>
 800a770:	4603      	mov	r3, r0
 800a772:	461a      	mov	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	3301      	adds	r3, #1
 800a77c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	3301      	adds	r3, #1
 800a782:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f7ff fa9b 	bl	8009cc0 <SWAPBYTE>
 800a78a:	4603      	mov	r3, r0
 800a78c:	461a      	mov	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	3301      	adds	r3, #1
 800a796:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	3301      	adds	r3, #1
 800a79c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f7ff fa8e 	bl	8009cc0 <SWAPBYTE>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	80da      	strh	r2, [r3, #6]
}
 800a7ac:	bf00      	nop
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7be:	2180      	movs	r1, #128	; 0x80
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 fc5b 	bl	800b07c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fc57 	bl	800b07c <USBD_LL_StallEP>
}
 800a7ce:	bf00      	nop
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b086      	sub	sp, #24
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	60f8      	str	r0, [r7, #12]
 800a7de:	60b9      	str	r1, [r7, #8]
 800a7e0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d036      	beq.n	800a85a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a7f0:	6938      	ldr	r0, [r7, #16]
 800a7f2:	f000 f836 	bl	800a862 <USBD_GetLen>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	005b      	lsls	r3, r3, #1
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a804:	7dfb      	ldrb	r3, [r7, #23]
 800a806:	68ba      	ldr	r2, [r7, #8]
 800a808:	4413      	add	r3, r2
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	7812      	ldrb	r2, [r2, #0]
 800a80e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a810:	7dfb      	ldrb	r3, [r7, #23]
 800a812:	3301      	adds	r3, #1
 800a814:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a816:	7dfb      	ldrb	r3, [r7, #23]
 800a818:	68ba      	ldr	r2, [r7, #8]
 800a81a:	4413      	add	r3, r2
 800a81c:	2203      	movs	r2, #3
 800a81e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a820:	7dfb      	ldrb	r3, [r7, #23]
 800a822:	3301      	adds	r3, #1
 800a824:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a826:	e013      	b.n	800a850 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a828:	7dfb      	ldrb	r3, [r7, #23]
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	4413      	add	r3, r2
 800a82e:	693a      	ldr	r2, [r7, #16]
 800a830:	7812      	ldrb	r2, [r2, #0]
 800a832:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	3301      	adds	r3, #1
 800a838:	613b      	str	r3, [r7, #16]
    idx++;
 800a83a:	7dfb      	ldrb	r3, [r7, #23]
 800a83c:	3301      	adds	r3, #1
 800a83e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a840:	7dfb      	ldrb	r3, [r7, #23]
 800a842:	68ba      	ldr	r2, [r7, #8]
 800a844:	4413      	add	r3, r2
 800a846:	2200      	movs	r2, #0
 800a848:	701a      	strb	r2, [r3, #0]
    idx++;
 800a84a:	7dfb      	ldrb	r3, [r7, #23]
 800a84c:	3301      	adds	r3, #1
 800a84e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1e7      	bne.n	800a828 <USBD_GetString+0x52>
 800a858:	e000      	b.n	800a85c <USBD_GetString+0x86>
    return;
 800a85a:	bf00      	nop
  }
}
 800a85c:	3718      	adds	r7, #24
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a862:	b480      	push	{r7}
 800a864:	b085      	sub	sp, #20
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a86a:	2300      	movs	r3, #0
 800a86c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a872:	e005      	b.n	800a880 <USBD_GetLen+0x1e>
  {
    len++;
 800a874:	7bfb      	ldrb	r3, [r7, #15]
 800a876:	3301      	adds	r3, #1
 800a878:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	3301      	adds	r3, #1
 800a87e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d1f5      	bne.n	800a874 <USBD_GetLen+0x12>
  }

  return len;
 800a888:	7bfb      	ldrb	r3, [r7, #15]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b084      	sub	sp, #16
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	60f8      	str	r0, [r7, #12]
 800a89e:	60b9      	str	r1, [r7, #8]
 800a8a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2202      	movs	r2, #2
 800a8a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	68ba      	ldr	r2, [r7, #8]
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	68f8      	ldr	r0, [r7, #12]
 800a8be:	f000 fc67 	bl	800b190 <USBD_LL_Transmit>

  return USBD_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	2100      	movs	r1, #0
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	f000 fc56 	bl	800b190 <USBD_LL_Transmit>

  return USBD_OK;
 800a8e4:	2300      	movs	r3, #0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3710      	adds	r7, #16
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b084      	sub	sp, #16
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	60f8      	str	r0, [r7, #12]
 800a8f6:	60b9      	str	r1, [r7, #8]
 800a8f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2203      	movs	r2, #3
 800a8fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	68ba      	ldr	r2, [r7, #8]
 800a916:	2100      	movs	r1, #0
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f000 fc5a 	bl	800b1d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	68ba      	ldr	r2, [r7, #8]
 800a938:	2100      	movs	r1, #0
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f000 fc49 	bl	800b1d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a940:	2300      	movs	r3, #0
}
 800a942:	4618      	mov	r0, r3
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b082      	sub	sp, #8
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2204      	movs	r2, #4
 800a956:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a95a:	2300      	movs	r3, #0
 800a95c:	2200      	movs	r2, #0
 800a95e:	2100      	movs	r1, #0
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 fc15 	bl	800b190 <USBD_LL_Transmit>

  return USBD_OK;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3708      	adds	r7, #8
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2205      	movs	r2, #5
 800a97c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a980:	2300      	movs	r3, #0
 800a982:	2200      	movs	r2, #0
 800a984:	2100      	movs	r1, #0
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 fc23 	bl	800b1d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3708      	adds	r7, #8
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
	...

0800a998 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a99c:	2200      	movs	r2, #0
 800a99e:	4912      	ldr	r1, [pc, #72]	; (800a9e8 <MX_USB_Device_Init+0x50>)
 800a9a0:	4812      	ldr	r0, [pc, #72]	; (800a9ec <MX_USB_Device_Init+0x54>)
 800a9a2:	f7fe ff09 	bl	80097b8 <USBD_Init>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a9ac:	f7f7 fb28 	bl	8002000 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a9b0:	490f      	ldr	r1, [pc, #60]	; (800a9f0 <MX_USB_Device_Init+0x58>)
 800a9b2:	480e      	ldr	r0, [pc, #56]	; (800a9ec <MX_USB_Device_Init+0x54>)
 800a9b4:	f7fe ff30 	bl	8009818 <USBD_RegisterClass>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d001      	beq.n	800a9c2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a9be:	f7f7 fb1f 	bl	8002000 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a9c2:	490c      	ldr	r1, [pc, #48]	; (800a9f4 <MX_USB_Device_Init+0x5c>)
 800a9c4:	4809      	ldr	r0, [pc, #36]	; (800a9ec <MX_USB_Device_Init+0x54>)
 800a9c6:	f7fe fe8b 	bl	80096e0 <USBD_CDC_RegisterInterface>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d001      	beq.n	800a9d4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a9d0:	f7f7 fb16 	bl	8002000 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a9d4:	4805      	ldr	r0, [pc, #20]	; (800a9ec <MX_USB_Device_Init+0x54>)
 800a9d6:	f7fe ff46 	bl	8009866 <USBD_Start>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a9e0:	f7f7 fb0e 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a9e4:	bf00      	nop
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	20000160 	.word	0x20000160
 800a9ec:	20000724 	.word	0x20000724
 800a9f0:	20000048 	.word	0x20000048
 800a9f4:	2000014c 	.word	0x2000014c

0800a9f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	4905      	ldr	r1, [pc, #20]	; (800aa14 <CDC_Init_FS+0x1c>)
 800aa00:	4805      	ldr	r0, [pc, #20]	; (800aa18 <CDC_Init_FS+0x20>)
 800aa02:	f7fe fe82 	bl	800970a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aa06:	4905      	ldr	r1, [pc, #20]	; (800aa1c <CDC_Init_FS+0x24>)
 800aa08:	4803      	ldr	r0, [pc, #12]	; (800aa18 <CDC_Init_FS+0x20>)
 800aa0a:	f7fe fe97 	bl	800973c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aa0e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	20000ddc 	.word	0x20000ddc
 800aa18:	20000724 	.word	0x20000724
 800aa1c:	200009f4 	.word	0x200009f4

0800aa20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aa20:	b480      	push	{r7}
 800aa22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aa24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	4603      	mov	r3, r0
 800aa38:	6039      	str	r1, [r7, #0]
 800aa3a:	71fb      	strb	r3, [r7, #7]
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aa40:	79fb      	ldrb	r3, [r7, #7]
 800aa42:	2b23      	cmp	r3, #35	; 0x23
 800aa44:	d84a      	bhi.n	800aadc <CDC_Control_FS+0xac>
 800aa46:	a201      	add	r2, pc, #4	; (adr r2, 800aa4c <CDC_Control_FS+0x1c>)
 800aa48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa4c:	0800aadd 	.word	0x0800aadd
 800aa50:	0800aadd 	.word	0x0800aadd
 800aa54:	0800aadd 	.word	0x0800aadd
 800aa58:	0800aadd 	.word	0x0800aadd
 800aa5c:	0800aadd 	.word	0x0800aadd
 800aa60:	0800aadd 	.word	0x0800aadd
 800aa64:	0800aadd 	.word	0x0800aadd
 800aa68:	0800aadd 	.word	0x0800aadd
 800aa6c:	0800aadd 	.word	0x0800aadd
 800aa70:	0800aadd 	.word	0x0800aadd
 800aa74:	0800aadd 	.word	0x0800aadd
 800aa78:	0800aadd 	.word	0x0800aadd
 800aa7c:	0800aadd 	.word	0x0800aadd
 800aa80:	0800aadd 	.word	0x0800aadd
 800aa84:	0800aadd 	.word	0x0800aadd
 800aa88:	0800aadd 	.word	0x0800aadd
 800aa8c:	0800aadd 	.word	0x0800aadd
 800aa90:	0800aadd 	.word	0x0800aadd
 800aa94:	0800aadd 	.word	0x0800aadd
 800aa98:	0800aadd 	.word	0x0800aadd
 800aa9c:	0800aadd 	.word	0x0800aadd
 800aaa0:	0800aadd 	.word	0x0800aadd
 800aaa4:	0800aadd 	.word	0x0800aadd
 800aaa8:	0800aadd 	.word	0x0800aadd
 800aaac:	0800aadd 	.word	0x0800aadd
 800aab0:	0800aadd 	.word	0x0800aadd
 800aab4:	0800aadd 	.word	0x0800aadd
 800aab8:	0800aadd 	.word	0x0800aadd
 800aabc:	0800aadd 	.word	0x0800aadd
 800aac0:	0800aadd 	.word	0x0800aadd
 800aac4:	0800aadd 	.word	0x0800aadd
 800aac8:	0800aadd 	.word	0x0800aadd
 800aacc:	0800aadd 	.word	0x0800aadd
 800aad0:	0800aadd 	.word	0x0800aadd
 800aad4:	0800aadd 	.word	0x0800aadd
 800aad8:	0800aadd 	.word	0x0800aadd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aadc:	bf00      	nop
  }

  return (USBD_OK);
 800aade:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aaf6:	6879      	ldr	r1, [r7, #4]
 800aaf8:	4807      	ldr	r0, [pc, #28]	; (800ab18 <CDC_Receive_FS+0x2c>)
 800aafa:	f7fe fe1f 	bl	800973c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aafe:	4806      	ldr	r0, [pc, #24]	; (800ab18 <CDC_Receive_FS+0x2c>)
 800ab00:	f7fe fe30 	bl	8009764 <USBD_CDC_ReceivePacket>

  // ADDED
  CDC_On_Receive(Buf, Len);
 800ab04:	6839      	ldr	r1, [r7, #0]
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f7f6 fd42 	bl	8001590 <CDC_On_Receive>
  //CDC_Transmit_FS(Buf, *Len);
  // ADDED

  return (USBD_OK);
 800ab0c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	20000724 	.word	0x20000724

0800ab1c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b087      	sub	sp, #28
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	4613      	mov	r3, r2
 800ab28:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ab2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	371c      	adds	r7, #28
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
	...

0800ab40 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	4603      	mov	r3, r0
 800ab48:	6039      	str	r1, [r7, #0]
 800ab4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	2212      	movs	r2, #18
 800ab50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ab52:	4b03      	ldr	r3, [pc, #12]	; (800ab60 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr
 800ab60:	20000180 	.word	0x20000180

0800ab64 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	6039      	str	r1, [r7, #0]
 800ab6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	2204      	movs	r2, #4
 800ab74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ab76:	4b03      	ldr	r3, [pc, #12]	; (800ab84 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr
 800ab84:	20000194 	.word	0x20000194

0800ab88 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	4603      	mov	r3, r0
 800ab90:	6039      	str	r1, [r7, #0]
 800ab92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab94:	79fb      	ldrb	r3, [r7, #7]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d105      	bne.n	800aba6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ab9a:	683a      	ldr	r2, [r7, #0]
 800ab9c:	4907      	ldr	r1, [pc, #28]	; (800abbc <USBD_CDC_ProductStrDescriptor+0x34>)
 800ab9e:	4808      	ldr	r0, [pc, #32]	; (800abc0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800aba0:	f7ff fe19 	bl	800a7d6 <USBD_GetString>
 800aba4:	e004      	b.n	800abb0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800aba6:	683a      	ldr	r2, [r7, #0]
 800aba8:	4904      	ldr	r1, [pc, #16]	; (800abbc <USBD_CDC_ProductStrDescriptor+0x34>)
 800abaa:	4805      	ldr	r0, [pc, #20]	; (800abc0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800abac:	f7ff fe13 	bl	800a7d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800abb0:	4b02      	ldr	r3, [pc, #8]	; (800abbc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3708      	adds	r7, #8
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	200011c4 	.word	0x200011c4
 800abc0:	0800c468 	.word	0x0800c468

0800abc4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	4603      	mov	r3, r0
 800abcc:	6039      	str	r1, [r7, #0]
 800abce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800abd0:	683a      	ldr	r2, [r7, #0]
 800abd2:	4904      	ldr	r1, [pc, #16]	; (800abe4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800abd4:	4804      	ldr	r0, [pc, #16]	; (800abe8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800abd6:	f7ff fdfe 	bl	800a7d6 <USBD_GetString>
  return USBD_StrDesc;
 800abda:	4b02      	ldr	r3, [pc, #8]	; (800abe4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	200011c4 	.word	0x200011c4
 800abe8:	0800c480 	.word	0x0800c480

0800abec <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	4603      	mov	r3, r0
 800abf4:	6039      	str	r1, [r7, #0]
 800abf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	221a      	movs	r2, #26
 800abfc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800abfe:	f000 f843 	bl	800ac88 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ac02:	4b02      	ldr	r3, [pc, #8]	; (800ac0c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3708      	adds	r7, #8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	20000198 	.word	0x20000198

0800ac10 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	4603      	mov	r3, r0
 800ac18:	6039      	str	r1, [r7, #0]
 800ac1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac1c:	79fb      	ldrb	r3, [r7, #7]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d105      	bne.n	800ac2e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	4907      	ldr	r1, [pc, #28]	; (800ac44 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ac26:	4808      	ldr	r0, [pc, #32]	; (800ac48 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ac28:	f7ff fdd5 	bl	800a7d6 <USBD_GetString>
 800ac2c:	e004      	b.n	800ac38 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ac2e:	683a      	ldr	r2, [r7, #0]
 800ac30:	4904      	ldr	r1, [pc, #16]	; (800ac44 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ac32:	4805      	ldr	r0, [pc, #20]	; (800ac48 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ac34:	f7ff fdcf 	bl	800a7d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac38:	4b02      	ldr	r3, [pc, #8]	; (800ac44 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	200011c4 	.word	0x200011c4
 800ac48:	0800c494 	.word	0x0800c494

0800ac4c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	4603      	mov	r3, r0
 800ac54:	6039      	str	r1, [r7, #0]
 800ac56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac58:	79fb      	ldrb	r3, [r7, #7]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d105      	bne.n	800ac6a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ac5e:	683a      	ldr	r2, [r7, #0]
 800ac60:	4907      	ldr	r1, [pc, #28]	; (800ac80 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ac62:	4808      	ldr	r0, [pc, #32]	; (800ac84 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ac64:	f7ff fdb7 	bl	800a7d6 <USBD_GetString>
 800ac68:	e004      	b.n	800ac74 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	4904      	ldr	r1, [pc, #16]	; (800ac80 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ac6e:	4805      	ldr	r0, [pc, #20]	; (800ac84 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ac70:	f7ff fdb1 	bl	800a7d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac74:	4b02      	ldr	r3, [pc, #8]	; (800ac80 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	200011c4 	.word	0x200011c4
 800ac84:	0800c4a0 	.word	0x0800c4a0

0800ac88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ac8e:	4b0f      	ldr	r3, [pc, #60]	; (800accc <Get_SerialNum+0x44>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ac94:	4b0e      	ldr	r3, [pc, #56]	; (800acd0 <Get_SerialNum+0x48>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ac9a:	4b0e      	ldr	r3, [pc, #56]	; (800acd4 <Get_SerialNum+0x4c>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4413      	add	r3, r2
 800aca6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d009      	beq.n	800acc2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800acae:	2208      	movs	r2, #8
 800acb0:	4909      	ldr	r1, [pc, #36]	; (800acd8 <Get_SerialNum+0x50>)
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f000 f814 	bl	800ace0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800acb8:	2204      	movs	r2, #4
 800acba:	4908      	ldr	r1, [pc, #32]	; (800acdc <Get_SerialNum+0x54>)
 800acbc:	68b8      	ldr	r0, [r7, #8]
 800acbe:	f000 f80f 	bl	800ace0 <IntToUnicode>
  }
}
 800acc2:	bf00      	nop
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	1fff7590 	.word	0x1fff7590
 800acd0:	1fff7594 	.word	0x1fff7594
 800acd4:	1fff7598 	.word	0x1fff7598
 800acd8:	2000019a 	.word	0x2000019a
 800acdc:	200001aa 	.word	0x200001aa

0800ace0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b087      	sub	sp, #28
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	4613      	mov	r3, r2
 800acec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800acee:	2300      	movs	r3, #0
 800acf0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800acf2:	2300      	movs	r3, #0
 800acf4:	75fb      	strb	r3, [r7, #23]
 800acf6:	e027      	b.n	800ad48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	0f1b      	lsrs	r3, r3, #28
 800acfc:	2b09      	cmp	r3, #9
 800acfe:	d80b      	bhi.n	800ad18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	0f1b      	lsrs	r3, r3, #28
 800ad04:	b2da      	uxtb	r2, r3
 800ad06:	7dfb      	ldrb	r3, [r7, #23]
 800ad08:	005b      	lsls	r3, r3, #1
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	440b      	add	r3, r1
 800ad10:	3230      	adds	r2, #48	; 0x30
 800ad12:	b2d2      	uxtb	r2, r2
 800ad14:	701a      	strb	r2, [r3, #0]
 800ad16:	e00a      	b.n	800ad2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	0f1b      	lsrs	r3, r3, #28
 800ad1c:	b2da      	uxtb	r2, r3
 800ad1e:	7dfb      	ldrb	r3, [r7, #23]
 800ad20:	005b      	lsls	r3, r3, #1
 800ad22:	4619      	mov	r1, r3
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	440b      	add	r3, r1
 800ad28:	3237      	adds	r2, #55	; 0x37
 800ad2a:	b2d2      	uxtb	r2, r2
 800ad2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	011b      	lsls	r3, r3, #4
 800ad32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ad34:	7dfb      	ldrb	r3, [r7, #23]
 800ad36:	005b      	lsls	r3, r3, #1
 800ad38:	3301      	adds	r3, #1
 800ad3a:	68ba      	ldr	r2, [r7, #8]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	2200      	movs	r2, #0
 800ad40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ad42:	7dfb      	ldrb	r3, [r7, #23]
 800ad44:	3301      	adds	r3, #1
 800ad46:	75fb      	strb	r3, [r7, #23]
 800ad48:	7dfa      	ldrb	r2, [r7, #23]
 800ad4a:	79fb      	ldrb	r3, [r7, #7]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d3d3      	bcc.n	800acf8 <IntToUnicode+0x18>
  }
}
 800ad50:	bf00      	nop
 800ad52:	371c      	adds	r7, #28
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a0d      	ldr	r2, [pc, #52]	; (800ada0 <HAL_PCD_MspInit+0x44>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d113      	bne.n	800ad96 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ad6e:	4b0d      	ldr	r3, [pc, #52]	; (800ada4 <HAL_PCD_MspInit+0x48>)
 800ad70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad72:	4a0c      	ldr	r2, [pc, #48]	; (800ada4 <HAL_PCD_MspInit+0x48>)
 800ad74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ad78:	6593      	str	r3, [r2, #88]	; 0x58
 800ad7a:	4b0a      	ldr	r3, [pc, #40]	; (800ada4 <HAL_PCD_MspInit+0x48>)
 800ad7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad82:	60fb      	str	r3, [r7, #12]
 800ad84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ad86:	2200      	movs	r2, #0
 800ad88:	2100      	movs	r1, #0
 800ad8a:	2014      	movs	r0, #20
 800ad8c:	f7f7 fce9 	bl	8002762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ad90:	2014      	movs	r0, #20
 800ad92:	f7f7 fd00 	bl	8002796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ad96:	bf00      	nop
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	40005c00 	.word	0x40005c00
 800ada4:	40021000 	.word	0x40021000

0800ada8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800adbc:	4619      	mov	r1, r3
 800adbe:	4610      	mov	r0, r2
 800adc0:	f7fe fd9c 	bl	80098fc <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800adc4:	bf00      	nop
 800adc6:	3708      	adds	r7, #8
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	460b      	mov	r3, r1
 800add6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800adde:	78fa      	ldrb	r2, [r7, #3]
 800ade0:	6879      	ldr	r1, [r7, #4]
 800ade2:	4613      	mov	r3, r2
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	4413      	add	r3, r2
 800ade8:	00db      	lsls	r3, r3, #3
 800adea:	440b      	add	r3, r1
 800adec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	78fb      	ldrb	r3, [r7, #3]
 800adf4:	4619      	mov	r1, r3
 800adf6:	f7fe fdd4 	bl	80099a2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800adfa:	bf00      	nop
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b082      	sub	sp, #8
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ae14:	78fa      	ldrb	r2, [r7, #3]
 800ae16:	6879      	ldr	r1, [r7, #4]
 800ae18:	4613      	mov	r3, r2
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4413      	add	r3, r2
 800ae1e:	00db      	lsls	r3, r3, #3
 800ae20:	440b      	add	r3, r1
 800ae22:	333c      	adds	r3, #60	; 0x3c
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	78fb      	ldrb	r3, [r7, #3]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	f7fe fe1d 	bl	8009a68 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ae2e:	bf00      	nop
 800ae30:	3708      	adds	r7, #8
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b082      	sub	sp, #8
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7fe ff21 	bl	8009c8c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ae4a:	bf00      	nop
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b084      	sub	sp, #16
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d001      	beq.n	800ae6a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ae66:	f7f7 f8cb 	bl	8002000 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ae70:	7bfa      	ldrb	r2, [r7, #15]
 800ae72:	4611      	mov	r1, r2
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7fe fece 	bl	8009c16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7fe fe87 	bl	8009b94 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ae86:	bf00      	nop
 800ae88:	3710      	adds	r7, #16
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
	...

0800ae90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fe fec9 	bl	8009c36 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	699b      	ldr	r3, [r3, #24]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d005      	beq.n	800aeb8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aeac:	4b04      	ldr	r3, [pc, #16]	; (800aec0 <HAL_PCD_SuspendCallback+0x30>)
 800aeae:	691b      	ldr	r3, [r3, #16]
 800aeb0:	4a03      	ldr	r2, [pc, #12]	; (800aec0 <HAL_PCD_SuspendCallback+0x30>)
 800aeb2:	f043 0306 	orr.w	r3, r3, #6
 800aeb6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800aeb8:	bf00      	nop
 800aeba:	3708      	adds	r7, #8
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	e000ed00 	.word	0xe000ed00

0800aec4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	699b      	ldr	r3, [r3, #24]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d007      	beq.n	800aee4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aed4:	4b08      	ldr	r3, [pc, #32]	; (800aef8 <HAL_PCD_ResumeCallback+0x34>)
 800aed6:	691b      	ldr	r3, [r3, #16]
 800aed8:	4a07      	ldr	r2, [pc, #28]	; (800aef8 <HAL_PCD_ResumeCallback+0x34>)
 800aeda:	f023 0306 	bic.w	r3, r3, #6
 800aede:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800aee0:	f000 f9fa 	bl	800b2d8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fe feb8 	bl	8009c60 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800aef0:	bf00      	nop
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	e000ed00 	.word	0xe000ed00

0800aefc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800af04:	4a2b      	ldr	r2, [pc, #172]	; (800afb4 <USBD_LL_Init+0xb8>)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4a29      	ldr	r2, [pc, #164]	; (800afb4 <USBD_LL_Init+0xb8>)
 800af10:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800af14:	4b27      	ldr	r3, [pc, #156]	; (800afb4 <USBD_LL_Init+0xb8>)
 800af16:	4a28      	ldr	r2, [pc, #160]	; (800afb8 <USBD_LL_Init+0xbc>)
 800af18:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800af1a:	4b26      	ldr	r3, [pc, #152]	; (800afb4 <USBD_LL_Init+0xb8>)
 800af1c:	2208      	movs	r2, #8
 800af1e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800af20:	4b24      	ldr	r3, [pc, #144]	; (800afb4 <USBD_LL_Init+0xb8>)
 800af22:	2202      	movs	r2, #2
 800af24:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af26:	4b23      	ldr	r3, [pc, #140]	; (800afb4 <USBD_LL_Init+0xb8>)
 800af28:	2202      	movs	r2, #2
 800af2a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800af2c:	4b21      	ldr	r3, [pc, #132]	; (800afb4 <USBD_LL_Init+0xb8>)
 800af2e:	2200      	movs	r2, #0
 800af30:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800af32:	4b20      	ldr	r3, [pc, #128]	; (800afb4 <USBD_LL_Init+0xb8>)
 800af34:	2200      	movs	r2, #0
 800af36:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800af38:	4b1e      	ldr	r3, [pc, #120]	; (800afb4 <USBD_LL_Init+0xb8>)
 800af3a:	2200      	movs	r2, #0
 800af3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800af3e:	4b1d      	ldr	r3, [pc, #116]	; (800afb4 <USBD_LL_Init+0xb8>)
 800af40:	2200      	movs	r2, #0
 800af42:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800af44:	481b      	ldr	r0, [pc, #108]	; (800afb4 <USBD_LL_Init+0xb8>)
 800af46:	f7f8 f84d 	bl	8002fe4 <HAL_PCD_Init>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d001      	beq.n	800af54 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800af50:	f7f7 f856 	bl	8002000 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800af5a:	2318      	movs	r3, #24
 800af5c:	2200      	movs	r2, #0
 800af5e:	2100      	movs	r1, #0
 800af60:	f7f9 fb3b 	bl	80045da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800af6a:	2358      	movs	r3, #88	; 0x58
 800af6c:	2200      	movs	r2, #0
 800af6e:	2180      	movs	r1, #128	; 0x80
 800af70:	f7f9 fb33 	bl	80045da <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800af7a:	23c0      	movs	r3, #192	; 0xc0
 800af7c:	2200      	movs	r2, #0
 800af7e:	2181      	movs	r1, #129	; 0x81
 800af80:	f7f9 fb2b 	bl	80045da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800af8a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800af8e:	2200      	movs	r2, #0
 800af90:	2101      	movs	r1, #1
 800af92:	f7f9 fb22 	bl	80045da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800af9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afa0:	2200      	movs	r2, #0
 800afa2:	2182      	movs	r1, #130	; 0x82
 800afa4:	f7f9 fb19 	bl	80045da <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3708      	adds	r7, #8
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	200013c4 	.word	0x200013c4
 800afb8:	40005c00 	.word	0x40005c00

0800afbc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afc4:	2300      	movs	r3, #0
 800afc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afc8:	2300      	movs	r3, #0
 800afca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7f8 f8eb 	bl	80031ae <HAL_PCD_Start>
 800afd8:	4603      	mov	r3, r0
 800afda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afdc:	7bfb      	ldrb	r3, [r7, #15]
 800afde:	4618      	mov	r0, r3
 800afe0:	f000 f980 	bl	800b2e4 <USBD_Get_USB_Status>
 800afe4:	4603      	mov	r3, r0
 800afe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afe8:	7bbb      	ldrb	r3, [r7, #14]
}
 800afea:	4618      	mov	r0, r3
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}

0800aff2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b084      	sub	sp, #16
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
 800affa:	4608      	mov	r0, r1
 800affc:	4611      	mov	r1, r2
 800affe:	461a      	mov	r2, r3
 800b000:	4603      	mov	r3, r0
 800b002:	70fb      	strb	r3, [r7, #3]
 800b004:	460b      	mov	r3, r1
 800b006:	70bb      	strb	r3, [r7, #2]
 800b008:	4613      	mov	r3, r2
 800b00a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b00c:	2300      	movs	r3, #0
 800b00e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b010:	2300      	movs	r3, #0
 800b012:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b01a:	78bb      	ldrb	r3, [r7, #2]
 800b01c:	883a      	ldrh	r2, [r7, #0]
 800b01e:	78f9      	ldrb	r1, [r7, #3]
 800b020:	f7f8 fa5a 	bl	80034d8 <HAL_PCD_EP_Open>
 800b024:	4603      	mov	r3, r0
 800b026:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b028:	7bfb      	ldrb	r3, [r7, #15]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f000 f95a 	bl	800b2e4 <USBD_Get_USB_Status>
 800b030:	4603      	mov	r3, r0
 800b032:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b034:	7bbb      	ldrb	r3, [r7, #14]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b084      	sub	sp, #16
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
 800b046:	460b      	mov	r3, r1
 800b048:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b04a:	2300      	movs	r3, #0
 800b04c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b04e:	2300      	movs	r3, #0
 800b050:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b058:	78fa      	ldrb	r2, [r7, #3]
 800b05a:	4611      	mov	r1, r2
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7f8 faa1 	bl	80035a4 <HAL_PCD_EP_Close>
 800b062:	4603      	mov	r3, r0
 800b064:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b066:	7bfb      	ldrb	r3, [r7, #15]
 800b068:	4618      	mov	r0, r3
 800b06a:	f000 f93b 	bl	800b2e4 <USBD_Get_USB_Status>
 800b06e:	4603      	mov	r3, r0
 800b070:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b072:	7bbb      	ldrb	r3, [r7, #14]
}
 800b074:	4618      	mov	r0, r3
 800b076:	3710      	adds	r7, #16
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	460b      	mov	r3, r1
 800b086:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b088:	2300      	movs	r3, #0
 800b08a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b096:	78fa      	ldrb	r2, [r7, #3]
 800b098:	4611      	mov	r1, r2
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7f8 fb62 	bl	8003764 <HAL_PCD_EP_SetStall>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 f91c 	bl	800b2e4 <USBD_Get_USB_Status>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b084      	sub	sp, #16
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b0d4:	78fa      	ldrb	r2, [r7, #3]
 800b0d6:	4611      	mov	r1, r2
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7f8 fba3 	bl	8003824 <HAL_PCD_EP_ClrStall>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0e2:	7bfb      	ldrb	r3, [r7, #15]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f000 f8fd 	bl	800b2e4 <USBD_Get_USB_Status>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b085      	sub	sp, #20
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	460b      	mov	r3, r1
 800b102:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b10a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b10c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b110:	2b00      	cmp	r3, #0
 800b112:	da0c      	bge.n	800b12e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b114:	78fb      	ldrb	r3, [r7, #3]
 800b116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b11a:	68f9      	ldr	r1, [r7, #12]
 800b11c:	1c5a      	adds	r2, r3, #1
 800b11e:	4613      	mov	r3, r2
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	4413      	add	r3, r2
 800b124:	00db      	lsls	r3, r3, #3
 800b126:	440b      	add	r3, r1
 800b128:	3302      	adds	r3, #2
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	e00b      	b.n	800b146 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b12e:	78fb      	ldrb	r3, [r7, #3]
 800b130:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b134:	68f9      	ldr	r1, [r7, #12]
 800b136:	4613      	mov	r3, r2
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	4413      	add	r3, r2
 800b13c:	00db      	lsls	r3, r3, #3
 800b13e:	440b      	add	r3, r1
 800b140:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b144:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b146:	4618      	mov	r0, r3
 800b148:	3714      	adds	r7, #20
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr

0800b152 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b152:	b580      	push	{r7, lr}
 800b154:	b084      	sub	sp, #16
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
 800b15a:	460b      	mov	r3, r1
 800b15c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b15e:	2300      	movs	r3, #0
 800b160:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b162:	2300      	movs	r3, #0
 800b164:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b16c:	78fa      	ldrb	r2, [r7, #3]
 800b16e:	4611      	mov	r1, r2
 800b170:	4618      	mov	r0, r3
 800b172:	f7f8 f98c 	bl	800348e <HAL_PCD_SetAddress>
 800b176:	4603      	mov	r3, r0
 800b178:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b17a:	7bfb      	ldrb	r3, [r7, #15]
 800b17c:	4618      	mov	r0, r3
 800b17e:	f000 f8b1 	bl	800b2e4 <USBD_Get_USB_Status>
 800b182:	4603      	mov	r3, r0
 800b184:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b186:	7bbb      	ldrb	r3, [r7, #14]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b086      	sub	sp, #24
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	607a      	str	r2, [r7, #4]
 800b19a:	603b      	str	r3, [r7, #0]
 800b19c:	460b      	mov	r3, r1
 800b19e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b1ae:	7af9      	ldrb	r1, [r7, #11]
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	f7f8 fa93 	bl	80036de <HAL_PCD_EP_Transmit>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1bc:	7dfb      	ldrb	r3, [r7, #23]
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f000 f890 	bl	800b2e4 <USBD_Get_USB_Status>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3718      	adds	r7, #24
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b086      	sub	sp, #24
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	60f8      	str	r0, [r7, #12]
 800b1da:	607a      	str	r2, [r7, #4]
 800b1dc:	603b      	str	r3, [r7, #0]
 800b1de:	460b      	mov	r3, r1
 800b1e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b1f0:	7af9      	ldrb	r1, [r7, #11]
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	f7f8 fa1d 	bl	8003634 <HAL_PCD_EP_Receive>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1fe:	7dfb      	ldrb	r3, [r7, #23]
 800b200:	4618      	mov	r0, r3
 800b202:	f000 f86f 	bl	800b2e4 <USBD_Get_USB_Status>
 800b206:	4603      	mov	r3, r0
 800b208:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b20a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3718      	adds	r7, #24
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	460b      	mov	r3, r1
 800b21e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b226:	78fa      	ldrb	r2, [r7, #3]
 800b228:	4611      	mov	r1, r2
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7f8 fa3f 	bl	80036ae <HAL_PCD_EP_GetRxCount>
 800b230:	4603      	mov	r3, r0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3708      	adds	r7, #8
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
	...

0800b23c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	460b      	mov	r3, r1
 800b246:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b248:	78fb      	ldrb	r3, [r7, #3]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d002      	beq.n	800b254 <HAL_PCDEx_LPM_Callback+0x18>
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d013      	beq.n	800b27a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b252:	e023      	b.n	800b29c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	699b      	ldr	r3, [r3, #24]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d007      	beq.n	800b26c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b25c:	f000 f83c 	bl	800b2d8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b260:	4b10      	ldr	r3, [pc, #64]	; (800b2a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800b262:	691b      	ldr	r3, [r3, #16]
 800b264:	4a0f      	ldr	r2, [pc, #60]	; (800b2a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800b266:	f023 0306 	bic.w	r3, r3, #6
 800b26a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b272:	4618      	mov	r0, r3
 800b274:	f7fe fcf4 	bl	8009c60 <USBD_LL_Resume>
    break;
 800b278:	e010      	b.n	800b29c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b280:	4618      	mov	r0, r3
 800b282:	f7fe fcd8 	bl	8009c36 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	699b      	ldr	r3, [r3, #24]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d005      	beq.n	800b29a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b28e:	4b05      	ldr	r3, [pc, #20]	; (800b2a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800b290:	691b      	ldr	r3, [r3, #16]
 800b292:	4a04      	ldr	r2, [pc, #16]	; (800b2a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800b294:	f043 0306 	orr.w	r3, r3, #6
 800b298:	6113      	str	r3, [r2, #16]
    break;
 800b29a:	bf00      	nop
}
 800b29c:	bf00      	nop
 800b29e:	3708      	adds	r7, #8
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	e000ed00 	.word	0xe000ed00

0800b2a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b2b0:	4b03      	ldr	r3, [pc, #12]	; (800b2c0 <USBD_static_malloc+0x18>)
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	370c      	adds	r7, #12
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	20000270 	.word	0x20000270

0800b2c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]

}
 800b2cc:	bf00      	nop
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b2dc:	f7f5 fd88 	bl	8000df0 <SystemClock_Config>
}
 800b2e0:	bf00      	nop
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b2f2:	79fb      	ldrb	r3, [r7, #7]
 800b2f4:	2b03      	cmp	r3, #3
 800b2f6:	d817      	bhi.n	800b328 <USBD_Get_USB_Status+0x44>
 800b2f8:	a201      	add	r2, pc, #4	; (adr r2, 800b300 <USBD_Get_USB_Status+0x1c>)
 800b2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2fe:	bf00      	nop
 800b300:	0800b311 	.word	0x0800b311
 800b304:	0800b317 	.word	0x0800b317
 800b308:	0800b31d 	.word	0x0800b31d
 800b30c:	0800b323 	.word	0x0800b323
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b310:	2300      	movs	r3, #0
 800b312:	73fb      	strb	r3, [r7, #15]
    break;
 800b314:	e00b      	b.n	800b32e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b316:	2303      	movs	r3, #3
 800b318:	73fb      	strb	r3, [r7, #15]
    break;
 800b31a:	e008      	b.n	800b32e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b31c:	2301      	movs	r3, #1
 800b31e:	73fb      	strb	r3, [r7, #15]
    break;
 800b320:	e005      	b.n	800b32e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b322:	2303      	movs	r3, #3
 800b324:	73fb      	strb	r3, [r7, #15]
    break;
 800b326:	e002      	b.n	800b32e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b328:	2303      	movs	r3, #3
 800b32a:	73fb      	strb	r3, [r7, #15]
    break;
 800b32c:	bf00      	nop
  }
  return usb_status;
 800b32e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b330:	4618      	mov	r0, r3
 800b332:	3714      	adds	r7, #20
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <__errno>:
 800b33c:	4b01      	ldr	r3, [pc, #4]	; (800b344 <__errno+0x8>)
 800b33e:	6818      	ldr	r0, [r3, #0]
 800b340:	4770      	bx	lr
 800b342:	bf00      	nop
 800b344:	200001b4 	.word	0x200001b4

0800b348 <__libc_init_array>:
 800b348:	b570      	push	{r4, r5, r6, lr}
 800b34a:	4e0d      	ldr	r6, [pc, #52]	; (800b380 <__libc_init_array+0x38>)
 800b34c:	4c0d      	ldr	r4, [pc, #52]	; (800b384 <__libc_init_array+0x3c>)
 800b34e:	1ba4      	subs	r4, r4, r6
 800b350:	10a4      	asrs	r4, r4, #2
 800b352:	2500      	movs	r5, #0
 800b354:	42a5      	cmp	r5, r4
 800b356:	d109      	bne.n	800b36c <__libc_init_array+0x24>
 800b358:	4e0b      	ldr	r6, [pc, #44]	; (800b388 <__libc_init_array+0x40>)
 800b35a:	4c0c      	ldr	r4, [pc, #48]	; (800b38c <__libc_init_array+0x44>)
 800b35c:	f001 f876 	bl	800c44c <_init>
 800b360:	1ba4      	subs	r4, r4, r6
 800b362:	10a4      	asrs	r4, r4, #2
 800b364:	2500      	movs	r5, #0
 800b366:	42a5      	cmp	r5, r4
 800b368:	d105      	bne.n	800b376 <__libc_init_array+0x2e>
 800b36a:	bd70      	pop	{r4, r5, r6, pc}
 800b36c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b370:	4798      	blx	r3
 800b372:	3501      	adds	r5, #1
 800b374:	e7ee      	b.n	800b354 <__libc_init_array+0xc>
 800b376:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b37a:	4798      	blx	r3
 800b37c:	3501      	adds	r5, #1
 800b37e:	e7f2      	b.n	800b366 <__libc_init_array+0x1e>
 800b380:	0800c508 	.word	0x0800c508
 800b384:	0800c508 	.word	0x0800c508
 800b388:	0800c508 	.word	0x0800c508
 800b38c:	0800c50c 	.word	0x0800c50c

0800b390 <memset>:
 800b390:	4402      	add	r2, r0
 800b392:	4603      	mov	r3, r0
 800b394:	4293      	cmp	r3, r2
 800b396:	d100      	bne.n	800b39a <memset+0xa>
 800b398:	4770      	bx	lr
 800b39a:	f803 1b01 	strb.w	r1, [r3], #1
 800b39e:	e7f9      	b.n	800b394 <memset+0x4>

0800b3a0 <pow>:
 800b3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a4:	ed2d 8b04 	vpush	{d8-d9}
 800b3a8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800b67c <pow+0x2dc>
 800b3ac:	b08d      	sub	sp, #52	; 0x34
 800b3ae:	ec57 6b10 	vmov	r6, r7, d0
 800b3b2:	ec55 4b11 	vmov	r4, r5, d1
 800b3b6:	f000 f963 	bl	800b680 <__ieee754_pow>
 800b3ba:	f999 3000 	ldrsb.w	r3, [r9]
 800b3be:	9300      	str	r3, [sp, #0]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	eeb0 8a40 	vmov.f32	s16, s0
 800b3c6:	eef0 8a60 	vmov.f32	s17, s1
 800b3ca:	46c8      	mov	r8, r9
 800b3cc:	d05f      	beq.n	800b48e <pow+0xee>
 800b3ce:	4622      	mov	r2, r4
 800b3d0:	462b      	mov	r3, r5
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	4629      	mov	r1, r5
 800b3d6:	f7f5 fb75 	bl	8000ac4 <__aeabi_dcmpun>
 800b3da:	4683      	mov	fp, r0
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d156      	bne.n	800b48e <pow+0xee>
 800b3e0:	4632      	mov	r2, r6
 800b3e2:	463b      	mov	r3, r7
 800b3e4:	4630      	mov	r0, r6
 800b3e6:	4639      	mov	r1, r7
 800b3e8:	f7f5 fb6c 	bl	8000ac4 <__aeabi_dcmpun>
 800b3ec:	9001      	str	r0, [sp, #4]
 800b3ee:	b1e8      	cbz	r0, 800b42c <pow+0x8c>
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	4629      	mov	r1, r5
 800b3f8:	f7f5 fb32 	bl	8000a60 <__aeabi_dcmpeq>
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	d046      	beq.n	800b48e <pow+0xee>
 800b400:	2301      	movs	r3, #1
 800b402:	9302      	str	r3, [sp, #8]
 800b404:	4b96      	ldr	r3, [pc, #600]	; (800b660 <pow+0x2c0>)
 800b406:	9303      	str	r3, [sp, #12]
 800b408:	4b96      	ldr	r3, [pc, #600]	; (800b664 <pow+0x2c4>)
 800b40a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b40e:	2200      	movs	r2, #0
 800b410:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b414:	9b00      	ldr	r3, [sp, #0]
 800b416:	2b02      	cmp	r3, #2
 800b418:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b41c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b420:	d033      	beq.n	800b48a <pow+0xea>
 800b422:	a802      	add	r0, sp, #8
 800b424:	f000 fefb 	bl	800c21e <matherr>
 800b428:	bb48      	cbnz	r0, 800b47e <pow+0xde>
 800b42a:	e05d      	b.n	800b4e8 <pow+0x148>
 800b42c:	f04f 0a00 	mov.w	sl, #0
 800b430:	f04f 0b00 	mov.w	fp, #0
 800b434:	4652      	mov	r2, sl
 800b436:	465b      	mov	r3, fp
 800b438:	4630      	mov	r0, r6
 800b43a:	4639      	mov	r1, r7
 800b43c:	f7f5 fb10 	bl	8000a60 <__aeabi_dcmpeq>
 800b440:	ec4b ab19 	vmov	d9, sl, fp
 800b444:	2800      	cmp	r0, #0
 800b446:	d054      	beq.n	800b4f2 <pow+0x152>
 800b448:	4652      	mov	r2, sl
 800b44a:	465b      	mov	r3, fp
 800b44c:	4620      	mov	r0, r4
 800b44e:	4629      	mov	r1, r5
 800b450:	f7f5 fb06 	bl	8000a60 <__aeabi_dcmpeq>
 800b454:	4680      	mov	r8, r0
 800b456:	b318      	cbz	r0, 800b4a0 <pow+0x100>
 800b458:	2301      	movs	r3, #1
 800b45a:	9302      	str	r3, [sp, #8]
 800b45c:	4b80      	ldr	r3, [pc, #512]	; (800b660 <pow+0x2c0>)
 800b45e:	9303      	str	r3, [sp, #12]
 800b460:	9b01      	ldr	r3, [sp, #4]
 800b462:	930a      	str	r3, [sp, #40]	; 0x28
 800b464:	9b00      	ldr	r3, [sp, #0]
 800b466:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b46a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b46e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d0d5      	beq.n	800b422 <pow+0x82>
 800b476:	4b7b      	ldr	r3, [pc, #492]	; (800b664 <pow+0x2c4>)
 800b478:	2200      	movs	r2, #0
 800b47a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b47e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b480:	b11b      	cbz	r3, 800b48a <pow+0xea>
 800b482:	f7ff ff5b 	bl	800b33c <__errno>
 800b486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b488:	6003      	str	r3, [r0, #0]
 800b48a:	ed9d 8b08 	vldr	d8, [sp, #32]
 800b48e:	eeb0 0a48 	vmov.f32	s0, s16
 800b492:	eef0 0a68 	vmov.f32	s1, s17
 800b496:	b00d      	add	sp, #52	; 0x34
 800b498:	ecbd 8b04 	vpop	{d8-d9}
 800b49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a0:	ec45 4b10 	vmov	d0, r4, r5
 800b4a4:	f000 feb3 	bl	800c20e <finite>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	d0f0      	beq.n	800b48e <pow+0xee>
 800b4ac:	4652      	mov	r2, sl
 800b4ae:	465b      	mov	r3, fp
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	f7f5 fade 	bl	8000a74 <__aeabi_dcmplt>
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	d0e8      	beq.n	800b48e <pow+0xee>
 800b4bc:	2301      	movs	r3, #1
 800b4be:	9302      	str	r3, [sp, #8]
 800b4c0:	4b67      	ldr	r3, [pc, #412]	; (800b660 <pow+0x2c0>)
 800b4c2:	9303      	str	r3, [sp, #12]
 800b4c4:	f999 3000 	ldrsb.w	r3, [r9]
 800b4c8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800b4cc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b4d0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b4d4:	b913      	cbnz	r3, 800b4dc <pow+0x13c>
 800b4d6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b4da:	e7a2      	b.n	800b422 <pow+0x82>
 800b4dc:	4962      	ldr	r1, [pc, #392]	; (800b668 <pow+0x2c8>)
 800b4de:	2000      	movs	r0, #0
 800b4e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b4e4:	2b02      	cmp	r3, #2
 800b4e6:	d19c      	bne.n	800b422 <pow+0x82>
 800b4e8:	f7ff ff28 	bl	800b33c <__errno>
 800b4ec:	2321      	movs	r3, #33	; 0x21
 800b4ee:	6003      	str	r3, [r0, #0]
 800b4f0:	e7c5      	b.n	800b47e <pow+0xde>
 800b4f2:	eeb0 0a48 	vmov.f32	s0, s16
 800b4f6:	eef0 0a68 	vmov.f32	s1, s17
 800b4fa:	f000 fe88 	bl	800c20e <finite>
 800b4fe:	9000      	str	r0, [sp, #0]
 800b500:	2800      	cmp	r0, #0
 800b502:	f040 8081 	bne.w	800b608 <pow+0x268>
 800b506:	ec47 6b10 	vmov	d0, r6, r7
 800b50a:	f000 fe80 	bl	800c20e <finite>
 800b50e:	2800      	cmp	r0, #0
 800b510:	d07a      	beq.n	800b608 <pow+0x268>
 800b512:	ec45 4b10 	vmov	d0, r4, r5
 800b516:	f000 fe7a 	bl	800c20e <finite>
 800b51a:	2800      	cmp	r0, #0
 800b51c:	d074      	beq.n	800b608 <pow+0x268>
 800b51e:	ec53 2b18 	vmov	r2, r3, d8
 800b522:	ee18 0a10 	vmov	r0, s16
 800b526:	4619      	mov	r1, r3
 800b528:	f7f5 facc 	bl	8000ac4 <__aeabi_dcmpun>
 800b52c:	f999 9000 	ldrsb.w	r9, [r9]
 800b530:	4b4b      	ldr	r3, [pc, #300]	; (800b660 <pow+0x2c0>)
 800b532:	b1b0      	cbz	r0, 800b562 <pow+0x1c2>
 800b534:	2201      	movs	r2, #1
 800b536:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b53a:	9b00      	ldr	r3, [sp, #0]
 800b53c:	930a      	str	r3, [sp, #40]	; 0x28
 800b53e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b542:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b546:	f1b9 0f00 	cmp.w	r9, #0
 800b54a:	d0c4      	beq.n	800b4d6 <pow+0x136>
 800b54c:	4652      	mov	r2, sl
 800b54e:	465b      	mov	r3, fp
 800b550:	4650      	mov	r0, sl
 800b552:	4659      	mov	r1, fp
 800b554:	f7f5 f946 	bl	80007e4 <__aeabi_ddiv>
 800b558:	f1b9 0f02 	cmp.w	r9, #2
 800b55c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b560:	e7c1      	b.n	800b4e6 <pow+0x146>
 800b562:	2203      	movs	r2, #3
 800b564:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b568:	900a      	str	r0, [sp, #40]	; 0x28
 800b56a:	4629      	mov	r1, r5
 800b56c:	4620      	mov	r0, r4
 800b56e:	2200      	movs	r2, #0
 800b570:	4b3e      	ldr	r3, [pc, #248]	; (800b66c <pow+0x2cc>)
 800b572:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b576:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b57a:	f7f5 f809 	bl	8000590 <__aeabi_dmul>
 800b57e:	4604      	mov	r4, r0
 800b580:	460d      	mov	r5, r1
 800b582:	f1b9 0f00 	cmp.w	r9, #0
 800b586:	d124      	bne.n	800b5d2 <pow+0x232>
 800b588:	4b39      	ldr	r3, [pc, #228]	; (800b670 <pow+0x2d0>)
 800b58a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b58e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b592:	4630      	mov	r0, r6
 800b594:	4652      	mov	r2, sl
 800b596:	465b      	mov	r3, fp
 800b598:	4639      	mov	r1, r7
 800b59a:	f7f5 fa6b 	bl	8000a74 <__aeabi_dcmplt>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	d056      	beq.n	800b650 <pow+0x2b0>
 800b5a2:	ec45 4b10 	vmov	d0, r4, r5
 800b5a6:	f000 fe47 	bl	800c238 <rint>
 800b5aa:	4622      	mov	r2, r4
 800b5ac:	462b      	mov	r3, r5
 800b5ae:	ec51 0b10 	vmov	r0, r1, d0
 800b5b2:	f7f5 fa55 	bl	8000a60 <__aeabi_dcmpeq>
 800b5b6:	b920      	cbnz	r0, 800b5c2 <pow+0x222>
 800b5b8:	4b2e      	ldr	r3, [pc, #184]	; (800b674 <pow+0x2d4>)
 800b5ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b5be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b5c2:	f998 3000 	ldrsb.w	r3, [r8]
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d142      	bne.n	800b650 <pow+0x2b0>
 800b5ca:	f7ff feb7 	bl	800b33c <__errno>
 800b5ce:	2322      	movs	r3, #34	; 0x22
 800b5d0:	e78d      	b.n	800b4ee <pow+0x14e>
 800b5d2:	4b29      	ldr	r3, [pc, #164]	; (800b678 <pow+0x2d8>)
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b5da:	4630      	mov	r0, r6
 800b5dc:	4652      	mov	r2, sl
 800b5de:	465b      	mov	r3, fp
 800b5e0:	4639      	mov	r1, r7
 800b5e2:	f7f5 fa47 	bl	8000a74 <__aeabi_dcmplt>
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	d0eb      	beq.n	800b5c2 <pow+0x222>
 800b5ea:	ec45 4b10 	vmov	d0, r4, r5
 800b5ee:	f000 fe23 	bl	800c238 <rint>
 800b5f2:	4622      	mov	r2, r4
 800b5f4:	462b      	mov	r3, r5
 800b5f6:	ec51 0b10 	vmov	r0, r1, d0
 800b5fa:	f7f5 fa31 	bl	8000a60 <__aeabi_dcmpeq>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d1df      	bne.n	800b5c2 <pow+0x222>
 800b602:	2200      	movs	r2, #0
 800b604:	4b18      	ldr	r3, [pc, #96]	; (800b668 <pow+0x2c8>)
 800b606:	e7da      	b.n	800b5be <pow+0x21e>
 800b608:	2200      	movs	r2, #0
 800b60a:	2300      	movs	r3, #0
 800b60c:	ec51 0b18 	vmov	r0, r1, d8
 800b610:	f7f5 fa26 	bl	8000a60 <__aeabi_dcmpeq>
 800b614:	2800      	cmp	r0, #0
 800b616:	f43f af3a 	beq.w	800b48e <pow+0xee>
 800b61a:	ec47 6b10 	vmov	d0, r6, r7
 800b61e:	f000 fdf6 	bl	800c20e <finite>
 800b622:	2800      	cmp	r0, #0
 800b624:	f43f af33 	beq.w	800b48e <pow+0xee>
 800b628:	ec45 4b10 	vmov	d0, r4, r5
 800b62c:	f000 fdef 	bl	800c20e <finite>
 800b630:	2800      	cmp	r0, #0
 800b632:	f43f af2c 	beq.w	800b48e <pow+0xee>
 800b636:	2304      	movs	r3, #4
 800b638:	9302      	str	r3, [sp, #8]
 800b63a:	4b09      	ldr	r3, [pc, #36]	; (800b660 <pow+0x2c0>)
 800b63c:	9303      	str	r3, [sp, #12]
 800b63e:	2300      	movs	r3, #0
 800b640:	930a      	str	r3, [sp, #40]	; 0x28
 800b642:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b646:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b64a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800b64e:	e7b8      	b.n	800b5c2 <pow+0x222>
 800b650:	a802      	add	r0, sp, #8
 800b652:	f000 fde4 	bl	800c21e <matherr>
 800b656:	2800      	cmp	r0, #0
 800b658:	f47f af11 	bne.w	800b47e <pow+0xde>
 800b65c:	e7b5      	b.n	800b5ca <pow+0x22a>
 800b65e:	bf00      	nop
 800b660:	0800c4c0 	.word	0x0800c4c0
 800b664:	3ff00000 	.word	0x3ff00000
 800b668:	fff00000 	.word	0xfff00000
 800b66c:	3fe00000 	.word	0x3fe00000
 800b670:	47efffff 	.word	0x47efffff
 800b674:	c7efffff 	.word	0xc7efffff
 800b678:	7ff00000 	.word	0x7ff00000
 800b67c:	20000218 	.word	0x20000218

0800b680 <__ieee754_pow>:
 800b680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b684:	b091      	sub	sp, #68	; 0x44
 800b686:	ed8d 1b00 	vstr	d1, [sp]
 800b68a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b68e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b692:	ea58 0302 	orrs.w	r3, r8, r2
 800b696:	ec57 6b10 	vmov	r6, r7, d0
 800b69a:	f000 84be 	beq.w	800c01a <__ieee754_pow+0x99a>
 800b69e:	4b7a      	ldr	r3, [pc, #488]	; (800b888 <__ieee754_pow+0x208>)
 800b6a0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b6a4:	429c      	cmp	r4, r3
 800b6a6:	463d      	mov	r5, r7
 800b6a8:	ee10 aa10 	vmov	sl, s0
 800b6ac:	dc09      	bgt.n	800b6c2 <__ieee754_pow+0x42>
 800b6ae:	d103      	bne.n	800b6b8 <__ieee754_pow+0x38>
 800b6b0:	b93e      	cbnz	r6, 800b6c2 <__ieee754_pow+0x42>
 800b6b2:	45a0      	cmp	r8, r4
 800b6b4:	dc0d      	bgt.n	800b6d2 <__ieee754_pow+0x52>
 800b6b6:	e001      	b.n	800b6bc <__ieee754_pow+0x3c>
 800b6b8:	4598      	cmp	r8, r3
 800b6ba:	dc02      	bgt.n	800b6c2 <__ieee754_pow+0x42>
 800b6bc:	4598      	cmp	r8, r3
 800b6be:	d10e      	bne.n	800b6de <__ieee754_pow+0x5e>
 800b6c0:	b16a      	cbz	r2, 800b6de <__ieee754_pow+0x5e>
 800b6c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b6c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b6ca:	ea54 030a 	orrs.w	r3, r4, sl
 800b6ce:	f000 84a4 	beq.w	800c01a <__ieee754_pow+0x99a>
 800b6d2:	486e      	ldr	r0, [pc, #440]	; (800b88c <__ieee754_pow+0x20c>)
 800b6d4:	b011      	add	sp, #68	; 0x44
 800b6d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6da:	f000 bda5 	b.w	800c228 <nan>
 800b6de:	2d00      	cmp	r5, #0
 800b6e0:	da53      	bge.n	800b78a <__ieee754_pow+0x10a>
 800b6e2:	4b6b      	ldr	r3, [pc, #428]	; (800b890 <__ieee754_pow+0x210>)
 800b6e4:	4598      	cmp	r8, r3
 800b6e6:	dc4d      	bgt.n	800b784 <__ieee754_pow+0x104>
 800b6e8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b6ec:	4598      	cmp	r8, r3
 800b6ee:	dd4c      	ble.n	800b78a <__ieee754_pow+0x10a>
 800b6f0:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b6f4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b6f8:	2b14      	cmp	r3, #20
 800b6fa:	dd26      	ble.n	800b74a <__ieee754_pow+0xca>
 800b6fc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b700:	fa22 f103 	lsr.w	r1, r2, r3
 800b704:	fa01 f303 	lsl.w	r3, r1, r3
 800b708:	4293      	cmp	r3, r2
 800b70a:	d13e      	bne.n	800b78a <__ieee754_pow+0x10a>
 800b70c:	f001 0101 	and.w	r1, r1, #1
 800b710:	f1c1 0b02 	rsb	fp, r1, #2
 800b714:	2a00      	cmp	r2, #0
 800b716:	d15b      	bne.n	800b7d0 <__ieee754_pow+0x150>
 800b718:	4b5b      	ldr	r3, [pc, #364]	; (800b888 <__ieee754_pow+0x208>)
 800b71a:	4598      	cmp	r8, r3
 800b71c:	d124      	bne.n	800b768 <__ieee754_pow+0xe8>
 800b71e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b722:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b726:	ea53 030a 	orrs.w	r3, r3, sl
 800b72a:	f000 8476 	beq.w	800c01a <__ieee754_pow+0x99a>
 800b72e:	4b59      	ldr	r3, [pc, #356]	; (800b894 <__ieee754_pow+0x214>)
 800b730:	429c      	cmp	r4, r3
 800b732:	dd2d      	ble.n	800b790 <__ieee754_pow+0x110>
 800b734:	f1b9 0f00 	cmp.w	r9, #0
 800b738:	f280 8473 	bge.w	800c022 <__ieee754_pow+0x9a2>
 800b73c:	2000      	movs	r0, #0
 800b73e:	2100      	movs	r1, #0
 800b740:	ec41 0b10 	vmov	d0, r0, r1
 800b744:	b011      	add	sp, #68	; 0x44
 800b746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b74a:	2a00      	cmp	r2, #0
 800b74c:	d13e      	bne.n	800b7cc <__ieee754_pow+0x14c>
 800b74e:	f1c3 0314 	rsb	r3, r3, #20
 800b752:	fa48 f103 	asr.w	r1, r8, r3
 800b756:	fa01 f303 	lsl.w	r3, r1, r3
 800b75a:	4543      	cmp	r3, r8
 800b75c:	f040 8469 	bne.w	800c032 <__ieee754_pow+0x9b2>
 800b760:	f001 0101 	and.w	r1, r1, #1
 800b764:	f1c1 0b02 	rsb	fp, r1, #2
 800b768:	4b4b      	ldr	r3, [pc, #300]	; (800b898 <__ieee754_pow+0x218>)
 800b76a:	4598      	cmp	r8, r3
 800b76c:	d118      	bne.n	800b7a0 <__ieee754_pow+0x120>
 800b76e:	f1b9 0f00 	cmp.w	r9, #0
 800b772:	f280 845a 	bge.w	800c02a <__ieee754_pow+0x9aa>
 800b776:	4948      	ldr	r1, [pc, #288]	; (800b898 <__ieee754_pow+0x218>)
 800b778:	4632      	mov	r2, r6
 800b77a:	463b      	mov	r3, r7
 800b77c:	2000      	movs	r0, #0
 800b77e:	f7f5 f831 	bl	80007e4 <__aeabi_ddiv>
 800b782:	e7dd      	b.n	800b740 <__ieee754_pow+0xc0>
 800b784:	f04f 0b02 	mov.w	fp, #2
 800b788:	e7c4      	b.n	800b714 <__ieee754_pow+0x94>
 800b78a:	f04f 0b00 	mov.w	fp, #0
 800b78e:	e7c1      	b.n	800b714 <__ieee754_pow+0x94>
 800b790:	f1b9 0f00 	cmp.w	r9, #0
 800b794:	dad2      	bge.n	800b73c <__ieee754_pow+0xbc>
 800b796:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b79a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b79e:	e7cf      	b.n	800b740 <__ieee754_pow+0xc0>
 800b7a0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b7a4:	d106      	bne.n	800b7b4 <__ieee754_pow+0x134>
 800b7a6:	4632      	mov	r2, r6
 800b7a8:	463b      	mov	r3, r7
 800b7aa:	4610      	mov	r0, r2
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	f7f4 feef 	bl	8000590 <__aeabi_dmul>
 800b7b2:	e7c5      	b.n	800b740 <__ieee754_pow+0xc0>
 800b7b4:	4b39      	ldr	r3, [pc, #228]	; (800b89c <__ieee754_pow+0x21c>)
 800b7b6:	4599      	cmp	r9, r3
 800b7b8:	d10a      	bne.n	800b7d0 <__ieee754_pow+0x150>
 800b7ba:	2d00      	cmp	r5, #0
 800b7bc:	db08      	blt.n	800b7d0 <__ieee754_pow+0x150>
 800b7be:	ec47 6b10 	vmov	d0, r6, r7
 800b7c2:	b011      	add	sp, #68	; 0x44
 800b7c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c8:	f000 bc68 	b.w	800c09c <__ieee754_sqrt>
 800b7cc:	f04f 0b00 	mov.w	fp, #0
 800b7d0:	ec47 6b10 	vmov	d0, r6, r7
 800b7d4:	f000 fd12 	bl	800c1fc <fabs>
 800b7d8:	ec51 0b10 	vmov	r0, r1, d0
 800b7dc:	f1ba 0f00 	cmp.w	sl, #0
 800b7e0:	d127      	bne.n	800b832 <__ieee754_pow+0x1b2>
 800b7e2:	b124      	cbz	r4, 800b7ee <__ieee754_pow+0x16e>
 800b7e4:	4b2c      	ldr	r3, [pc, #176]	; (800b898 <__ieee754_pow+0x218>)
 800b7e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d121      	bne.n	800b832 <__ieee754_pow+0x1b2>
 800b7ee:	f1b9 0f00 	cmp.w	r9, #0
 800b7f2:	da05      	bge.n	800b800 <__ieee754_pow+0x180>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	4927      	ldr	r1, [pc, #156]	; (800b898 <__ieee754_pow+0x218>)
 800b7fc:	f7f4 fff2 	bl	80007e4 <__aeabi_ddiv>
 800b800:	2d00      	cmp	r5, #0
 800b802:	da9d      	bge.n	800b740 <__ieee754_pow+0xc0>
 800b804:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b808:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b80c:	ea54 030b 	orrs.w	r3, r4, fp
 800b810:	d108      	bne.n	800b824 <__ieee754_pow+0x1a4>
 800b812:	4602      	mov	r2, r0
 800b814:	460b      	mov	r3, r1
 800b816:	4610      	mov	r0, r2
 800b818:	4619      	mov	r1, r3
 800b81a:	f7f4 fd01 	bl	8000220 <__aeabi_dsub>
 800b81e:	4602      	mov	r2, r0
 800b820:	460b      	mov	r3, r1
 800b822:	e7ac      	b.n	800b77e <__ieee754_pow+0xfe>
 800b824:	f1bb 0f01 	cmp.w	fp, #1
 800b828:	d18a      	bne.n	800b740 <__ieee754_pow+0xc0>
 800b82a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b82e:	4619      	mov	r1, r3
 800b830:	e786      	b.n	800b740 <__ieee754_pow+0xc0>
 800b832:	0fed      	lsrs	r5, r5, #31
 800b834:	1e6b      	subs	r3, r5, #1
 800b836:	930d      	str	r3, [sp, #52]	; 0x34
 800b838:	ea5b 0303 	orrs.w	r3, fp, r3
 800b83c:	d102      	bne.n	800b844 <__ieee754_pow+0x1c4>
 800b83e:	4632      	mov	r2, r6
 800b840:	463b      	mov	r3, r7
 800b842:	e7e8      	b.n	800b816 <__ieee754_pow+0x196>
 800b844:	4b16      	ldr	r3, [pc, #88]	; (800b8a0 <__ieee754_pow+0x220>)
 800b846:	4598      	cmp	r8, r3
 800b848:	f340 80fe 	ble.w	800ba48 <__ieee754_pow+0x3c8>
 800b84c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b850:	4598      	cmp	r8, r3
 800b852:	dd0a      	ble.n	800b86a <__ieee754_pow+0x1ea>
 800b854:	4b0f      	ldr	r3, [pc, #60]	; (800b894 <__ieee754_pow+0x214>)
 800b856:	429c      	cmp	r4, r3
 800b858:	dc0d      	bgt.n	800b876 <__ieee754_pow+0x1f6>
 800b85a:	f1b9 0f00 	cmp.w	r9, #0
 800b85e:	f6bf af6d 	bge.w	800b73c <__ieee754_pow+0xbc>
 800b862:	a307      	add	r3, pc, #28	; (adr r3, 800b880 <__ieee754_pow+0x200>)
 800b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b868:	e79f      	b.n	800b7aa <__ieee754_pow+0x12a>
 800b86a:	4b0e      	ldr	r3, [pc, #56]	; (800b8a4 <__ieee754_pow+0x224>)
 800b86c:	429c      	cmp	r4, r3
 800b86e:	ddf4      	ble.n	800b85a <__ieee754_pow+0x1da>
 800b870:	4b09      	ldr	r3, [pc, #36]	; (800b898 <__ieee754_pow+0x218>)
 800b872:	429c      	cmp	r4, r3
 800b874:	dd18      	ble.n	800b8a8 <__ieee754_pow+0x228>
 800b876:	f1b9 0f00 	cmp.w	r9, #0
 800b87a:	dcf2      	bgt.n	800b862 <__ieee754_pow+0x1e2>
 800b87c:	e75e      	b.n	800b73c <__ieee754_pow+0xbc>
 800b87e:	bf00      	nop
 800b880:	8800759c 	.word	0x8800759c
 800b884:	7e37e43c 	.word	0x7e37e43c
 800b888:	7ff00000 	.word	0x7ff00000
 800b88c:	0800c4c3 	.word	0x0800c4c3
 800b890:	433fffff 	.word	0x433fffff
 800b894:	3fefffff 	.word	0x3fefffff
 800b898:	3ff00000 	.word	0x3ff00000
 800b89c:	3fe00000 	.word	0x3fe00000
 800b8a0:	41e00000 	.word	0x41e00000
 800b8a4:	3feffffe 	.word	0x3feffffe
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	4b63      	ldr	r3, [pc, #396]	; (800ba38 <__ieee754_pow+0x3b8>)
 800b8ac:	f7f4 fcb8 	bl	8000220 <__aeabi_dsub>
 800b8b0:	a355      	add	r3, pc, #340	; (adr r3, 800ba08 <__ieee754_pow+0x388>)
 800b8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	460d      	mov	r5, r1
 800b8ba:	f7f4 fe69 	bl	8000590 <__aeabi_dmul>
 800b8be:	a354      	add	r3, pc, #336	; (adr r3, 800ba10 <__ieee754_pow+0x390>)
 800b8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c4:	4606      	mov	r6, r0
 800b8c6:	460f      	mov	r7, r1
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	4629      	mov	r1, r5
 800b8cc:	f7f4 fe60 	bl	8000590 <__aeabi_dmul>
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8d6:	4b59      	ldr	r3, [pc, #356]	; (800ba3c <__ieee754_pow+0x3bc>)
 800b8d8:	4620      	mov	r0, r4
 800b8da:	4629      	mov	r1, r5
 800b8dc:	f7f4 fe58 	bl	8000590 <__aeabi_dmul>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	a14c      	add	r1, pc, #304	; (adr r1, 800ba18 <__ieee754_pow+0x398>)
 800b8e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8ea:	f7f4 fc99 	bl	8000220 <__aeabi_dsub>
 800b8ee:	4622      	mov	r2, r4
 800b8f0:	462b      	mov	r3, r5
 800b8f2:	f7f4 fe4d 	bl	8000590 <__aeabi_dmul>
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	4950      	ldr	r1, [pc, #320]	; (800ba40 <__ieee754_pow+0x3c0>)
 800b8fe:	f7f4 fc8f 	bl	8000220 <__aeabi_dsub>
 800b902:	4622      	mov	r2, r4
 800b904:	462b      	mov	r3, r5
 800b906:	4680      	mov	r8, r0
 800b908:	4689      	mov	r9, r1
 800b90a:	4620      	mov	r0, r4
 800b90c:	4629      	mov	r1, r5
 800b90e:	f7f4 fe3f 	bl	8000590 <__aeabi_dmul>
 800b912:	4602      	mov	r2, r0
 800b914:	460b      	mov	r3, r1
 800b916:	4640      	mov	r0, r8
 800b918:	4649      	mov	r1, r9
 800b91a:	f7f4 fe39 	bl	8000590 <__aeabi_dmul>
 800b91e:	a340      	add	r3, pc, #256	; (adr r3, 800ba20 <__ieee754_pow+0x3a0>)
 800b920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b924:	f7f4 fe34 	bl	8000590 <__aeabi_dmul>
 800b928:	4602      	mov	r2, r0
 800b92a:	460b      	mov	r3, r1
 800b92c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b930:	f7f4 fc76 	bl	8000220 <__aeabi_dsub>
 800b934:	4602      	mov	r2, r0
 800b936:	460b      	mov	r3, r1
 800b938:	4604      	mov	r4, r0
 800b93a:	460d      	mov	r5, r1
 800b93c:	4630      	mov	r0, r6
 800b93e:	4639      	mov	r1, r7
 800b940:	f7f4 fc70 	bl	8000224 <__adddf3>
 800b944:	2000      	movs	r0, #0
 800b946:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b94a:	4632      	mov	r2, r6
 800b94c:	463b      	mov	r3, r7
 800b94e:	f7f4 fc67 	bl	8000220 <__aeabi_dsub>
 800b952:	4602      	mov	r2, r0
 800b954:	460b      	mov	r3, r1
 800b956:	4620      	mov	r0, r4
 800b958:	4629      	mov	r1, r5
 800b95a:	f7f4 fc61 	bl	8000220 <__aeabi_dsub>
 800b95e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b960:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b964:	4313      	orrs	r3, r2
 800b966:	4606      	mov	r6, r0
 800b968:	460f      	mov	r7, r1
 800b96a:	f040 81eb 	bne.w	800bd44 <__ieee754_pow+0x6c4>
 800b96e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800ba28 <__ieee754_pow+0x3a8>
 800b972:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b976:	2400      	movs	r4, #0
 800b978:	4622      	mov	r2, r4
 800b97a:	462b      	mov	r3, r5
 800b97c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b980:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b984:	f7f4 fc4c 	bl	8000220 <__aeabi_dsub>
 800b988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b98c:	f7f4 fe00 	bl	8000590 <__aeabi_dmul>
 800b990:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b994:	4680      	mov	r8, r0
 800b996:	4689      	mov	r9, r1
 800b998:	4630      	mov	r0, r6
 800b99a:	4639      	mov	r1, r7
 800b99c:	f7f4 fdf8 	bl	8000590 <__aeabi_dmul>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	4640      	mov	r0, r8
 800b9a6:	4649      	mov	r1, r9
 800b9a8:	f7f4 fc3c 	bl	8000224 <__adddf3>
 800b9ac:	4622      	mov	r2, r4
 800b9ae:	462b      	mov	r3, r5
 800b9b0:	4680      	mov	r8, r0
 800b9b2:	4689      	mov	r9, r1
 800b9b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9b8:	f7f4 fdea 	bl	8000590 <__aeabi_dmul>
 800b9bc:	460b      	mov	r3, r1
 800b9be:	4604      	mov	r4, r0
 800b9c0:	460d      	mov	r5, r1
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	4649      	mov	r1, r9
 800b9c6:	4640      	mov	r0, r8
 800b9c8:	e9cd 4500 	strd	r4, r5, [sp]
 800b9cc:	f7f4 fc2a 	bl	8000224 <__adddf3>
 800b9d0:	4b1c      	ldr	r3, [pc, #112]	; (800ba44 <__ieee754_pow+0x3c4>)
 800b9d2:	4299      	cmp	r1, r3
 800b9d4:	4606      	mov	r6, r0
 800b9d6:	460f      	mov	r7, r1
 800b9d8:	468b      	mov	fp, r1
 800b9da:	f340 82f7 	ble.w	800bfcc <__ieee754_pow+0x94c>
 800b9de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b9e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b9e6:	4303      	orrs	r3, r0
 800b9e8:	f000 81ea 	beq.w	800bdc0 <__ieee754_pow+0x740>
 800b9ec:	a310      	add	r3, pc, #64	; (adr r3, 800ba30 <__ieee754_pow+0x3b0>)
 800b9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9f6:	f7f4 fdcb 	bl	8000590 <__aeabi_dmul>
 800b9fa:	a30d      	add	r3, pc, #52	; (adr r3, 800ba30 <__ieee754_pow+0x3b0>)
 800b9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba00:	e6d5      	b.n	800b7ae <__ieee754_pow+0x12e>
 800ba02:	bf00      	nop
 800ba04:	f3af 8000 	nop.w
 800ba08:	60000000 	.word	0x60000000
 800ba0c:	3ff71547 	.word	0x3ff71547
 800ba10:	f85ddf44 	.word	0xf85ddf44
 800ba14:	3e54ae0b 	.word	0x3e54ae0b
 800ba18:	55555555 	.word	0x55555555
 800ba1c:	3fd55555 	.word	0x3fd55555
 800ba20:	652b82fe 	.word	0x652b82fe
 800ba24:	3ff71547 	.word	0x3ff71547
 800ba28:	00000000 	.word	0x00000000
 800ba2c:	bff00000 	.word	0xbff00000
 800ba30:	8800759c 	.word	0x8800759c
 800ba34:	7e37e43c 	.word	0x7e37e43c
 800ba38:	3ff00000 	.word	0x3ff00000
 800ba3c:	3fd00000 	.word	0x3fd00000
 800ba40:	3fe00000 	.word	0x3fe00000
 800ba44:	408fffff 	.word	0x408fffff
 800ba48:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ba4c:	f04f 0200 	mov.w	r2, #0
 800ba50:	da05      	bge.n	800ba5e <__ieee754_pow+0x3de>
 800ba52:	4bd3      	ldr	r3, [pc, #844]	; (800bda0 <__ieee754_pow+0x720>)
 800ba54:	f7f4 fd9c 	bl	8000590 <__aeabi_dmul>
 800ba58:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ba5c:	460c      	mov	r4, r1
 800ba5e:	1523      	asrs	r3, r4, #20
 800ba60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ba64:	4413      	add	r3, r2
 800ba66:	9309      	str	r3, [sp, #36]	; 0x24
 800ba68:	4bce      	ldr	r3, [pc, #824]	; (800bda4 <__ieee754_pow+0x724>)
 800ba6a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ba6e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ba72:	429c      	cmp	r4, r3
 800ba74:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ba78:	dd08      	ble.n	800ba8c <__ieee754_pow+0x40c>
 800ba7a:	4bcb      	ldr	r3, [pc, #812]	; (800bda8 <__ieee754_pow+0x728>)
 800ba7c:	429c      	cmp	r4, r3
 800ba7e:	f340 815e 	ble.w	800bd3e <__ieee754_pow+0x6be>
 800ba82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba84:	3301      	adds	r3, #1
 800ba86:	9309      	str	r3, [sp, #36]	; 0x24
 800ba88:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ba8c:	f04f 0a00 	mov.w	sl, #0
 800ba90:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ba94:	930c      	str	r3, [sp, #48]	; 0x30
 800ba96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba98:	4bc4      	ldr	r3, [pc, #784]	; (800bdac <__ieee754_pow+0x72c>)
 800ba9a:	4413      	add	r3, r2
 800ba9c:	ed93 7b00 	vldr	d7, [r3]
 800baa0:	4629      	mov	r1, r5
 800baa2:	ec53 2b17 	vmov	r2, r3, d7
 800baa6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800baaa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800baae:	f7f4 fbb7 	bl	8000220 <__aeabi_dsub>
 800bab2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bab6:	4606      	mov	r6, r0
 800bab8:	460f      	mov	r7, r1
 800baba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800babe:	f7f4 fbb1 	bl	8000224 <__adddf3>
 800bac2:	4602      	mov	r2, r0
 800bac4:	460b      	mov	r3, r1
 800bac6:	2000      	movs	r0, #0
 800bac8:	49b9      	ldr	r1, [pc, #740]	; (800bdb0 <__ieee754_pow+0x730>)
 800baca:	f7f4 fe8b 	bl	80007e4 <__aeabi_ddiv>
 800bace:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bad2:	4602      	mov	r2, r0
 800bad4:	460b      	mov	r3, r1
 800bad6:	4630      	mov	r0, r6
 800bad8:	4639      	mov	r1, r7
 800bada:	f7f4 fd59 	bl	8000590 <__aeabi_dmul>
 800bade:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bae2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bae6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800baea:	2300      	movs	r3, #0
 800baec:	9302      	str	r3, [sp, #8]
 800baee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800baf2:	106d      	asrs	r5, r5, #1
 800baf4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800baf8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bafc:	2200      	movs	r2, #0
 800bafe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800bb02:	4640      	mov	r0, r8
 800bb04:	4649      	mov	r1, r9
 800bb06:	4614      	mov	r4, r2
 800bb08:	461d      	mov	r5, r3
 800bb0a:	f7f4 fd41 	bl	8000590 <__aeabi_dmul>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	460b      	mov	r3, r1
 800bb12:	4630      	mov	r0, r6
 800bb14:	4639      	mov	r1, r7
 800bb16:	f7f4 fb83 	bl	8000220 <__aeabi_dsub>
 800bb1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb1e:	4606      	mov	r6, r0
 800bb20:	460f      	mov	r7, r1
 800bb22:	4620      	mov	r0, r4
 800bb24:	4629      	mov	r1, r5
 800bb26:	f7f4 fb7b 	bl	8000220 <__aeabi_dsub>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bb32:	f7f4 fb75 	bl	8000220 <__aeabi_dsub>
 800bb36:	4642      	mov	r2, r8
 800bb38:	464b      	mov	r3, r9
 800bb3a:	f7f4 fd29 	bl	8000590 <__aeabi_dmul>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	460b      	mov	r3, r1
 800bb42:	4630      	mov	r0, r6
 800bb44:	4639      	mov	r1, r7
 800bb46:	f7f4 fb6b 	bl	8000220 <__aeabi_dsub>
 800bb4a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bb4e:	f7f4 fd1f 	bl	8000590 <__aeabi_dmul>
 800bb52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bb5a:	4610      	mov	r0, r2
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	f7f4 fd17 	bl	8000590 <__aeabi_dmul>
 800bb62:	a37b      	add	r3, pc, #492	; (adr r3, 800bd50 <__ieee754_pow+0x6d0>)
 800bb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb68:	4604      	mov	r4, r0
 800bb6a:	460d      	mov	r5, r1
 800bb6c:	f7f4 fd10 	bl	8000590 <__aeabi_dmul>
 800bb70:	a379      	add	r3, pc, #484	; (adr r3, 800bd58 <__ieee754_pow+0x6d8>)
 800bb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb76:	f7f4 fb55 	bl	8000224 <__adddf3>
 800bb7a:	4622      	mov	r2, r4
 800bb7c:	462b      	mov	r3, r5
 800bb7e:	f7f4 fd07 	bl	8000590 <__aeabi_dmul>
 800bb82:	a377      	add	r3, pc, #476	; (adr r3, 800bd60 <__ieee754_pow+0x6e0>)
 800bb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb88:	f7f4 fb4c 	bl	8000224 <__adddf3>
 800bb8c:	4622      	mov	r2, r4
 800bb8e:	462b      	mov	r3, r5
 800bb90:	f7f4 fcfe 	bl	8000590 <__aeabi_dmul>
 800bb94:	a374      	add	r3, pc, #464	; (adr r3, 800bd68 <__ieee754_pow+0x6e8>)
 800bb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9a:	f7f4 fb43 	bl	8000224 <__adddf3>
 800bb9e:	4622      	mov	r2, r4
 800bba0:	462b      	mov	r3, r5
 800bba2:	f7f4 fcf5 	bl	8000590 <__aeabi_dmul>
 800bba6:	a372      	add	r3, pc, #456	; (adr r3, 800bd70 <__ieee754_pow+0x6f0>)
 800bba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbac:	f7f4 fb3a 	bl	8000224 <__adddf3>
 800bbb0:	4622      	mov	r2, r4
 800bbb2:	462b      	mov	r3, r5
 800bbb4:	f7f4 fcec 	bl	8000590 <__aeabi_dmul>
 800bbb8:	a36f      	add	r3, pc, #444	; (adr r3, 800bd78 <__ieee754_pow+0x6f8>)
 800bbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbe:	f7f4 fb31 	bl	8000224 <__adddf3>
 800bbc2:	4622      	mov	r2, r4
 800bbc4:	4606      	mov	r6, r0
 800bbc6:	460f      	mov	r7, r1
 800bbc8:	462b      	mov	r3, r5
 800bbca:	4620      	mov	r0, r4
 800bbcc:	4629      	mov	r1, r5
 800bbce:	f7f4 fcdf 	bl	8000590 <__aeabi_dmul>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	4639      	mov	r1, r7
 800bbda:	f7f4 fcd9 	bl	8000590 <__aeabi_dmul>
 800bbde:	4642      	mov	r2, r8
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	460d      	mov	r5, r1
 800bbe4:	464b      	mov	r3, r9
 800bbe6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbea:	f7f4 fb1b 	bl	8000224 <__adddf3>
 800bbee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bbf2:	f7f4 fccd 	bl	8000590 <__aeabi_dmul>
 800bbf6:	4622      	mov	r2, r4
 800bbf8:	462b      	mov	r3, r5
 800bbfa:	f7f4 fb13 	bl	8000224 <__adddf3>
 800bbfe:	4642      	mov	r2, r8
 800bc00:	4606      	mov	r6, r0
 800bc02:	460f      	mov	r7, r1
 800bc04:	464b      	mov	r3, r9
 800bc06:	4640      	mov	r0, r8
 800bc08:	4649      	mov	r1, r9
 800bc0a:	f7f4 fcc1 	bl	8000590 <__aeabi_dmul>
 800bc0e:	2200      	movs	r2, #0
 800bc10:	4b68      	ldr	r3, [pc, #416]	; (800bdb4 <__ieee754_pow+0x734>)
 800bc12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bc16:	f7f4 fb05 	bl	8000224 <__adddf3>
 800bc1a:	4632      	mov	r2, r6
 800bc1c:	463b      	mov	r3, r7
 800bc1e:	f7f4 fb01 	bl	8000224 <__adddf3>
 800bc22:	9802      	ldr	r0, [sp, #8]
 800bc24:	460d      	mov	r5, r1
 800bc26:	4604      	mov	r4, r0
 800bc28:	4602      	mov	r2, r0
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	4640      	mov	r0, r8
 800bc2e:	4649      	mov	r1, r9
 800bc30:	f7f4 fcae 	bl	8000590 <__aeabi_dmul>
 800bc34:	2200      	movs	r2, #0
 800bc36:	4680      	mov	r8, r0
 800bc38:	4689      	mov	r9, r1
 800bc3a:	4b5e      	ldr	r3, [pc, #376]	; (800bdb4 <__ieee754_pow+0x734>)
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	4629      	mov	r1, r5
 800bc40:	f7f4 faee 	bl	8000220 <__aeabi_dsub>
 800bc44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bc48:	f7f4 faea 	bl	8000220 <__aeabi_dsub>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	460b      	mov	r3, r1
 800bc50:	4630      	mov	r0, r6
 800bc52:	4639      	mov	r1, r7
 800bc54:	f7f4 fae4 	bl	8000220 <__aeabi_dsub>
 800bc58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc5c:	f7f4 fc98 	bl	8000590 <__aeabi_dmul>
 800bc60:	4622      	mov	r2, r4
 800bc62:	4606      	mov	r6, r0
 800bc64:	460f      	mov	r7, r1
 800bc66:	462b      	mov	r3, r5
 800bc68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc6c:	f7f4 fc90 	bl	8000590 <__aeabi_dmul>
 800bc70:	4602      	mov	r2, r0
 800bc72:	460b      	mov	r3, r1
 800bc74:	4630      	mov	r0, r6
 800bc76:	4639      	mov	r1, r7
 800bc78:	f7f4 fad4 	bl	8000224 <__adddf3>
 800bc7c:	4606      	mov	r6, r0
 800bc7e:	460f      	mov	r7, r1
 800bc80:	4602      	mov	r2, r0
 800bc82:	460b      	mov	r3, r1
 800bc84:	4640      	mov	r0, r8
 800bc86:	4649      	mov	r1, r9
 800bc88:	f7f4 facc 	bl	8000224 <__adddf3>
 800bc8c:	9802      	ldr	r0, [sp, #8]
 800bc8e:	a33c      	add	r3, pc, #240	; (adr r3, 800bd80 <__ieee754_pow+0x700>)
 800bc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc94:	4604      	mov	r4, r0
 800bc96:	460d      	mov	r5, r1
 800bc98:	f7f4 fc7a 	bl	8000590 <__aeabi_dmul>
 800bc9c:	4642      	mov	r2, r8
 800bc9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bca2:	464b      	mov	r3, r9
 800bca4:	4620      	mov	r0, r4
 800bca6:	4629      	mov	r1, r5
 800bca8:	f7f4 faba 	bl	8000220 <__aeabi_dsub>
 800bcac:	4602      	mov	r2, r0
 800bcae:	460b      	mov	r3, r1
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	4639      	mov	r1, r7
 800bcb4:	f7f4 fab4 	bl	8000220 <__aeabi_dsub>
 800bcb8:	a333      	add	r3, pc, #204	; (adr r3, 800bd88 <__ieee754_pow+0x708>)
 800bcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbe:	f7f4 fc67 	bl	8000590 <__aeabi_dmul>
 800bcc2:	a333      	add	r3, pc, #204	; (adr r3, 800bd90 <__ieee754_pow+0x710>)
 800bcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc8:	4606      	mov	r6, r0
 800bcca:	460f      	mov	r7, r1
 800bccc:	4620      	mov	r0, r4
 800bcce:	4629      	mov	r1, r5
 800bcd0:	f7f4 fc5e 	bl	8000590 <__aeabi_dmul>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	4630      	mov	r0, r6
 800bcda:	4639      	mov	r1, r7
 800bcdc:	f7f4 faa2 	bl	8000224 <__adddf3>
 800bce0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bce2:	4b35      	ldr	r3, [pc, #212]	; (800bdb8 <__ieee754_pow+0x738>)
 800bce4:	4413      	add	r3, r2
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	f7f4 fa9b 	bl	8000224 <__adddf3>
 800bcee:	4604      	mov	r4, r0
 800bcf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcf2:	460d      	mov	r5, r1
 800bcf4:	f7f4 fbe2 	bl	80004bc <__aeabi_i2d>
 800bcf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bcfa:	4b30      	ldr	r3, [pc, #192]	; (800bdbc <__ieee754_pow+0x73c>)
 800bcfc:	4413      	add	r3, r2
 800bcfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd02:	4606      	mov	r6, r0
 800bd04:	460f      	mov	r7, r1
 800bd06:	4622      	mov	r2, r4
 800bd08:	462b      	mov	r3, r5
 800bd0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd0e:	f7f4 fa89 	bl	8000224 <__adddf3>
 800bd12:	4642      	mov	r2, r8
 800bd14:	464b      	mov	r3, r9
 800bd16:	f7f4 fa85 	bl	8000224 <__adddf3>
 800bd1a:	4632      	mov	r2, r6
 800bd1c:	463b      	mov	r3, r7
 800bd1e:	f7f4 fa81 	bl	8000224 <__adddf3>
 800bd22:	9802      	ldr	r0, [sp, #8]
 800bd24:	4632      	mov	r2, r6
 800bd26:	463b      	mov	r3, r7
 800bd28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd2c:	f7f4 fa78 	bl	8000220 <__aeabi_dsub>
 800bd30:	4642      	mov	r2, r8
 800bd32:	464b      	mov	r3, r9
 800bd34:	f7f4 fa74 	bl	8000220 <__aeabi_dsub>
 800bd38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd3c:	e607      	b.n	800b94e <__ieee754_pow+0x2ce>
 800bd3e:	f04f 0a01 	mov.w	sl, #1
 800bd42:	e6a5      	b.n	800ba90 <__ieee754_pow+0x410>
 800bd44:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800bd98 <__ieee754_pow+0x718>
 800bd48:	e613      	b.n	800b972 <__ieee754_pow+0x2f2>
 800bd4a:	bf00      	nop
 800bd4c:	f3af 8000 	nop.w
 800bd50:	4a454eef 	.word	0x4a454eef
 800bd54:	3fca7e28 	.word	0x3fca7e28
 800bd58:	93c9db65 	.word	0x93c9db65
 800bd5c:	3fcd864a 	.word	0x3fcd864a
 800bd60:	a91d4101 	.word	0xa91d4101
 800bd64:	3fd17460 	.word	0x3fd17460
 800bd68:	518f264d 	.word	0x518f264d
 800bd6c:	3fd55555 	.word	0x3fd55555
 800bd70:	db6fabff 	.word	0xdb6fabff
 800bd74:	3fdb6db6 	.word	0x3fdb6db6
 800bd78:	33333303 	.word	0x33333303
 800bd7c:	3fe33333 	.word	0x3fe33333
 800bd80:	e0000000 	.word	0xe0000000
 800bd84:	3feec709 	.word	0x3feec709
 800bd88:	dc3a03fd 	.word	0xdc3a03fd
 800bd8c:	3feec709 	.word	0x3feec709
 800bd90:	145b01f5 	.word	0x145b01f5
 800bd94:	be3e2fe0 	.word	0xbe3e2fe0
 800bd98:	00000000 	.word	0x00000000
 800bd9c:	3ff00000 	.word	0x3ff00000
 800bda0:	43400000 	.word	0x43400000
 800bda4:	0003988e 	.word	0x0003988e
 800bda8:	000bb679 	.word	0x000bb679
 800bdac:	0800c4c8 	.word	0x0800c4c8
 800bdb0:	3ff00000 	.word	0x3ff00000
 800bdb4:	40080000 	.word	0x40080000
 800bdb8:	0800c4e8 	.word	0x0800c4e8
 800bdbc:	0800c4d8 	.word	0x0800c4d8
 800bdc0:	a3b4      	add	r3, pc, #720	; (adr r3, 800c094 <__ieee754_pow+0xa14>)
 800bdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc6:	4640      	mov	r0, r8
 800bdc8:	4649      	mov	r1, r9
 800bdca:	f7f4 fa2b 	bl	8000224 <__adddf3>
 800bdce:	4622      	mov	r2, r4
 800bdd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdd4:	462b      	mov	r3, r5
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	4639      	mov	r1, r7
 800bdda:	f7f4 fa21 	bl	8000220 <__aeabi_dsub>
 800bdde:	4602      	mov	r2, r0
 800bde0:	460b      	mov	r3, r1
 800bde2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bde6:	f7f4 fe63 	bl	8000ab0 <__aeabi_dcmpgt>
 800bdea:	2800      	cmp	r0, #0
 800bdec:	f47f adfe 	bne.w	800b9ec <__ieee754_pow+0x36c>
 800bdf0:	4aa3      	ldr	r2, [pc, #652]	; (800c080 <__ieee754_pow+0xa00>)
 800bdf2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	f340 810a 	ble.w	800c010 <__ieee754_pow+0x990>
 800bdfc:	151b      	asrs	r3, r3, #20
 800bdfe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800be02:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800be06:	fa4a f303 	asr.w	r3, sl, r3
 800be0a:	445b      	add	r3, fp
 800be0c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800be10:	4e9c      	ldr	r6, [pc, #624]	; (800c084 <__ieee754_pow+0xa04>)
 800be12:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800be16:	4116      	asrs	r6, r2
 800be18:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800be1c:	2000      	movs	r0, #0
 800be1e:	ea23 0106 	bic.w	r1, r3, r6
 800be22:	f1c2 0214 	rsb	r2, r2, #20
 800be26:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800be2a:	fa4a fa02 	asr.w	sl, sl, r2
 800be2e:	f1bb 0f00 	cmp.w	fp, #0
 800be32:	4602      	mov	r2, r0
 800be34:	460b      	mov	r3, r1
 800be36:	4620      	mov	r0, r4
 800be38:	4629      	mov	r1, r5
 800be3a:	bfb8      	it	lt
 800be3c:	f1ca 0a00 	rsblt	sl, sl, #0
 800be40:	f7f4 f9ee 	bl	8000220 <__aeabi_dsub>
 800be44:	e9cd 0100 	strd	r0, r1, [sp]
 800be48:	4642      	mov	r2, r8
 800be4a:	464b      	mov	r3, r9
 800be4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be50:	f7f4 f9e8 	bl	8000224 <__adddf3>
 800be54:	2000      	movs	r0, #0
 800be56:	a378      	add	r3, pc, #480	; (adr r3, 800c038 <__ieee754_pow+0x9b8>)
 800be58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5c:	4604      	mov	r4, r0
 800be5e:	460d      	mov	r5, r1
 800be60:	f7f4 fb96 	bl	8000590 <__aeabi_dmul>
 800be64:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be68:	4606      	mov	r6, r0
 800be6a:	460f      	mov	r7, r1
 800be6c:	4620      	mov	r0, r4
 800be6e:	4629      	mov	r1, r5
 800be70:	f7f4 f9d6 	bl	8000220 <__aeabi_dsub>
 800be74:	4602      	mov	r2, r0
 800be76:	460b      	mov	r3, r1
 800be78:	4640      	mov	r0, r8
 800be7a:	4649      	mov	r1, r9
 800be7c:	f7f4 f9d0 	bl	8000220 <__aeabi_dsub>
 800be80:	a36f      	add	r3, pc, #444	; (adr r3, 800c040 <__ieee754_pow+0x9c0>)
 800be82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be86:	f7f4 fb83 	bl	8000590 <__aeabi_dmul>
 800be8a:	a36f      	add	r3, pc, #444	; (adr r3, 800c048 <__ieee754_pow+0x9c8>)
 800be8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be90:	4680      	mov	r8, r0
 800be92:	4689      	mov	r9, r1
 800be94:	4620      	mov	r0, r4
 800be96:	4629      	mov	r1, r5
 800be98:	f7f4 fb7a 	bl	8000590 <__aeabi_dmul>
 800be9c:	4602      	mov	r2, r0
 800be9e:	460b      	mov	r3, r1
 800bea0:	4640      	mov	r0, r8
 800bea2:	4649      	mov	r1, r9
 800bea4:	f7f4 f9be 	bl	8000224 <__adddf3>
 800bea8:	4604      	mov	r4, r0
 800beaa:	460d      	mov	r5, r1
 800beac:	4602      	mov	r2, r0
 800beae:	460b      	mov	r3, r1
 800beb0:	4630      	mov	r0, r6
 800beb2:	4639      	mov	r1, r7
 800beb4:	f7f4 f9b6 	bl	8000224 <__adddf3>
 800beb8:	4632      	mov	r2, r6
 800beba:	463b      	mov	r3, r7
 800bebc:	4680      	mov	r8, r0
 800bebe:	4689      	mov	r9, r1
 800bec0:	f7f4 f9ae 	bl	8000220 <__aeabi_dsub>
 800bec4:	4602      	mov	r2, r0
 800bec6:	460b      	mov	r3, r1
 800bec8:	4620      	mov	r0, r4
 800beca:	4629      	mov	r1, r5
 800becc:	f7f4 f9a8 	bl	8000220 <__aeabi_dsub>
 800bed0:	4642      	mov	r2, r8
 800bed2:	4606      	mov	r6, r0
 800bed4:	460f      	mov	r7, r1
 800bed6:	464b      	mov	r3, r9
 800bed8:	4640      	mov	r0, r8
 800beda:	4649      	mov	r1, r9
 800bedc:	f7f4 fb58 	bl	8000590 <__aeabi_dmul>
 800bee0:	a35b      	add	r3, pc, #364	; (adr r3, 800c050 <__ieee754_pow+0x9d0>)
 800bee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee6:	4604      	mov	r4, r0
 800bee8:	460d      	mov	r5, r1
 800beea:	f7f4 fb51 	bl	8000590 <__aeabi_dmul>
 800beee:	a35a      	add	r3, pc, #360	; (adr r3, 800c058 <__ieee754_pow+0x9d8>)
 800bef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef4:	f7f4 f994 	bl	8000220 <__aeabi_dsub>
 800bef8:	4622      	mov	r2, r4
 800befa:	462b      	mov	r3, r5
 800befc:	f7f4 fb48 	bl	8000590 <__aeabi_dmul>
 800bf00:	a357      	add	r3, pc, #348	; (adr r3, 800c060 <__ieee754_pow+0x9e0>)
 800bf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf06:	f7f4 f98d 	bl	8000224 <__adddf3>
 800bf0a:	4622      	mov	r2, r4
 800bf0c:	462b      	mov	r3, r5
 800bf0e:	f7f4 fb3f 	bl	8000590 <__aeabi_dmul>
 800bf12:	a355      	add	r3, pc, #340	; (adr r3, 800c068 <__ieee754_pow+0x9e8>)
 800bf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf18:	f7f4 f982 	bl	8000220 <__aeabi_dsub>
 800bf1c:	4622      	mov	r2, r4
 800bf1e:	462b      	mov	r3, r5
 800bf20:	f7f4 fb36 	bl	8000590 <__aeabi_dmul>
 800bf24:	a352      	add	r3, pc, #328	; (adr r3, 800c070 <__ieee754_pow+0x9f0>)
 800bf26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2a:	f7f4 f97b 	bl	8000224 <__adddf3>
 800bf2e:	4622      	mov	r2, r4
 800bf30:	462b      	mov	r3, r5
 800bf32:	f7f4 fb2d 	bl	8000590 <__aeabi_dmul>
 800bf36:	4602      	mov	r2, r0
 800bf38:	460b      	mov	r3, r1
 800bf3a:	4640      	mov	r0, r8
 800bf3c:	4649      	mov	r1, r9
 800bf3e:	f7f4 f96f 	bl	8000220 <__aeabi_dsub>
 800bf42:	4604      	mov	r4, r0
 800bf44:	460d      	mov	r5, r1
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	4640      	mov	r0, r8
 800bf4c:	4649      	mov	r1, r9
 800bf4e:	f7f4 fb1f 	bl	8000590 <__aeabi_dmul>
 800bf52:	2200      	movs	r2, #0
 800bf54:	e9cd 0100 	strd	r0, r1, [sp]
 800bf58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	4629      	mov	r1, r5
 800bf60:	f7f4 f95e 	bl	8000220 <__aeabi_dsub>
 800bf64:	4602      	mov	r2, r0
 800bf66:	460b      	mov	r3, r1
 800bf68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf6c:	f7f4 fc3a 	bl	80007e4 <__aeabi_ddiv>
 800bf70:	4632      	mov	r2, r6
 800bf72:	4604      	mov	r4, r0
 800bf74:	460d      	mov	r5, r1
 800bf76:	463b      	mov	r3, r7
 800bf78:	4640      	mov	r0, r8
 800bf7a:	4649      	mov	r1, r9
 800bf7c:	f7f4 fb08 	bl	8000590 <__aeabi_dmul>
 800bf80:	4632      	mov	r2, r6
 800bf82:	463b      	mov	r3, r7
 800bf84:	f7f4 f94e 	bl	8000224 <__adddf3>
 800bf88:	4602      	mov	r2, r0
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	4629      	mov	r1, r5
 800bf90:	f7f4 f946 	bl	8000220 <__aeabi_dsub>
 800bf94:	4642      	mov	r2, r8
 800bf96:	464b      	mov	r3, r9
 800bf98:	f7f4 f942 	bl	8000220 <__aeabi_dsub>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	2000      	movs	r0, #0
 800bfa2:	4939      	ldr	r1, [pc, #228]	; (800c088 <__ieee754_pow+0xa08>)
 800bfa4:	f7f4 f93c 	bl	8000220 <__aeabi_dsub>
 800bfa8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800bfac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	da2f      	bge.n	800c016 <__ieee754_pow+0x996>
 800bfb6:	4650      	mov	r0, sl
 800bfb8:	ec43 2b10 	vmov	d0, r2, r3
 800bfbc:	f000 f9c0 	bl	800c340 <scalbn>
 800bfc0:	ec51 0b10 	vmov	r0, r1, d0
 800bfc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfc8:	f7ff bbf1 	b.w	800b7ae <__ieee754_pow+0x12e>
 800bfcc:	4b2f      	ldr	r3, [pc, #188]	; (800c08c <__ieee754_pow+0xa0c>)
 800bfce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bfd2:	429e      	cmp	r6, r3
 800bfd4:	f77f af0c 	ble.w	800bdf0 <__ieee754_pow+0x770>
 800bfd8:	4b2d      	ldr	r3, [pc, #180]	; (800c090 <__ieee754_pow+0xa10>)
 800bfda:	440b      	add	r3, r1
 800bfdc:	4303      	orrs	r3, r0
 800bfde:	d00b      	beq.n	800bff8 <__ieee754_pow+0x978>
 800bfe0:	a325      	add	r3, pc, #148	; (adr r3, 800c078 <__ieee754_pow+0x9f8>)
 800bfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfea:	f7f4 fad1 	bl	8000590 <__aeabi_dmul>
 800bfee:	a322      	add	r3, pc, #136	; (adr r3, 800c078 <__ieee754_pow+0x9f8>)
 800bff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff4:	f7ff bbdb 	b.w	800b7ae <__ieee754_pow+0x12e>
 800bff8:	4622      	mov	r2, r4
 800bffa:	462b      	mov	r3, r5
 800bffc:	f7f4 f910 	bl	8000220 <__aeabi_dsub>
 800c000:	4642      	mov	r2, r8
 800c002:	464b      	mov	r3, r9
 800c004:	f7f4 fd4a 	bl	8000a9c <__aeabi_dcmpge>
 800c008:	2800      	cmp	r0, #0
 800c00a:	f43f aef1 	beq.w	800bdf0 <__ieee754_pow+0x770>
 800c00e:	e7e7      	b.n	800bfe0 <__ieee754_pow+0x960>
 800c010:	f04f 0a00 	mov.w	sl, #0
 800c014:	e718      	b.n	800be48 <__ieee754_pow+0x7c8>
 800c016:	4621      	mov	r1, r4
 800c018:	e7d4      	b.n	800bfc4 <__ieee754_pow+0x944>
 800c01a:	2000      	movs	r0, #0
 800c01c:	491a      	ldr	r1, [pc, #104]	; (800c088 <__ieee754_pow+0xa08>)
 800c01e:	f7ff bb8f 	b.w	800b740 <__ieee754_pow+0xc0>
 800c022:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c026:	f7ff bb8b 	b.w	800b740 <__ieee754_pow+0xc0>
 800c02a:	4630      	mov	r0, r6
 800c02c:	4639      	mov	r1, r7
 800c02e:	f7ff bb87 	b.w	800b740 <__ieee754_pow+0xc0>
 800c032:	4693      	mov	fp, r2
 800c034:	f7ff bb98 	b.w	800b768 <__ieee754_pow+0xe8>
 800c038:	00000000 	.word	0x00000000
 800c03c:	3fe62e43 	.word	0x3fe62e43
 800c040:	fefa39ef 	.word	0xfefa39ef
 800c044:	3fe62e42 	.word	0x3fe62e42
 800c048:	0ca86c39 	.word	0x0ca86c39
 800c04c:	be205c61 	.word	0xbe205c61
 800c050:	72bea4d0 	.word	0x72bea4d0
 800c054:	3e663769 	.word	0x3e663769
 800c058:	c5d26bf1 	.word	0xc5d26bf1
 800c05c:	3ebbbd41 	.word	0x3ebbbd41
 800c060:	af25de2c 	.word	0xaf25de2c
 800c064:	3f11566a 	.word	0x3f11566a
 800c068:	16bebd93 	.word	0x16bebd93
 800c06c:	3f66c16c 	.word	0x3f66c16c
 800c070:	5555553e 	.word	0x5555553e
 800c074:	3fc55555 	.word	0x3fc55555
 800c078:	c2f8f359 	.word	0xc2f8f359
 800c07c:	01a56e1f 	.word	0x01a56e1f
 800c080:	3fe00000 	.word	0x3fe00000
 800c084:	000fffff 	.word	0x000fffff
 800c088:	3ff00000 	.word	0x3ff00000
 800c08c:	4090cbff 	.word	0x4090cbff
 800c090:	3f6f3400 	.word	0x3f6f3400
 800c094:	652b82fe 	.word	0x652b82fe
 800c098:	3c971547 	.word	0x3c971547

0800c09c <__ieee754_sqrt>:
 800c09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0a0:	4955      	ldr	r1, [pc, #340]	; (800c1f8 <__ieee754_sqrt+0x15c>)
 800c0a2:	ec55 4b10 	vmov	r4, r5, d0
 800c0a6:	43a9      	bics	r1, r5
 800c0a8:	462b      	mov	r3, r5
 800c0aa:	462a      	mov	r2, r5
 800c0ac:	d112      	bne.n	800c0d4 <__ieee754_sqrt+0x38>
 800c0ae:	ee10 2a10 	vmov	r2, s0
 800c0b2:	ee10 0a10 	vmov	r0, s0
 800c0b6:	4629      	mov	r1, r5
 800c0b8:	f7f4 fa6a 	bl	8000590 <__aeabi_dmul>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	460b      	mov	r3, r1
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	4629      	mov	r1, r5
 800c0c4:	f7f4 f8ae 	bl	8000224 <__adddf3>
 800c0c8:	4604      	mov	r4, r0
 800c0ca:	460d      	mov	r5, r1
 800c0cc:	ec45 4b10 	vmov	d0, r4, r5
 800c0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0d4:	2d00      	cmp	r5, #0
 800c0d6:	ee10 0a10 	vmov	r0, s0
 800c0da:	4621      	mov	r1, r4
 800c0dc:	dc0f      	bgt.n	800c0fe <__ieee754_sqrt+0x62>
 800c0de:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c0e2:	4330      	orrs	r0, r6
 800c0e4:	d0f2      	beq.n	800c0cc <__ieee754_sqrt+0x30>
 800c0e6:	b155      	cbz	r5, 800c0fe <__ieee754_sqrt+0x62>
 800c0e8:	ee10 2a10 	vmov	r2, s0
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	4629      	mov	r1, r5
 800c0f0:	f7f4 f896 	bl	8000220 <__aeabi_dsub>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	f7f4 fb74 	bl	80007e4 <__aeabi_ddiv>
 800c0fc:	e7e4      	b.n	800c0c8 <__ieee754_sqrt+0x2c>
 800c0fe:	151b      	asrs	r3, r3, #20
 800c100:	d073      	beq.n	800c1ea <__ieee754_sqrt+0x14e>
 800c102:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c106:	07dd      	lsls	r5, r3, #31
 800c108:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c10c:	bf48      	it	mi
 800c10e:	0fc8      	lsrmi	r0, r1, #31
 800c110:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c114:	bf44      	itt	mi
 800c116:	0049      	lslmi	r1, r1, #1
 800c118:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c11c:	2500      	movs	r5, #0
 800c11e:	1058      	asrs	r0, r3, #1
 800c120:	0fcb      	lsrs	r3, r1, #31
 800c122:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c126:	0049      	lsls	r1, r1, #1
 800c128:	2316      	movs	r3, #22
 800c12a:	462c      	mov	r4, r5
 800c12c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c130:	19a7      	adds	r7, r4, r6
 800c132:	4297      	cmp	r7, r2
 800c134:	bfde      	ittt	le
 800c136:	19bc      	addle	r4, r7, r6
 800c138:	1bd2      	suble	r2, r2, r7
 800c13a:	19ad      	addle	r5, r5, r6
 800c13c:	0fcf      	lsrs	r7, r1, #31
 800c13e:	3b01      	subs	r3, #1
 800c140:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c144:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c148:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c14c:	d1f0      	bne.n	800c130 <__ieee754_sqrt+0x94>
 800c14e:	f04f 0c20 	mov.w	ip, #32
 800c152:	469e      	mov	lr, r3
 800c154:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c158:	42a2      	cmp	r2, r4
 800c15a:	eb06 070e 	add.w	r7, r6, lr
 800c15e:	dc02      	bgt.n	800c166 <__ieee754_sqrt+0xca>
 800c160:	d112      	bne.n	800c188 <__ieee754_sqrt+0xec>
 800c162:	428f      	cmp	r7, r1
 800c164:	d810      	bhi.n	800c188 <__ieee754_sqrt+0xec>
 800c166:	2f00      	cmp	r7, #0
 800c168:	eb07 0e06 	add.w	lr, r7, r6
 800c16c:	da42      	bge.n	800c1f4 <__ieee754_sqrt+0x158>
 800c16e:	f1be 0f00 	cmp.w	lr, #0
 800c172:	db3f      	blt.n	800c1f4 <__ieee754_sqrt+0x158>
 800c174:	f104 0801 	add.w	r8, r4, #1
 800c178:	1b12      	subs	r2, r2, r4
 800c17a:	428f      	cmp	r7, r1
 800c17c:	bf88      	it	hi
 800c17e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c182:	1bc9      	subs	r1, r1, r7
 800c184:	4433      	add	r3, r6
 800c186:	4644      	mov	r4, r8
 800c188:	0052      	lsls	r2, r2, #1
 800c18a:	f1bc 0c01 	subs.w	ip, ip, #1
 800c18e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c192:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c196:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c19a:	d1dd      	bne.n	800c158 <__ieee754_sqrt+0xbc>
 800c19c:	430a      	orrs	r2, r1
 800c19e:	d006      	beq.n	800c1ae <__ieee754_sqrt+0x112>
 800c1a0:	1c5c      	adds	r4, r3, #1
 800c1a2:	bf13      	iteet	ne
 800c1a4:	3301      	addne	r3, #1
 800c1a6:	3501      	addeq	r5, #1
 800c1a8:	4663      	moveq	r3, ip
 800c1aa:	f023 0301 	bicne.w	r3, r3, #1
 800c1ae:	106a      	asrs	r2, r5, #1
 800c1b0:	085b      	lsrs	r3, r3, #1
 800c1b2:	07e9      	lsls	r1, r5, #31
 800c1b4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c1b8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c1bc:	bf48      	it	mi
 800c1be:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c1c2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c1c6:	461c      	mov	r4, r3
 800c1c8:	e780      	b.n	800c0cc <__ieee754_sqrt+0x30>
 800c1ca:	0aca      	lsrs	r2, r1, #11
 800c1cc:	3815      	subs	r0, #21
 800c1ce:	0549      	lsls	r1, r1, #21
 800c1d0:	2a00      	cmp	r2, #0
 800c1d2:	d0fa      	beq.n	800c1ca <__ieee754_sqrt+0x12e>
 800c1d4:	02d6      	lsls	r6, r2, #11
 800c1d6:	d50a      	bpl.n	800c1ee <__ieee754_sqrt+0x152>
 800c1d8:	f1c3 0420 	rsb	r4, r3, #32
 800c1dc:	fa21 f404 	lsr.w	r4, r1, r4
 800c1e0:	1e5d      	subs	r5, r3, #1
 800c1e2:	4099      	lsls	r1, r3
 800c1e4:	4322      	orrs	r2, r4
 800c1e6:	1b43      	subs	r3, r0, r5
 800c1e8:	e78b      	b.n	800c102 <__ieee754_sqrt+0x66>
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	e7f0      	b.n	800c1d0 <__ieee754_sqrt+0x134>
 800c1ee:	0052      	lsls	r2, r2, #1
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	e7ef      	b.n	800c1d4 <__ieee754_sqrt+0x138>
 800c1f4:	46a0      	mov	r8, r4
 800c1f6:	e7bf      	b.n	800c178 <__ieee754_sqrt+0xdc>
 800c1f8:	7ff00000 	.word	0x7ff00000

0800c1fc <fabs>:
 800c1fc:	ec51 0b10 	vmov	r0, r1, d0
 800c200:	ee10 2a10 	vmov	r2, s0
 800c204:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c208:	ec43 2b10 	vmov	d0, r2, r3
 800c20c:	4770      	bx	lr

0800c20e <finite>:
 800c20e:	ee10 3a90 	vmov	r3, s1
 800c212:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800c216:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c21a:	0fc0      	lsrs	r0, r0, #31
 800c21c:	4770      	bx	lr

0800c21e <matherr>:
 800c21e:	2000      	movs	r0, #0
 800c220:	4770      	bx	lr
 800c222:	0000      	movs	r0, r0
 800c224:	0000      	movs	r0, r0
	...

0800c228 <nan>:
 800c228:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c230 <nan+0x8>
 800c22c:	4770      	bx	lr
 800c22e:	bf00      	nop
 800c230:	00000000 	.word	0x00000000
 800c234:	7ff80000 	.word	0x7ff80000

0800c238 <rint>:
 800c238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c23a:	ec51 0b10 	vmov	r0, r1, d0
 800c23e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c242:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c246:	2e13      	cmp	r6, #19
 800c248:	460b      	mov	r3, r1
 800c24a:	ee10 4a10 	vmov	r4, s0
 800c24e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c252:	dc56      	bgt.n	800c302 <rint+0xca>
 800c254:	2e00      	cmp	r6, #0
 800c256:	da2b      	bge.n	800c2b0 <rint+0x78>
 800c258:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c25c:	4302      	orrs	r2, r0
 800c25e:	d023      	beq.n	800c2a8 <rint+0x70>
 800c260:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c264:	4302      	orrs	r2, r0
 800c266:	4254      	negs	r4, r2
 800c268:	4314      	orrs	r4, r2
 800c26a:	0c4b      	lsrs	r3, r1, #17
 800c26c:	0b24      	lsrs	r4, r4, #12
 800c26e:	045b      	lsls	r3, r3, #17
 800c270:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c274:	ea44 0103 	orr.w	r1, r4, r3
 800c278:	460b      	mov	r3, r1
 800c27a:	492f      	ldr	r1, [pc, #188]	; (800c338 <rint+0x100>)
 800c27c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800c280:	e9d1 6700 	ldrd	r6, r7, [r1]
 800c284:	4602      	mov	r2, r0
 800c286:	4639      	mov	r1, r7
 800c288:	4630      	mov	r0, r6
 800c28a:	f7f3 ffcb 	bl	8000224 <__adddf3>
 800c28e:	e9cd 0100 	strd	r0, r1, [sp]
 800c292:	463b      	mov	r3, r7
 800c294:	4632      	mov	r2, r6
 800c296:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c29a:	f7f3 ffc1 	bl	8000220 <__aeabi_dsub>
 800c29e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c2a2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c2a6:	4639      	mov	r1, r7
 800c2a8:	ec41 0b10 	vmov	d0, r0, r1
 800c2ac:	b003      	add	sp, #12
 800c2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2b0:	4a22      	ldr	r2, [pc, #136]	; (800c33c <rint+0x104>)
 800c2b2:	4132      	asrs	r2, r6
 800c2b4:	ea01 0702 	and.w	r7, r1, r2
 800c2b8:	4307      	orrs	r7, r0
 800c2ba:	d0f5      	beq.n	800c2a8 <rint+0x70>
 800c2bc:	0852      	lsrs	r2, r2, #1
 800c2be:	4011      	ands	r1, r2
 800c2c0:	430c      	orrs	r4, r1
 800c2c2:	d00b      	beq.n	800c2dc <rint+0xa4>
 800c2c4:	ea23 0202 	bic.w	r2, r3, r2
 800c2c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c2cc:	2e13      	cmp	r6, #19
 800c2ce:	fa43 f306 	asr.w	r3, r3, r6
 800c2d2:	bf0c      	ite	eq
 800c2d4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800c2d8:	2400      	movne	r4, #0
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	4916      	ldr	r1, [pc, #88]	; (800c338 <rint+0x100>)
 800c2de:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c2e2:	4622      	mov	r2, r4
 800c2e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	4629      	mov	r1, r5
 800c2ec:	f7f3 ff9a 	bl	8000224 <__adddf3>
 800c2f0:	e9cd 0100 	strd	r0, r1, [sp]
 800c2f4:	4622      	mov	r2, r4
 800c2f6:	462b      	mov	r3, r5
 800c2f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2fc:	f7f3 ff90 	bl	8000220 <__aeabi_dsub>
 800c300:	e7d2      	b.n	800c2a8 <rint+0x70>
 800c302:	2e33      	cmp	r6, #51	; 0x33
 800c304:	dd07      	ble.n	800c316 <rint+0xde>
 800c306:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c30a:	d1cd      	bne.n	800c2a8 <rint+0x70>
 800c30c:	ee10 2a10 	vmov	r2, s0
 800c310:	f7f3 ff88 	bl	8000224 <__adddf3>
 800c314:	e7c8      	b.n	800c2a8 <rint+0x70>
 800c316:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800c31a:	f04f 32ff 	mov.w	r2, #4294967295
 800c31e:	40f2      	lsrs	r2, r6
 800c320:	4210      	tst	r0, r2
 800c322:	d0c1      	beq.n	800c2a8 <rint+0x70>
 800c324:	0852      	lsrs	r2, r2, #1
 800c326:	4210      	tst	r0, r2
 800c328:	bf1f      	itttt	ne
 800c32a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800c32e:	ea20 0202 	bicne.w	r2, r0, r2
 800c332:	4134      	asrne	r4, r6
 800c334:	4314      	orrne	r4, r2
 800c336:	e7d1      	b.n	800c2dc <rint+0xa4>
 800c338:	0800c4f8 	.word	0x0800c4f8
 800c33c:	000fffff 	.word	0x000fffff

0800c340 <scalbn>:
 800c340:	b570      	push	{r4, r5, r6, lr}
 800c342:	ec55 4b10 	vmov	r4, r5, d0
 800c346:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c34a:	4606      	mov	r6, r0
 800c34c:	462b      	mov	r3, r5
 800c34e:	b9aa      	cbnz	r2, 800c37c <scalbn+0x3c>
 800c350:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c354:	4323      	orrs	r3, r4
 800c356:	d03b      	beq.n	800c3d0 <scalbn+0x90>
 800c358:	4b31      	ldr	r3, [pc, #196]	; (800c420 <scalbn+0xe0>)
 800c35a:	4629      	mov	r1, r5
 800c35c:	2200      	movs	r2, #0
 800c35e:	ee10 0a10 	vmov	r0, s0
 800c362:	f7f4 f915 	bl	8000590 <__aeabi_dmul>
 800c366:	4b2f      	ldr	r3, [pc, #188]	; (800c424 <scalbn+0xe4>)
 800c368:	429e      	cmp	r6, r3
 800c36a:	4604      	mov	r4, r0
 800c36c:	460d      	mov	r5, r1
 800c36e:	da12      	bge.n	800c396 <scalbn+0x56>
 800c370:	a327      	add	r3, pc, #156	; (adr r3, 800c410 <scalbn+0xd0>)
 800c372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c376:	f7f4 f90b 	bl	8000590 <__aeabi_dmul>
 800c37a:	e009      	b.n	800c390 <scalbn+0x50>
 800c37c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c380:	428a      	cmp	r2, r1
 800c382:	d10c      	bne.n	800c39e <scalbn+0x5e>
 800c384:	ee10 2a10 	vmov	r2, s0
 800c388:	4620      	mov	r0, r4
 800c38a:	4629      	mov	r1, r5
 800c38c:	f7f3 ff4a 	bl	8000224 <__adddf3>
 800c390:	4604      	mov	r4, r0
 800c392:	460d      	mov	r5, r1
 800c394:	e01c      	b.n	800c3d0 <scalbn+0x90>
 800c396:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c39a:	460b      	mov	r3, r1
 800c39c:	3a36      	subs	r2, #54	; 0x36
 800c39e:	4432      	add	r2, r6
 800c3a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c3a4:	428a      	cmp	r2, r1
 800c3a6:	dd0b      	ble.n	800c3c0 <scalbn+0x80>
 800c3a8:	ec45 4b11 	vmov	d1, r4, r5
 800c3ac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c418 <scalbn+0xd8>
 800c3b0:	f000 f83c 	bl	800c42c <copysign>
 800c3b4:	a318      	add	r3, pc, #96	; (adr r3, 800c418 <scalbn+0xd8>)
 800c3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ba:	ec51 0b10 	vmov	r0, r1, d0
 800c3be:	e7da      	b.n	800c376 <scalbn+0x36>
 800c3c0:	2a00      	cmp	r2, #0
 800c3c2:	dd08      	ble.n	800c3d6 <scalbn+0x96>
 800c3c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c3c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c3cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c3d0:	ec45 4b10 	vmov	d0, r4, r5
 800c3d4:	bd70      	pop	{r4, r5, r6, pc}
 800c3d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c3da:	da0d      	bge.n	800c3f8 <scalbn+0xb8>
 800c3dc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c3e0:	429e      	cmp	r6, r3
 800c3e2:	ec45 4b11 	vmov	d1, r4, r5
 800c3e6:	dce1      	bgt.n	800c3ac <scalbn+0x6c>
 800c3e8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c410 <scalbn+0xd0>
 800c3ec:	f000 f81e 	bl	800c42c <copysign>
 800c3f0:	a307      	add	r3, pc, #28	; (adr r3, 800c410 <scalbn+0xd0>)
 800c3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f6:	e7e0      	b.n	800c3ba <scalbn+0x7a>
 800c3f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c3fc:	3236      	adds	r2, #54	; 0x36
 800c3fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c402:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c406:	4620      	mov	r0, r4
 800c408:	4629      	mov	r1, r5
 800c40a:	2200      	movs	r2, #0
 800c40c:	4b06      	ldr	r3, [pc, #24]	; (800c428 <scalbn+0xe8>)
 800c40e:	e7b2      	b.n	800c376 <scalbn+0x36>
 800c410:	c2f8f359 	.word	0xc2f8f359
 800c414:	01a56e1f 	.word	0x01a56e1f
 800c418:	8800759c 	.word	0x8800759c
 800c41c:	7e37e43c 	.word	0x7e37e43c
 800c420:	43500000 	.word	0x43500000
 800c424:	ffff3cb0 	.word	0xffff3cb0
 800c428:	3c900000 	.word	0x3c900000

0800c42c <copysign>:
 800c42c:	ec51 0b10 	vmov	r0, r1, d0
 800c430:	ee11 0a90 	vmov	r0, s3
 800c434:	ee10 2a10 	vmov	r2, s0
 800c438:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c43c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c440:	ea41 0300 	orr.w	r3, r1, r0
 800c444:	ec43 2b10 	vmov	d0, r2, r3
 800c448:	4770      	bx	lr
	...

0800c44c <_init>:
 800c44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c44e:	bf00      	nop
 800c450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c452:	bc08      	pop	{r3}
 800c454:	469e      	mov	lr, r3
 800c456:	4770      	bx	lr

0800c458 <_fini>:
 800c458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c45a:	bf00      	nop
 800c45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c45e:	bc08      	pop	{r3}
 800c460:	469e      	mov	lr, r3
 800c462:	4770      	bx	lr
