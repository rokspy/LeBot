
LeBot_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c68  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001e40  08001e40  00011e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e50  08001e50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e50  08001e50  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e50  08001e50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e50  08001e50  00011e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e54  08001e54  00011e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08001e64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  2000011c  08001e64  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a945  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015e8  00000000  00000000  0002a981  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc8  00000000  00000000  0002bf70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b10  00000000  00000000  0002cb38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c5ab  00000000  00000000  0002d648  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008bef  00000000  00000000  00049bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bab1f  00000000  00000000  000527e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010d301  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003170  00000000  00000000  0010d37c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001e28 	.word	0x08001e28

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08001e28 	.word	0x08001e28

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fae5 	bl	80007ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f836 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f980 	bl	8000528 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000228:	f000 f87e 	bl	8000328 <MX_TIM2_Init>
  MX_TIM3_Init();
 800022c:	f000 f8d0 	bl	80003d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000230:	f000 f924 	bl	800047c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000234:	2104      	movs	r1, #4
 8000236:	480e      	ldr	r0, [pc, #56]	; (8000270 <main+0x58>)
 8000238:	f001 fc04 	bl	8001a44 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800023c:	2104      	movs	r1, #4
 800023e:	480d      	ldr	r0, [pc, #52]	; (8000274 <main+0x5c>)
 8000240:	f001 fc00 	bl	8001a44 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000244:	2104      	movs	r1, #4
 8000246:	480c      	ldr	r0, [pc, #48]	; (8000278 <main+0x60>)
 8000248:	f001 fbfc 	bl	8001a44 <HAL_TIM_Encoder_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  motor_pos_2 = TIM2->CNT;
 800024c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000252:	b21a      	sxth	r2, r3
 8000254:	4b09      	ldr	r3, [pc, #36]	; (800027c <main+0x64>)
 8000256:	801a      	strh	r2, [r3, #0]
	  motor_pos_1 = TIM3->CNT;
 8000258:	4b09      	ldr	r3, [pc, #36]	; (8000280 <main+0x68>)
 800025a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800025c:	b21a      	sxth	r2, r3
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <main+0x6c>)
 8000260:	801a      	strh	r2, [r3, #0]
	  motor_pos_3 = TIM4->CNT;
 8000262:	4b09      	ldr	r3, [pc, #36]	; (8000288 <main+0x70>)
 8000264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000266:	b21a      	sxth	r2, r3
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <main+0x74>)
 800026a:	801a      	strh	r2, [r3, #0]
	  motor_pos_2 = TIM2->CNT;
 800026c:	e7ee      	b.n	800024c <main+0x34>
 800026e:	bf00      	nop
 8000270:	200000c8 	.word	0x200000c8
 8000274:	20000078 	.word	0x20000078
 8000278:	20000028 	.word	0x20000028
 800027c:	200000c4 	.word	0x200000c4
 8000280:	40000400 	.word	0x40000400
 8000284:	20000114 	.word	0x20000114
 8000288:	40000800 	.word	0x40000800
 800028c:	20000074 	.word	0x20000074

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b094      	sub	sp, #80	; 0x50
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	f107 0318 	add.w	r3, r7, #24
 800029a:	2238      	movs	r2, #56	; 0x38
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 fdba 	bl	8001e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
 80002b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002b6:	f000 fd6f 	bl	8000d98 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ba:	2302      	movs	r3, #2
 80002bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c4:	2340      	movs	r3, #64	; 0x40
 80002c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c8:	2302      	movs	r3, #2
 80002ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002cc:	2302      	movs	r3, #2
 80002ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002d0:	2301      	movs	r3, #1
 80002d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002d4:	2308      	movs	r3, #8
 80002d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002d8:	2302      	movs	r3, #2
 80002da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002dc:	2302      	movs	r3, #2
 80002de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002e0:	2302      	movs	r3, #2
 80002e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e4:	f107 0318 	add.w	r3, r7, #24
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 fe09 	bl	8000f00 <HAL_RCC_OscConfig>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002f4:	f000 f93c 	bl	8000570 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f8:	230f      	movs	r3, #15
 80002fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fc:	2303      	movs	r3, #3
 80002fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2101      	movs	r1, #1
 8000310:	4618      	mov	r0, r3
 8000312:	f001 f90d 	bl	8001530 <HAL_RCC_ClockConfig>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800031c:	f000 f928 	bl	8000570 <Error_Handler>
  }
}
 8000320:	bf00      	nop
 8000322:	3750      	adds	r7, #80	; 0x50
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b08c      	sub	sp, #48	; 0x30
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800032e:	f107 030c 	add.w	r3, r7, #12
 8000332:	2224      	movs	r2, #36	; 0x24
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f001 fd6e 	bl	8001e18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800033c:	463b      	mov	r3, r7
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000346:	4b21      	ldr	r3, [pc, #132]	; (80003cc <MX_TIM2_Init+0xa4>)
 8000348:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800034c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800034e:	4b1f      	ldr	r3, [pc, #124]	; (80003cc <MX_TIM2_Init+0xa4>)
 8000350:	2200      	movs	r2, #0
 8000352:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000354:	4b1d      	ldr	r3, [pc, #116]	; (80003cc <MX_TIM2_Init+0xa4>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800035a:	4b1c      	ldr	r3, [pc, #112]	; (80003cc <MX_TIM2_Init+0xa4>)
 800035c:	f04f 32ff 	mov.w	r2, #4294967295
 8000360:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000362:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <MX_TIM2_Init+0xa4>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <MX_TIM2_Init+0xa4>)
 800036a:	2200      	movs	r2, #0
 800036c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800036e:	2301      	movs	r3, #1
 8000370:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000372:	2300      	movs	r3, #0
 8000374:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000376:	2301      	movs	r3, #1
 8000378:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000382:	2300      	movs	r3, #0
 8000384:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000386:	2301      	movs	r3, #1
 8000388:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000392:	f107 030c 	add.w	r3, r7, #12
 8000396:	4619      	mov	r1, r3
 8000398:	480c      	ldr	r0, [pc, #48]	; (80003cc <MX_TIM2_Init+0xa4>)
 800039a:	f001 faad 	bl	80018f8 <HAL_TIM_Encoder_Init>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80003a4:	f000 f8e4 	bl	8000570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003a8:	2300      	movs	r3, #0
 80003aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003b0:	463b      	mov	r3, r7
 80003b2:	4619      	mov	r1, r3
 80003b4:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_TIM2_Init+0xa4>)
 80003b6:	f001 fc89 	bl	8001ccc <HAL_TIMEx_MasterConfigSynchronization>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80003c0:	f000 f8d6 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003c4:	bf00      	nop
 80003c6:	3730      	adds	r7, #48	; 0x30
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	200000c8 	.word	0x200000c8

080003d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b08c      	sub	sp, #48	; 0x30
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80003d6:	f107 030c 	add.w	r3, r7, #12
 80003da:	2224      	movs	r2, #36	; 0x24
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f001 fd1a 	bl	8001e18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e4:	463b      	mov	r3, r7
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003ee:	4b21      	ldr	r3, [pc, #132]	; (8000474 <MX_TIM3_Init+0xa4>)
 80003f0:	4a21      	ldr	r2, [pc, #132]	; (8000478 <MX_TIM3_Init+0xa8>)
 80003f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003f4:	4b1f      	ldr	r3, [pc, #124]	; (8000474 <MX_TIM3_Init+0xa4>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003fa:	4b1e      	ldr	r3, [pc, #120]	; (8000474 <MX_TIM3_Init+0xa4>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000400:	4b1c      	ldr	r3, [pc, #112]	; (8000474 <MX_TIM3_Init+0xa4>)
 8000402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000406:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000408:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <MX_TIM3_Init+0xa4>)
 800040a:	2200      	movs	r2, #0
 800040c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800040e:	4b19      	ldr	r3, [pc, #100]	; (8000474 <MX_TIM3_Init+0xa4>)
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000414:	2301      	movs	r3, #1
 8000416:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000418:	2300      	movs	r3, #0
 800041a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800041c:	2301      	movs	r3, #1
 800041e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000424:	2300      	movs	r3, #0
 8000426:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000428:	2300      	movs	r3, #0
 800042a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800042c:	2301      	movs	r3, #1
 800042e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000438:	f107 030c 	add.w	r3, r7, #12
 800043c:	4619      	mov	r1, r3
 800043e:	480d      	ldr	r0, [pc, #52]	; (8000474 <MX_TIM3_Init+0xa4>)
 8000440:	f001 fa5a 	bl	80018f8 <HAL_TIM_Encoder_Init>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800044a:	f000 f891 	bl	8000570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800044e:	2300      	movs	r3, #0
 8000450:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000452:	2300      	movs	r3, #0
 8000454:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000456:	463b      	mov	r3, r7
 8000458:	4619      	mov	r1, r3
 800045a:	4806      	ldr	r0, [pc, #24]	; (8000474 <MX_TIM3_Init+0xa4>)
 800045c:	f001 fc36 	bl	8001ccc <HAL_TIMEx_MasterConfigSynchronization>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000466:	f000 f883 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	3730      	adds	r7, #48	; 0x30
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000078 	.word	0x20000078
 8000478:	40000400 	.word	0x40000400

0800047c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b08c      	sub	sp, #48	; 0x30
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000482:	f107 030c 	add.w	r3, r7, #12
 8000486:	2224      	movs	r2, #36	; 0x24
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f001 fcc4 	bl	8001e18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000490:	463b      	mov	r3, r7
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800049a:	4b21      	ldr	r3, [pc, #132]	; (8000520 <MX_TIM4_Init+0xa4>)
 800049c:	4a21      	ldr	r2, [pc, #132]	; (8000524 <MX_TIM4_Init+0xa8>)
 800049e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80004a0:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <MX_TIM4_Init+0xa4>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a6:	4b1e      	ldr	r3, [pc, #120]	; (8000520 <MX_TIM4_Init+0xa4>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80004ac:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <MX_TIM4_Init+0xa4>)
 80004ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b4:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <MX_TIM4_Init+0xa4>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ba:	4b19      	ldr	r3, [pc, #100]	; (8000520 <MX_TIM4_Init+0xa4>)
 80004bc:	2200      	movs	r2, #0
 80004be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80004c0:	2301      	movs	r3, #1
 80004c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004c4:	2300      	movs	r3, #0
 80004c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004c8:	2301      	movs	r3, #1
 80004ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004d4:	2300      	movs	r3, #0
 80004d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004d8:	2301      	movs	r3, #1
 80004da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004dc:	2300      	movs	r3, #0
 80004de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80004e4:	f107 030c 	add.w	r3, r7, #12
 80004e8:	4619      	mov	r1, r3
 80004ea:	480d      	ldr	r0, [pc, #52]	; (8000520 <MX_TIM4_Init+0xa4>)
 80004ec:	f001 fa04 	bl	80018f8 <HAL_TIM_Encoder_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80004f6:	f000 f83b 	bl	8000570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004fa:	2300      	movs	r3, #0
 80004fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004fe:	2300      	movs	r3, #0
 8000500:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000502:	463b      	mov	r3, r7
 8000504:	4619      	mov	r1, r3
 8000506:	4806      	ldr	r0, [pc, #24]	; (8000520 <MX_TIM4_Init+0xa4>)
 8000508:	f001 fbe0 	bl	8001ccc <HAL_TIMEx_MasterConfigSynchronization>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000512:	f000 f82d 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000516:	bf00      	nop
 8000518:	3730      	adds	r7, #48	; 0x30
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000028 	.word	0x20000028
 8000524:	40000800 	.word	0x40000800

08000528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_GPIO_Init+0x44>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <MX_GPIO_Init+0x44>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MX_GPIO_Init+0x44>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_GPIO_Init+0x44>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	4a08      	ldr	r2, [pc, #32]	; (800056c <MX_GPIO_Init+0x44>)
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <MX_GPIO_Init+0x44>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	683b      	ldr	r3, [r7, #0]

}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000

08000570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
	...

08000580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_MspInit+0x44>)
 8000588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800058a:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <HAL_MspInit+0x44>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6613      	str	r3, [r2, #96]	; 0x60
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <HAL_MspInit+0x44>)
 8000594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_MspInit+0x44>)
 80005a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005a2:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <HAL_MspInit+0x44>)
 80005a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a8:	6593      	str	r3, [r2, #88]	; 0x58
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_MspInit+0x44>)
 80005ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80005b6:	f000 fc93 	bl	8000ee0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000

080005c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08e      	sub	sp, #56	; 0x38
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005e8:	d129      	bne.n	800063e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005ea:	4b45      	ldr	r3, [pc, #276]	; (8000700 <HAL_TIM_Encoder_MspInit+0x138>)
 80005ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ee:	4a44      	ldr	r2, [pc, #272]	; (8000700 <HAL_TIM_Encoder_MspInit+0x138>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6593      	str	r3, [r2, #88]	; 0x58
 80005f6:	4b42      	ldr	r3, [pc, #264]	; (8000700 <HAL_TIM_Encoder_MspInit+0x138>)
 80005f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	623b      	str	r3, [r7, #32]
 8000600:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b3f      	ldr	r3, [pc, #252]	; (8000700 <HAL_TIM_Encoder_MspInit+0x138>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	4a3e      	ldr	r2, [pc, #248]	; (8000700 <HAL_TIM_Encoder_MspInit+0x138>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060e:	4b3c      	ldr	r3, [pc, #240]	; (8000700 <HAL_TIM_Encoder_MspInit+0x138>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	61fb      	str	r3, [r7, #28]
 8000618:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800061a:	2303      	movs	r3, #3
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061e:	2302      	movs	r3, #2
 8000620:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800062a:	2301      	movs	r3, #1
 800062c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000632:	4619      	mov	r1, r3
 8000634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000638:	f000 fa2c 	bl	8000a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800063c:	e05b      	b.n	80006f6 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a30      	ldr	r2, [pc, #192]	; (8000704 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d129      	bne.n	800069c <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000648:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <HAL_TIM_Encoder_MspInit+0x138>)
 800064a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800064c:	4a2c      	ldr	r2, [pc, #176]	; (8000700 <HAL_TIM_Encoder_MspInit+0x138>)
 800064e:	f043 0302 	orr.w	r3, r3, #2
 8000652:	6593      	str	r3, [r2, #88]	; 0x58
 8000654:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <HAL_TIM_Encoder_MspInit+0x138>)
 8000656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000658:	f003 0302 	and.w	r3, r3, #2
 800065c:	61bb      	str	r3, [r7, #24]
 800065e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b27      	ldr	r3, [pc, #156]	; (8000700 <HAL_TIM_Encoder_MspInit+0x138>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000664:	4a26      	ldr	r2, [pc, #152]	; (8000700 <HAL_TIM_Encoder_MspInit+0x138>)
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <HAL_TIM_Encoder_MspInit+0x138>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000678:	2350      	movs	r3, #80	; 0x50
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067c:	2302      	movs	r3, #2
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000688:	2302      	movs	r3, #2
 800068a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000690:	4619      	mov	r1, r3
 8000692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000696:	f000 f9fd 	bl	8000a94 <HAL_GPIO_Init>
}
 800069a:	e02c      	b.n	80006f6 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a19      	ldr	r2, [pc, #100]	; (8000708 <HAL_TIM_Encoder_MspInit+0x140>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d127      	bne.n	80006f6 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <HAL_TIM_Encoder_MspInit+0x138>)
 80006a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006aa:	4a15      	ldr	r2, [pc, #84]	; (8000700 <HAL_TIM_Encoder_MspInit+0x138>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	6593      	str	r3, [r2, #88]	; 0x58
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <HAL_TIM_Encoder_MspInit+0x138>)
 80006b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <HAL_TIM_Encoder_MspInit+0x138>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <HAL_TIM_Encoder_MspInit+0x138>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <HAL_TIM_Encoder_MspInit+0x138>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006d6:	23c0      	movs	r3, #192	; 0xc0
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	2302      	movs	r3, #2
 80006dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80006e6:	2302      	movs	r3, #2
 80006e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ee:	4619      	mov	r1, r3
 80006f0:	4806      	ldr	r0, [pc, #24]	; (800070c <HAL_TIM_Encoder_MspInit+0x144>)
 80006f2:	f000 f9cf 	bl	8000a94 <HAL_GPIO_Init>
}
 80006f6:	bf00      	nop
 80006f8:	3738      	adds	r7, #56	; 0x38
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000
 8000704:	40000400 	.word	0x40000400
 8000708:	40000800 	.word	0x40000800
 800070c:	48000400 	.word	0x48000400

08000710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <MemManage_Handler+0x4>

0800072a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <BusFault_Handler+0x4>

08000730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <UsageFault_Handler+0x4>

08000736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000764:	f000 f894 	bl	8000890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <SystemInit+0x28>)
 8000772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000776:	4a07      	ldr	r2, [pc, #28]	; (8000794 <SystemInit+0x28>)
 8000778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800077c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SystemInit+0x28>)
 8000782:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000786:	609a      	str	r2, [r3, #8]
#endif
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800079a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800079e:	490e      	ldr	r1, [pc, #56]	; (80007d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a0:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <LoopForever+0xe>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80007a4:	e002      	b.n	80007ac <LoopCopyDataInit>

080007a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007aa:	3304      	adds	r3, #4

080007ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b0:	d3f9      	bcc.n	80007a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b2:	4a0b      	ldr	r2, [pc, #44]	; (80007e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007b4:	4c0b      	ldr	r4, [pc, #44]	; (80007e4 <LoopForever+0x16>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b8:	e001      	b.n	80007be <LoopFillZerobss>

080007ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007bc:	3204      	adds	r2, #4

080007be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c0:	d3fb      	bcc.n	80007ba <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007c2:	f7ff ffd3 	bl	800076c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007c6:	f001 fb03 	bl	8001dd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ca:	f7ff fd25 	bl	8000218 <main>

080007ce <LoopForever>:

LoopForever:
    b LoopForever
 80007ce:	e7fe      	b.n	80007ce <LoopForever>
  ldr   r0, =_estack
 80007d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80007d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007dc:	08001e58 	.word	0x08001e58
  ldr r2, =_sbss
 80007e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007e4:	2000011c 	.word	0x2000011c

080007e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC1_2_IRQHandler>

080007ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007f0:	2300      	movs	r3, #0
 80007f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f4:	2003      	movs	r0, #3
 80007f6:	f000 f91b 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 f80e 	bl	800081c <HAL_InitTick>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d002      	beq.n	800080c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000806:	2301      	movs	r3, #1
 8000808:	71fb      	strb	r3, [r7, #7]
 800080a:	e001      	b.n	8000810 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800080c:	f7ff feb8 	bl	8000580 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000810:	79fb      	ldrb	r3, [r7, #7]

}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000824:	2300      	movs	r3, #0
 8000826:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <HAL_InitTick+0x68>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d022      	beq.n	8000876 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000830:	4b15      	ldr	r3, [pc, #84]	; (8000888 <HAL_InitTick+0x6c>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <HAL_InitTick+0x68>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800083c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000840:	fbb2 f3f3 	udiv	r3, r2, r3
 8000844:	4618      	mov	r0, r3
 8000846:	f000 f918 	bl	8000a7a <HAL_SYSTICK_Config>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d10f      	bne.n	8000870 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b0f      	cmp	r3, #15
 8000854:	d809      	bhi.n	800086a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000856:	2200      	movs	r2, #0
 8000858:	6879      	ldr	r1, [r7, #4]
 800085a:	f04f 30ff 	mov.w	r0, #4294967295
 800085e:	f000 f8f2 	bl	8000a46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000862:	4a0a      	ldr	r2, [pc, #40]	; (800088c <HAL_InitTick+0x70>)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	e007      	b.n	800087a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	73fb      	strb	r3, [r7, #15]
 800086e:	e004      	b.n	800087a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000870:	2301      	movs	r3, #1
 8000872:	73fb      	strb	r3, [r7, #15]
 8000874:	e001      	b.n	800087a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800087a:	7bfb      	ldrb	r3, [r7, #15]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000008 	.word	0x20000008
 8000888:	20000000 	.word	0x20000000
 800088c:	20000004 	.word	0x20000004

08000890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <HAL_IncTick+0x1c>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <HAL_IncTick+0x20>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4413      	add	r3, r2
 800089e:	4a03      	ldr	r2, [pc, #12]	; (80008ac <HAL_IncTick+0x1c>)
 80008a0:	6013      	str	r3, [r2, #0]
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	20000118 	.word	0x20000118
 80008b0:	20000008 	.word	0x20000008

080008b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <HAL_GetTick+0x14>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	20000118 	.word	0x20000118

080008cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e8:	4013      	ands	r3, r2
 80008ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fe:	4a04      	ldr	r2, [pc, #16]	; (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	60d3      	str	r3, [r2, #12]
}
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <__NVIC_GetPriorityGrouping+0x18>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	0a1b      	lsrs	r3, r3, #8
 800091e:	f003 0307 	and.w	r3, r3, #7
}
 8000922:	4618      	mov	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000940:	2b00      	cmp	r3, #0
 8000942:	db0a      	blt.n	800095a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	b2da      	uxtb	r2, r3
 8000948:	490c      	ldr	r1, [pc, #48]	; (800097c <__NVIC_SetPriority+0x4c>)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	0112      	lsls	r2, r2, #4
 8000950:	b2d2      	uxtb	r2, r2
 8000952:	440b      	add	r3, r1
 8000954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000958:	e00a      	b.n	8000970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4908      	ldr	r1, [pc, #32]	; (8000980 <__NVIC_SetPriority+0x50>)
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	f003 030f 	and.w	r3, r3, #15
 8000966:	3b04      	subs	r3, #4
 8000968:	0112      	lsls	r2, r2, #4
 800096a:	b2d2      	uxtb	r2, r2
 800096c:	440b      	add	r3, r1
 800096e:	761a      	strb	r2, [r3, #24]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000e100 	.word	0xe000e100
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000984:	b480      	push	{r7}
 8000986:	b089      	sub	sp, #36	; 0x24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	f1c3 0307 	rsb	r3, r3, #7
 800099e:	2b04      	cmp	r3, #4
 80009a0:	bf28      	it	cs
 80009a2:	2304      	movcs	r3, #4
 80009a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3304      	adds	r3, #4
 80009aa:	2b06      	cmp	r3, #6
 80009ac:	d902      	bls.n	80009b4 <NVIC_EncodePriority+0x30>
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3b03      	subs	r3, #3
 80009b2:	e000      	b.n	80009b6 <NVIC_EncodePriority+0x32>
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	f04f 32ff 	mov.w	r2, #4294967295
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43da      	mvns	r2, r3
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	401a      	ands	r2, r3
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009cc:	f04f 31ff 	mov.w	r1, #4294967295
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa01 f303 	lsl.w	r3, r1, r3
 80009d6:	43d9      	mvns	r1, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	4313      	orrs	r3, r2
         );
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3724      	adds	r7, #36	; 0x24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009fc:	d301      	bcc.n	8000a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00f      	b.n	8000a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <SysTick_Config+0x40>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f7ff ff8e 	bl	8000930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <SysTick_Config+0x40>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SysTick_Config+0x40>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff ff47 	bl	80008cc <__NVIC_SetPriorityGrouping>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a54:	f7ff ff5e 	bl	8000914 <__NVIC_GetPriorityGrouping>
 8000a58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	6978      	ldr	r0, [r7, #20]
 8000a60:	f7ff ff90 	bl	8000984 <NVIC_EncodePriority>
 8000a64:	4602      	mov	r2, r0
 8000a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff5f 	bl	8000930 <__NVIC_SetPriority>
}
 8000a72:	bf00      	nop
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ffb2 	bl	80009ec <SysTick_Config>
 8000a88:	4603      	mov	r3, r0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000aa2:	e15a      	b.n	8000d5a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 814c 	beq.w	8000d54 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d00b      	beq.n	8000adc <HAL_GPIO_Init+0x48>
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d007      	beq.n	8000adc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad0:	2b11      	cmp	r3, #17
 8000ad2:	d003      	beq.n	8000adc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	2b12      	cmp	r3, #18
 8000ada:	d130      	bne.n	8000b3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	68da      	ldr	r2, [r3, #12]
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b12:	2201      	movs	r2, #1
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	091b      	lsrs	r3, r3, #4
 8000b28:	f003 0201 	and.w	r2, r3, #1
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	2203      	movs	r2, #3
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	689a      	ldr	r2, [r3, #8]
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d003      	beq.n	8000b7e <HAL_GPIO_Init+0xea>
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	2b12      	cmp	r3, #18
 8000b7c:	d123      	bne.n	8000bc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	08da      	lsrs	r2, r3, #3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3208      	adds	r2, #8
 8000b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	220f      	movs	r2, #15
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	691a      	ldr	r2, [r3, #16]
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	f003 0307 	and.w	r3, r3, #7
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	08da      	lsrs	r2, r3, #3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3208      	adds	r2, #8
 8000bc0:	6939      	ldr	r1, [r7, #16]
 8000bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f003 0203 	and.w	r2, r3, #3
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f000 80a6 	beq.w	8000d54 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c08:	4b5b      	ldr	r3, [pc, #364]	; (8000d78 <HAL_GPIO_Init+0x2e4>)
 8000c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0c:	4a5a      	ldr	r2, [pc, #360]	; (8000d78 <HAL_GPIO_Init+0x2e4>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	6613      	str	r3, [r2, #96]	; 0x60
 8000c14:	4b58      	ldr	r3, [pc, #352]	; (8000d78 <HAL_GPIO_Init+0x2e4>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c20:	4a56      	ldr	r2, [pc, #344]	; (8000d7c <HAL_GPIO_Init+0x2e8>)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	089b      	lsrs	r3, r3, #2
 8000c26:	3302      	adds	r3, #2
 8000c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	220f      	movs	r2, #15
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c4a:	d01f      	beq.n	8000c8c <HAL_GPIO_Init+0x1f8>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a4c      	ldr	r2, [pc, #304]	; (8000d80 <HAL_GPIO_Init+0x2ec>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d019      	beq.n	8000c88 <HAL_GPIO_Init+0x1f4>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a4b      	ldr	r2, [pc, #300]	; (8000d84 <HAL_GPIO_Init+0x2f0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d013      	beq.n	8000c84 <HAL_GPIO_Init+0x1f0>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a4a      	ldr	r2, [pc, #296]	; (8000d88 <HAL_GPIO_Init+0x2f4>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d00d      	beq.n	8000c80 <HAL_GPIO_Init+0x1ec>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a49      	ldr	r2, [pc, #292]	; (8000d8c <HAL_GPIO_Init+0x2f8>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d007      	beq.n	8000c7c <HAL_GPIO_Init+0x1e8>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a48      	ldr	r2, [pc, #288]	; (8000d90 <HAL_GPIO_Init+0x2fc>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d101      	bne.n	8000c78 <HAL_GPIO_Init+0x1e4>
 8000c74:	2305      	movs	r3, #5
 8000c76:	e00a      	b.n	8000c8e <HAL_GPIO_Init+0x1fa>
 8000c78:	2306      	movs	r3, #6
 8000c7a:	e008      	b.n	8000c8e <HAL_GPIO_Init+0x1fa>
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	e006      	b.n	8000c8e <HAL_GPIO_Init+0x1fa>
 8000c80:	2303      	movs	r3, #3
 8000c82:	e004      	b.n	8000c8e <HAL_GPIO_Init+0x1fa>
 8000c84:	2302      	movs	r3, #2
 8000c86:	e002      	b.n	8000c8e <HAL_GPIO_Init+0x1fa>
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e000      	b.n	8000c8e <HAL_GPIO_Init+0x1fa>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	f002 0203 	and.w	r2, r2, #3
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	4093      	lsls	r3, r2
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c9e:	4937      	ldr	r1, [pc, #220]	; (8000d7c <HAL_GPIO_Init+0x2e8>)
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	089b      	lsrs	r3, r3, #2
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000cac:	4b39      	ldr	r3, [pc, #228]	; (8000d94 <HAL_GPIO_Init+0x300>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d003      	beq.n	8000cd0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cd0:	4a30      	ldr	r2, [pc, #192]	; (8000d94 <HAL_GPIO_Init+0x300>)
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000cd6:	4b2f      	ldr	r3, [pc, #188]	; (8000d94 <HAL_GPIO_Init+0x300>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cfa:	4a26      	ldr	r2, [pc, #152]	; (8000d94 <HAL_GPIO_Init+0x300>)
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d00:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <HAL_GPIO_Init+0x300>)
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d24:	4a1b      	ldr	r2, [pc, #108]	; (8000d94 <HAL_GPIO_Init+0x300>)
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <HAL_GPIO_Init+0x300>)
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d4e:	4a11      	ldr	r2, [pc, #68]	; (8000d94 <HAL_GPIO_Init+0x300>)
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	3301      	adds	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	fa22 f303 	lsr.w	r3, r2, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f47f ae9d 	bne.w	8000aa4 <HAL_GPIO_Init+0x10>
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	371c      	adds	r7, #28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010000 	.word	0x40010000
 8000d80:	48000400 	.word	0x48000400
 8000d84:	48000800 	.word	0x48000800
 8000d88:	48000c00 	.word	0x48000c00
 8000d8c:	48001000 	.word	0x48001000
 8000d90:	48001400 	.word	0x48001400
 8000d94:	40010400 	.word	0x40010400

08000d98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d141      	bne.n	8000e2a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000da6:	4b4b      	ldr	r3, [pc, #300]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000db2:	d131      	bne.n	8000e18 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000db4:	4b47      	ldr	r3, [pc, #284]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dba:	4a46      	ldr	r2, [pc, #280]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc4:	4b43      	ldr	r3, [pc, #268]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dcc:	4a41      	ldr	r2, [pc, #260]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000dd4:	4b40      	ldr	r3, [pc, #256]	; (8000ed8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2232      	movs	r2, #50	; 0x32
 8000dda:	fb02 f303 	mul.w	r3, r2, r3
 8000dde:	4a3f      	ldr	r2, [pc, #252]	; (8000edc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000de0:	fba2 2303 	umull	r2, r3, r2, r3
 8000de4:	0c9b      	lsrs	r3, r3, #18
 8000de6:	3301      	adds	r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dea:	e002      	b.n	8000df2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df2:	4b38      	ldr	r3, [pc, #224]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dfe:	d102      	bne.n	8000e06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f2      	bne.n	8000dec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e06:	4b33      	ldr	r3, [pc, #204]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e12:	d158      	bne.n	8000ec6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e057      	b.n	8000ec8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e18:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e1e:	4a2d      	ldr	r2, [pc, #180]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000e28:	e04d      	b.n	8000ec6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e30:	d141      	bne.n	8000eb6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e32:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e3e:	d131      	bne.n	8000ea4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e40:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e46:	4a23      	ldr	r2, [pc, #140]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e50:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e58:	4a1e      	ldr	r2, [pc, #120]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2232      	movs	r2, #50	; 0x32
 8000e66:	fb02 f303 	mul.w	r3, r2, r3
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e70:	0c9b      	lsrs	r3, r3, #18
 8000e72:	3301      	adds	r3, #1
 8000e74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e76:	e002      	b.n	8000e7e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e8a:	d102      	bne.n	8000e92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1f2      	bne.n	8000e78 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e9e:	d112      	bne.n	8000ec6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e011      	b.n	8000ec8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000eb4:	e007      	b.n	8000ec6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000eb6:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ec0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	40007000 	.word	0x40007000
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	431bde83 	.word	0x431bde83

08000ee0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000eea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eee:	6093      	str	r3, [r2, #8]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	40007000 	.word	0x40007000

08000f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d101      	bne.n	8000f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e308      	b.n	8001524 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d075      	beq.n	800100a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f1e:	4ba3      	ldr	r3, [pc, #652]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 030c 	and.w	r3, r3, #12
 8000f26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f28:	4ba0      	ldr	r3, [pc, #640]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	2b0c      	cmp	r3, #12
 8000f36:	d102      	bne.n	8000f3e <HAL_RCC_OscConfig+0x3e>
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d002      	beq.n	8000f44 <HAL_RCC_OscConfig+0x44>
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d10b      	bne.n	8000f5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f44:	4b99      	ldr	r3, [pc, #612]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d05b      	beq.n	8001008 <HAL_RCC_OscConfig+0x108>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d157      	bne.n	8001008 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e2e3      	b.n	8001524 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f64:	d106      	bne.n	8000f74 <HAL_RCC_OscConfig+0x74>
 8000f66:	4b91      	ldr	r3, [pc, #580]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a90      	ldr	r2, [pc, #576]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8000f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	e01d      	b.n	8000fb0 <HAL_RCC_OscConfig+0xb0>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f7c:	d10c      	bne.n	8000f98 <HAL_RCC_OscConfig+0x98>
 8000f7e:	4b8b      	ldr	r3, [pc, #556]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a8a      	ldr	r2, [pc, #552]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8000f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	4b88      	ldr	r3, [pc, #544]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a87      	ldr	r2, [pc, #540]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8000f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	e00b      	b.n	8000fb0 <HAL_RCC_OscConfig+0xb0>
 8000f98:	4b84      	ldr	r3, [pc, #528]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a83      	ldr	r2, [pc, #524]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8000f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4b81      	ldr	r3, [pc, #516]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a80      	ldr	r2, [pc, #512]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8000faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d013      	beq.n	8000fe0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb8:	f7ff fc7c 	bl	80008b4 <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fbe:	e008      	b.n	8000fd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc0:	f7ff fc78 	bl	80008b4 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b64      	cmp	r3, #100	; 0x64
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e2a8      	b.n	8001524 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fd2:	4b76      	ldr	r3, [pc, #472]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f0      	beq.n	8000fc0 <HAL_RCC_OscConfig+0xc0>
 8000fde:	e014      	b.n	800100a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fc68 	bl	80008b4 <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe8:	f7ff fc64 	bl	80008b4 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b64      	cmp	r3, #100	; 0x64
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e294      	b.n	8001524 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ffa:	4b6c      	ldr	r3, [pc, #432]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f0      	bne.n	8000fe8 <HAL_RCC_OscConfig+0xe8>
 8001006:	e000      	b.n	800100a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d075      	beq.n	8001102 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001016:	4b65      	ldr	r3, [pc, #404]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 030c 	and.w	r3, r3, #12
 800101e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001020:	4b62      	ldr	r3, [pc, #392]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	2b0c      	cmp	r3, #12
 800102e:	d102      	bne.n	8001036 <HAL_RCC_OscConfig+0x136>
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d002      	beq.n	800103c <HAL_RCC_OscConfig+0x13c>
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	2b04      	cmp	r3, #4
 800103a:	d11f      	bne.n	800107c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800103c:	4b5b      	ldr	r3, [pc, #364]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001044:	2b00      	cmp	r3, #0
 8001046:	d005      	beq.n	8001054 <HAL_RCC_OscConfig+0x154>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e267      	b.n	8001524 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001054:	4b55      	ldr	r3, [pc, #340]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	061b      	lsls	r3, r3, #24
 8001062:	4952      	ldr	r1, [pc, #328]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8001064:	4313      	orrs	r3, r2
 8001066:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001068:	4b51      	ldr	r3, [pc, #324]	; (80011b0 <HAL_RCC_OscConfig+0x2b0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fbd5 	bl	800081c <HAL_InitTick>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d043      	beq.n	8001100 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e253      	b.n	8001524 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d023      	beq.n	80010cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001084:	4b49      	ldr	r3, [pc, #292]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a48      	ldr	r2, [pc, #288]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 800108a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001090:	f7ff fc10 	bl	80008b4 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001098:	f7ff fc0c 	bl	80008b4 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e23c      	b.n	8001524 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010aa:	4b40      	ldr	r3, [pc, #256]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0f0      	beq.n	8001098 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b6:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	061b      	lsls	r3, r3, #24
 80010c4:	4939      	ldr	r1, [pc, #228]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	604b      	str	r3, [r1, #4]
 80010ca:	e01a      	b.n	8001102 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010cc:	4b37      	ldr	r3, [pc, #220]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a36      	ldr	r2, [pc, #216]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 80010d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d8:	f7ff fbec 	bl	80008b4 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e0:	f7ff fbe8 	bl	80008b4 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e218      	b.n	8001524 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010f2:	4b2e      	ldr	r3, [pc, #184]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f0      	bne.n	80010e0 <HAL_RCC_OscConfig+0x1e0>
 80010fe:	e000      	b.n	8001102 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001100:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	2b00      	cmp	r3, #0
 800110c:	d03c      	beq.n	8001188 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d01c      	beq.n	8001150 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001116:	4b25      	ldr	r3, [pc, #148]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8001118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800111c:	4a23      	ldr	r2, [pc, #140]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001126:	f7ff fbc5 	bl	80008b4 <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800112e:	f7ff fbc1 	bl	80008b4 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e1f1      	b.n	8001524 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001140:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8001142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0ef      	beq.n	800112e <HAL_RCC_OscConfig+0x22e>
 800114e:	e01b      	b.n	8001188 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8001152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001156:	4a15      	ldr	r2, [pc, #84]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 8001158:	f023 0301 	bic.w	r3, r3, #1
 800115c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001160:	f7ff fba8 	bl	80008b4 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001168:	f7ff fba4 	bl	80008b4 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e1d4      	b.n	8001524 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 800117c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1ef      	bne.n	8001168 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 80ab 	beq.w	80012ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <HAL_RCC_OscConfig+0x2ac>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d106      	bne.n	80011b4 <HAL_RCC_OscConfig+0x2b4>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e005      	b.n	80011b6 <HAL_RCC_OscConfig+0x2b6>
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000
 80011b0:	20000004 	.word	0x20000004
 80011b4:	2300      	movs	r3, #0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00d      	beq.n	80011d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	4baf      	ldr	r3, [pc, #700]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 80011bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011be:	4aae      	ldr	r2, [pc, #696]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c4:	6593      	str	r3, [r2, #88]	; 0x58
 80011c6:	4bac      	ldr	r3, [pc, #688]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011d2:	2301      	movs	r3, #1
 80011d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d6:	4ba9      	ldr	r3, [pc, #676]	; (800147c <HAL_RCC_OscConfig+0x57c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d118      	bne.n	8001214 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011e2:	4ba6      	ldr	r3, [pc, #664]	; (800147c <HAL_RCC_OscConfig+0x57c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4aa5      	ldr	r2, [pc, #660]	; (800147c <HAL_RCC_OscConfig+0x57c>)
 80011e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ee:	f7ff fb61 	bl	80008b4 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f6:	f7ff fb5d 	bl	80008b4 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e18d      	b.n	8001524 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001208:	4b9c      	ldr	r3, [pc, #624]	; (800147c <HAL_RCC_OscConfig+0x57c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0f0      	beq.n	80011f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d108      	bne.n	800122e <HAL_RCC_OscConfig+0x32e>
 800121c:	4b96      	ldr	r3, [pc, #600]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 800121e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001222:	4a95      	ldr	r2, [pc, #596]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800122c:	e024      	b.n	8001278 <HAL_RCC_OscConfig+0x378>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b05      	cmp	r3, #5
 8001234:	d110      	bne.n	8001258 <HAL_RCC_OscConfig+0x358>
 8001236:	4b90      	ldr	r3, [pc, #576]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 8001238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800123c:	4a8e      	ldr	r2, [pc, #568]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 800123e:	f043 0304 	orr.w	r3, r3, #4
 8001242:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001246:	4b8c      	ldr	r3, [pc, #560]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 8001248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800124c:	4a8a      	ldr	r2, [pc, #552]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001256:	e00f      	b.n	8001278 <HAL_RCC_OscConfig+0x378>
 8001258:	4b87      	ldr	r3, [pc, #540]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 800125a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800125e:	4a86      	ldr	r2, [pc, #536]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 8001260:	f023 0301 	bic.w	r3, r3, #1
 8001264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001268:	4b83      	ldr	r3, [pc, #524]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 800126a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800126e:	4a82      	ldr	r2, [pc, #520]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 8001270:	f023 0304 	bic.w	r3, r3, #4
 8001274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d016      	beq.n	80012ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001280:	f7ff fb18 	bl	80008b4 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001286:	e00a      	b.n	800129e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001288:	f7ff fb14 	bl	80008b4 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	f241 3288 	movw	r2, #5000	; 0x1388
 8001296:	4293      	cmp	r3, r2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e142      	b.n	8001524 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800129e:	4b76      	ldr	r3, [pc, #472]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 80012a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0ed      	beq.n	8001288 <HAL_RCC_OscConfig+0x388>
 80012ac:	e015      	b.n	80012da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ae:	f7ff fb01 	bl	80008b4 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012b4:	e00a      	b.n	80012cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b6:	f7ff fafd 	bl	80008b4 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e12b      	b.n	8001524 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012cc:	4b6a      	ldr	r3, [pc, #424]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 80012ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1ed      	bne.n	80012b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012da:	7ffb      	ldrb	r3, [r7, #31]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d105      	bne.n	80012ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e0:	4b65      	ldr	r3, [pc, #404]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 80012e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e4:	4a64      	ldr	r2, [pc, #400]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 80012e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0320 	and.w	r3, r3, #32
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d03c      	beq.n	8001372 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d01c      	beq.n	800133a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001300:	4b5d      	ldr	r3, [pc, #372]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 8001302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001306:	4a5c      	ldr	r2, [pc, #368]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001310:	f7ff fad0 	bl	80008b4 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001318:	f7ff facc 	bl	80008b4 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e0fc      	b.n	8001524 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800132a:	4b53      	ldr	r3, [pc, #332]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 800132c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0ef      	beq.n	8001318 <HAL_RCC_OscConfig+0x418>
 8001338:	e01b      	b.n	8001372 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800133a:	4b4f      	ldr	r3, [pc, #316]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 800133c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001340:	4a4d      	ldr	r2, [pc, #308]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 8001342:	f023 0301 	bic.w	r3, r3, #1
 8001346:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800134a:	f7ff fab3 	bl	80008b4 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001352:	f7ff faaf 	bl	80008b4 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e0df      	b.n	8001524 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001364:	4b44      	ldr	r3, [pc, #272]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 8001366:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1ef      	bne.n	8001352 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 80d3 	beq.w	8001522 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800137c:	4b3e      	ldr	r3, [pc, #248]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	2b0c      	cmp	r3, #12
 8001386:	f000 808d 	beq.w	80014a4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d15a      	bne.n	8001448 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001392:	4b39      	ldr	r3, [pc, #228]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a38      	ldr	r2, [pc, #224]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 8001398:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800139c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139e:	f7ff fa89 	bl	80008b4 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a6:	f7ff fa85 	bl	80008b4 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e0b5      	b.n	8001524 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013b8:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1f0      	bne.n	80013a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013c4:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 80013c6:	68da      	ldr	r2, [r3, #12]
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <HAL_RCC_OscConfig+0x580>)
 80013ca:	4013      	ands	r3, r2
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6a11      	ldr	r1, [r2, #32]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013d4:	3a01      	subs	r2, #1
 80013d6:	0112      	lsls	r2, r2, #4
 80013d8:	4311      	orrs	r1, r2
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80013de:	0212      	lsls	r2, r2, #8
 80013e0:	4311      	orrs	r1, r2
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013e6:	0852      	lsrs	r2, r2, #1
 80013e8:	3a01      	subs	r2, #1
 80013ea:	0552      	lsls	r2, r2, #21
 80013ec:	4311      	orrs	r1, r2
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013f2:	0852      	lsrs	r2, r2, #1
 80013f4:	3a01      	subs	r2, #1
 80013f6:	0652      	lsls	r2, r2, #25
 80013f8:	4311      	orrs	r1, r2
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80013fe:	06d2      	lsls	r2, r2, #27
 8001400:	430a      	orrs	r2, r1
 8001402:	491d      	ldr	r1, [pc, #116]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 8001404:	4313      	orrs	r3, r2
 8001406:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a1a      	ldr	r2, [pc, #104]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 800140e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001412:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	4a17      	ldr	r2, [pc, #92]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 800141a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800141e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001420:	f7ff fa48 	bl	80008b4 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001428:	f7ff fa44 	bl	80008b4 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e074      	b.n	8001524 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0x528>
 8001446:	e06c      	b.n	8001522 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 800144e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001452:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	4a07      	ldr	r2, [pc, #28]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 800145a:	f023 0303 	bic.w	r3, r3, #3
 800145e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_RCC_OscConfig+0x578>)
 8001466:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800146a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800146e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fa20 	bl	80008b4 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001476:	e00e      	b.n	8001496 <HAL_RCC_OscConfig+0x596>
 8001478:	40021000 	.word	0x40021000
 800147c:	40007000 	.word	0x40007000
 8001480:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001484:	f7ff fa16 	bl	80008b4 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e046      	b.n	8001524 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001496:	4b25      	ldr	r3, [pc, #148]	; (800152c <HAL_RCC_OscConfig+0x62c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x584>
 80014a2:	e03e      	b.n	8001522 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e039      	b.n	8001524 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80014b0:	4b1e      	ldr	r3, [pc, #120]	; (800152c <HAL_RCC_OscConfig+0x62c>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f003 0203 	and.w	r2, r3, #3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d12c      	bne.n	800151e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ce:	3b01      	subs	r3, #1
 80014d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d123      	bne.n	800151e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d11b      	bne.n	800151e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d113      	bne.n	800151e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	085b      	lsrs	r3, r3, #1
 8001502:	3b01      	subs	r3, #1
 8001504:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001506:	429a      	cmp	r2, r3
 8001508:	d109      	bne.n	800151e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001514:	085b      	lsrs	r3, r3, #1
 8001516:	3b01      	subs	r3, #1
 8001518:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800151a:	429a      	cmp	r2, r3
 800151c:	d001      	beq.n	8001522 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3720      	adds	r7, #32
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40021000 	.word	0x40021000

08001530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e11e      	b.n	8001786 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001548:	4b91      	ldr	r3, [pc, #580]	; (8001790 <HAL_RCC_ClockConfig+0x260>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d910      	bls.n	8001578 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001556:	4b8e      	ldr	r3, [pc, #568]	; (8001790 <HAL_RCC_ClockConfig+0x260>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 020f 	bic.w	r2, r3, #15
 800155e:	498c      	ldr	r1, [pc, #560]	; (8001790 <HAL_RCC_ClockConfig+0x260>)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001566:	4b8a      	ldr	r3, [pc, #552]	; (8001790 <HAL_RCC_ClockConfig+0x260>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e106      	b.n	8001786 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	2b00      	cmp	r3, #0
 8001582:	d073      	beq.n	800166c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b03      	cmp	r3, #3
 800158a:	d129      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800158c:	4b81      	ldr	r3, [pc, #516]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0f4      	b.n	8001786 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800159c:	f000 f966 	bl	800186c <RCC_GetSysClockFreqFromPLLSource>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4a7c      	ldr	r2, [pc, #496]	; (8001798 <HAL_RCC_ClockConfig+0x268>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d93f      	bls.n	800162a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80015aa:	4b7a      	ldr	r3, [pc, #488]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d009      	beq.n	80015ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d033      	beq.n	800162a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d12f      	bne.n	800162a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80015ca:	4b72      	ldr	r3, [pc, #456]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015d2:	4a70      	ldr	r2, [pc, #448]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 80015d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	e024      	b.n	800162a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d107      	bne.n	80015f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015e8:	4b6a      	ldr	r3, [pc, #424]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d109      	bne.n	8001608 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0c6      	b.n	8001786 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f8:	4b66      	ldr	r3, [pc, #408]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e0be      	b.n	8001786 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001608:	f000 f8ce 	bl	80017a8 <HAL_RCC_GetSysClockFreq>
 800160c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	4a61      	ldr	r2, [pc, #388]	; (8001798 <HAL_RCC_ClockConfig+0x268>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d909      	bls.n	800162a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001616:	4b5f      	ldr	r3, [pc, #380]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800161e:	4a5d      	ldr	r2, [pc, #372]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 8001620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001624:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800162a:	4b5a      	ldr	r3, [pc, #360]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f023 0203 	bic.w	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4957      	ldr	r1, [pc, #348]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 8001638:	4313      	orrs	r3, r2
 800163a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800163c:	f7ff f93a 	bl	80008b4 <HAL_GetTick>
 8001640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001642:	e00a      	b.n	800165a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001644:	f7ff f936 	bl	80008b4 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e095      	b.n	8001786 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165a:	4b4e      	ldr	r3, [pc, #312]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 020c 	and.w	r2, r3, #12
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	429a      	cmp	r2, r3
 800166a:	d1eb      	bne.n	8001644 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d023      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001684:	4b43      	ldr	r3, [pc, #268]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	4a42      	ldr	r2, [pc, #264]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 800168a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800168e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d007      	beq.n	80016ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800169c:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80016a4:	4a3b      	ldr	r2, [pc, #236]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 80016a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ac:	4b39      	ldr	r3, [pc, #228]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4936      	ldr	r1, [pc, #216]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	608b      	str	r3, [r1, #8]
 80016be:	e008      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	2b80      	cmp	r3, #128	; 0x80
 80016c4:	d105      	bne.n	80016d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80016c6:	4b33      	ldr	r3, [pc, #204]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	4a32      	ldr	r2, [pc, #200]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 80016cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d2:	4b2f      	ldr	r3, [pc, #188]	; (8001790 <HAL_RCC_ClockConfig+0x260>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d21d      	bcs.n	800171c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e0:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <HAL_RCC_ClockConfig+0x260>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f023 020f 	bic.w	r2, r3, #15
 80016e8:	4929      	ldr	r1, [pc, #164]	; (8001790 <HAL_RCC_ClockConfig+0x260>)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016f0:	f7ff f8e0 	bl	80008b4 <HAL_GetTick>
 80016f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	e00a      	b.n	800170e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f8:	f7ff f8dc 	bl	80008b4 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	; 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e03b      	b.n	8001786 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_RCC_ClockConfig+0x260>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d1ed      	bne.n	80016f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	d008      	beq.n	800173a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	4917      	ldr	r1, [pc, #92]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 8001736:	4313      	orrs	r3, r2
 8001738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d009      	beq.n	800175a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001746:	4b13      	ldr	r3, [pc, #76]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	490f      	ldr	r1, [pc, #60]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 8001756:	4313      	orrs	r3, r2
 8001758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800175a:	f000 f825 	bl	80017a8 <HAL_RCC_GetSysClockFreq>
 800175e:	4601      	mov	r1, r0
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <HAL_RCC_ClockConfig+0x264>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	091b      	lsrs	r3, r3, #4
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	4a0c      	ldr	r2, [pc, #48]	; (800179c <HAL_RCC_ClockConfig+0x26c>)
 800176c:	5cd3      	ldrb	r3, [r2, r3]
 800176e:	f003 031f 	and.w	r3, r3, #31
 8001772:	fa21 f303 	lsr.w	r3, r1, r3
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <HAL_RCC_ClockConfig+0x270>)
 8001778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_RCC_ClockConfig+0x274>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff f84c 	bl	800081c <HAL_InitTick>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40022000 	.word	0x40022000
 8001794:	40021000 	.word	0x40021000
 8001798:	04c4b400 	.word	0x04c4b400
 800179c:	08001e40 	.word	0x08001e40
 80017a0:	20000000 	.word	0x20000000
 80017a4:	20000004 	.word	0x20000004

080017a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80017ae:	4b2c      	ldr	r3, [pc, #176]	; (8001860 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d102      	bne.n	80017c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017ba:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	e047      	b.n	8001850 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80017c0:	4b27      	ldr	r3, [pc, #156]	; (8001860 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d102      	bne.n	80017d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017cc:	4b26      	ldr	r3, [pc, #152]	; (8001868 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	e03e      	b.n	8001850 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80017d2:	4b23      	ldr	r3, [pc, #140]	; (8001860 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b0c      	cmp	r3, #12
 80017dc:	d136      	bne.n	800184c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	3301      	adds	r3, #1
 80017f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d10c      	bne.n	8001816 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017fc:	4a1a      	ldr	r2, [pc, #104]	; (8001868 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	fbb2 f3f3 	udiv	r3, r2, r3
 8001804:	4a16      	ldr	r2, [pc, #88]	; (8001860 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001806:	68d2      	ldr	r2, [r2, #12]
 8001808:	0a12      	lsrs	r2, r2, #8
 800180a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800180e:	fb02 f303 	mul.w	r3, r2, r3
 8001812:	617b      	str	r3, [r7, #20]
      break;
 8001814:	e00c      	b.n	8001830 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001816:	4a13      	ldr	r2, [pc, #76]	; (8001864 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	fbb2 f3f3 	udiv	r3, r2, r3
 800181e:	4a10      	ldr	r2, [pc, #64]	; (8001860 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001820:	68d2      	ldr	r2, [r2, #12]
 8001822:	0a12      	lsrs	r2, r2, #8
 8001824:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001828:	fb02 f303 	mul.w	r3, r2, r3
 800182c:	617b      	str	r3, [r7, #20]
      break;
 800182e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	0e5b      	lsrs	r3, r3, #25
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	3301      	adds	r3, #1
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	fbb2 f3f3 	udiv	r3, r2, r3
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	e001      	b.n	8001850 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001850:	693b      	ldr	r3, [r7, #16]
}
 8001852:	4618      	mov	r0, r3
 8001854:	371c      	adds	r7, #28
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000
 8001864:	00f42400 	.word	0x00f42400
 8001868:	007a1200 	.word	0x007a1200

0800186c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001872:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800187c:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	3301      	adds	r3, #1
 8001888:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	2b03      	cmp	r3, #3
 800188e:	d10c      	bne.n	80018aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001890:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	fbb2 f3f3 	udiv	r3, r2, r3
 8001898:	4a14      	ldr	r2, [pc, #80]	; (80018ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800189a:	68d2      	ldr	r2, [r2, #12]
 800189c:	0a12      	lsrs	r2, r2, #8
 800189e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	617b      	str	r3, [r7, #20]
    break;
 80018a8:	e00c      	b.n	80018c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018b4:	68d2      	ldr	r2, [r2, #12]
 80018b6:	0a12      	lsrs	r2, r2, #8
 80018b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018bc:	fb02 f303 	mul.w	r3, r2, r3
 80018c0:	617b      	str	r3, [r7, #20]
    break;
 80018c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	0e5b      	lsrs	r3, r3, #25
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	3301      	adds	r3, #1
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80018de:	687b      	ldr	r3, [r7, #4]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	371c      	adds	r7, #28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	40021000 	.word	0x40021000
 80018f0:	007a1200 	.word	0x007a1200
 80018f4:	00f42400 	.word	0x00f42400

080018f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e097      	b.n	8001a3c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d106      	bne.n	8001926 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7fe fe51 	bl	80005c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2202      	movs	r2, #2
 800192a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800193c:	f023 0307 	bic.w	r3, r3, #7
 8001940:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3304      	adds	r3, #4
 800194a:	4619      	mov	r1, r3
 800194c:	4610      	mov	r0, r2
 800194e:	f000 f907 	bl	8001b60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	4313      	orrs	r3, r2
 8001972:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800197a:	f023 0303 	bic.w	r3, r3, #3
 800197e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	4313      	orrs	r3, r2
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001998:	f023 030c 	bic.w	r3, r3, #12
 800199c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80019a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	4313      	orrs	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	011a      	lsls	r2, r3, #4
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	031b      	lsls	r3, r3, #12
 80019c8:	4313      	orrs	r3, r2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80019d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80019de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	4313      	orrs	r3, r2
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a6c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d110      	bne.n	8001a96 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d102      	bne.n	8001a80 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001a7a:	7b7b      	ldrb	r3, [r7, #13]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d001      	beq.n	8001a84 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e068      	b.n	8001b56 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2202      	movs	r2, #2
 8001a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a94:	e031      	b.n	8001afa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d110      	bne.n	8001abe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001a9c:	7bbb      	ldrb	r3, [r7, #14]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d102      	bne.n	8001aa8 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001aa2:	7b3b      	ldrb	r3, [r7, #12]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d001      	beq.n	8001aac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e054      	b.n	8001b56 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001abc:	e01d      	b.n	8001afa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d108      	bne.n	8001ad6 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001ac4:	7bbb      	ldrb	r3, [r7, #14]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d105      	bne.n	8001ad6 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001aca:	7b7b      	ldrb	r3, [r7, #13]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d102      	bne.n	8001ad6 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001ad0:	7b3b      	ldrb	r3, [r7, #12]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d001      	beq.n	8001ada <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e03d      	b.n	8001b56 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2202      	movs	r2, #2
 8001ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2202      	movs	r2, #2
 8001aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2202      	movs	r2, #2
 8001af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <HAL_TIM_Encoder_Start+0xc2>
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d008      	beq.n	8001b16 <HAL_TIM_Encoder_Start+0xd2>
 8001b04:	e00f      	b.n	8001b26 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f8b6 	bl	8001c80 <TIM_CCxChannelCmd>
      break;
 8001b14:	e016      	b.n	8001b44 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	2104      	movs	r1, #4
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f8ae 	bl	8001c80 <TIM_CCxChannelCmd>
      break;
 8001b24:	e00e      	b.n	8001b44 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f8a6 	bl	8001c80 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2104      	movs	r1, #4
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 f89f 	bl	8001c80 <TIM_CCxChannelCmd>
      break;
 8001b42:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a3c      	ldr	r2, [pc, #240]	; (8001c64 <TIM_Base_SetConfig+0x104>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d00f      	beq.n	8001b98 <TIM_Base_SetConfig+0x38>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7e:	d00b      	beq.n	8001b98 <TIM_Base_SetConfig+0x38>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a39      	ldr	r2, [pc, #228]	; (8001c68 <TIM_Base_SetConfig+0x108>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d007      	beq.n	8001b98 <TIM_Base_SetConfig+0x38>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a38      	ldr	r2, [pc, #224]	; (8001c6c <TIM_Base_SetConfig+0x10c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d003      	beq.n	8001b98 <TIM_Base_SetConfig+0x38>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a37      	ldr	r2, [pc, #220]	; (8001c70 <TIM_Base_SetConfig+0x110>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d108      	bne.n	8001baa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a2d      	ldr	r2, [pc, #180]	; (8001c64 <TIM_Base_SetConfig+0x104>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d01b      	beq.n	8001bea <TIM_Base_SetConfig+0x8a>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb8:	d017      	beq.n	8001bea <TIM_Base_SetConfig+0x8a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a2a      	ldr	r2, [pc, #168]	; (8001c68 <TIM_Base_SetConfig+0x108>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d013      	beq.n	8001bea <TIM_Base_SetConfig+0x8a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a29      	ldr	r2, [pc, #164]	; (8001c6c <TIM_Base_SetConfig+0x10c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d00f      	beq.n	8001bea <TIM_Base_SetConfig+0x8a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a28      	ldr	r2, [pc, #160]	; (8001c70 <TIM_Base_SetConfig+0x110>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d00b      	beq.n	8001bea <TIM_Base_SetConfig+0x8a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a27      	ldr	r2, [pc, #156]	; (8001c74 <TIM_Base_SetConfig+0x114>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d007      	beq.n	8001bea <TIM_Base_SetConfig+0x8a>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a26      	ldr	r2, [pc, #152]	; (8001c78 <TIM_Base_SetConfig+0x118>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d003      	beq.n	8001bea <TIM_Base_SetConfig+0x8a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a25      	ldr	r2, [pc, #148]	; (8001c7c <TIM_Base_SetConfig+0x11c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d108      	bne.n	8001bfc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <TIM_Base_SetConfig+0x104>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d00f      	beq.n	8001c48 <TIM_Base_SetConfig+0xe8>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a11      	ldr	r2, [pc, #68]	; (8001c70 <TIM_Base_SetConfig+0x110>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d00b      	beq.n	8001c48 <TIM_Base_SetConfig+0xe8>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a10      	ldr	r2, [pc, #64]	; (8001c74 <TIM_Base_SetConfig+0x114>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d007      	beq.n	8001c48 <TIM_Base_SetConfig+0xe8>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a0f      	ldr	r2, [pc, #60]	; (8001c78 <TIM_Base_SetConfig+0x118>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d003      	beq.n	8001c48 <TIM_Base_SetConfig+0xe8>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a0e      	ldr	r2, [pc, #56]	; (8001c7c <TIM_Base_SetConfig+0x11c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d103      	bne.n	8001c50 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	615a      	str	r2, [r3, #20]
}
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40012c00 	.word	0x40012c00
 8001c68:	40000400 	.word	0x40000400
 8001c6c:	40000800 	.word	0x40000800
 8001c70:	40013400 	.word	0x40013400
 8001c74:	40014000 	.word	0x40014000
 8001c78:	40014400 	.word	0x40014400
 8001c7c:	40014800 	.word	0x40014800

08001c80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	2201      	movs	r2, #1
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a1a      	ldr	r2, [r3, #32]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6a1a      	ldr	r2, [r3, #32]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	621a      	str	r2, [r3, #32]
}
 8001cbe:	bf00      	nop
 8001cc0:	371c      	adds	r7, #28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e065      	b.n	8001db0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a2c      	ldr	r2, [pc, #176]	; (8001dbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d004      	beq.n	8001d18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a2b      	ldr	r2, [pc, #172]	; (8001dc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d108      	bne.n	8001d2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001d1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1b      	ldr	r2, [pc, #108]	; (8001dbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d018      	beq.n	8001d84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5a:	d013      	beq.n	8001d84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00e      	beq.n	8001d84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a17      	ldr	r2, [pc, #92]	; (8001dc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d009      	beq.n	8001d84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d004      	beq.n	8001d84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a13      	ldr	r2, [pc, #76]	; (8001dcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d10c      	bne.n	8001d9e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	40012c00 	.word	0x40012c00
 8001dc0:	40013400 	.word	0x40013400
 8001dc4:	40000400 	.word	0x40000400
 8001dc8:	40000800 	.word	0x40000800
 8001dcc:	40014000 	.word	0x40014000

08001dd0 <__libc_init_array>:
 8001dd0:	b570      	push	{r4, r5, r6, lr}
 8001dd2:	4e0d      	ldr	r6, [pc, #52]	; (8001e08 <__libc_init_array+0x38>)
 8001dd4:	4c0d      	ldr	r4, [pc, #52]	; (8001e0c <__libc_init_array+0x3c>)
 8001dd6:	1ba4      	subs	r4, r4, r6
 8001dd8:	10a4      	asrs	r4, r4, #2
 8001dda:	2500      	movs	r5, #0
 8001ddc:	42a5      	cmp	r5, r4
 8001dde:	d109      	bne.n	8001df4 <__libc_init_array+0x24>
 8001de0:	4e0b      	ldr	r6, [pc, #44]	; (8001e10 <__libc_init_array+0x40>)
 8001de2:	4c0c      	ldr	r4, [pc, #48]	; (8001e14 <__libc_init_array+0x44>)
 8001de4:	f000 f820 	bl	8001e28 <_init>
 8001de8:	1ba4      	subs	r4, r4, r6
 8001dea:	10a4      	asrs	r4, r4, #2
 8001dec:	2500      	movs	r5, #0
 8001dee:	42a5      	cmp	r5, r4
 8001df0:	d105      	bne.n	8001dfe <__libc_init_array+0x2e>
 8001df2:	bd70      	pop	{r4, r5, r6, pc}
 8001df4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001df8:	4798      	blx	r3
 8001dfa:	3501      	adds	r5, #1
 8001dfc:	e7ee      	b.n	8001ddc <__libc_init_array+0xc>
 8001dfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e02:	4798      	blx	r3
 8001e04:	3501      	adds	r5, #1
 8001e06:	e7f2      	b.n	8001dee <__libc_init_array+0x1e>
 8001e08:	08001e50 	.word	0x08001e50
 8001e0c:	08001e50 	.word	0x08001e50
 8001e10:	08001e50 	.word	0x08001e50
 8001e14:	08001e54 	.word	0x08001e54

08001e18 <memset>:
 8001e18:	4402      	add	r2, r0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d100      	bne.n	8001e22 <memset+0xa>
 8001e20:	4770      	bx	lr
 8001e22:	f803 1b01 	strb.w	r1, [r3], #1
 8001e26:	e7f9      	b.n	8001e1c <memset+0x4>

08001e28 <_init>:
 8001e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2a:	bf00      	nop
 8001e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e2e:	bc08      	pop	{r3}
 8001e30:	469e      	mov	lr, r3
 8001e32:	4770      	bx	lr

08001e34 <_fini>:
 8001e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e36:	bf00      	nop
 8001e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e3a:	bc08      	pop	{r3}
 8001e3c:	469e      	mov	lr, r3
 8001e3e:	4770      	bx	lr
